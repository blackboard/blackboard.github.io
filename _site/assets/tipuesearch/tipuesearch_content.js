var tipuesearch = {"pages": [{
    "title": "How to Create a User With Limited Entitlements For REST API Calls",
    "text": "How to Create a User With Limited Entitlements For REST API Calls First, as our documentation states, a Blackboard Learn admin should never be told to associate a user with Learn admin privileges with any REST API integration, see this document. Hence we often get questions from folks on how to create a user to associate with a REST API integration that has limited capability on a Learn system. One way is to research and design your REST application to use OAuth 2 3-legged Authentication. See the documents referenced below. 3LO guarentees that the user using your REST Application can only do what they can do via the Learn UX when they are logged into Learn. However, if your application is using our OAuth 2 2-legged Authentication read on. Or I should say, watch on. I created the following to answer the question “Is it possible to create a user that has only the necessary permissions and avoid using “blackboard admin” user?” The answer is yes! Here’s a video explaining exactly how to proceed. Reference Documentation: https://docs.blackboard.com/learn/rest/getting-started/rest-and-learn https://docs.blackboard.com/learn/rest/getting-started/basic-authentication https://docs.blackboard.com/learn/rest/getting-started/3lo https://github.com/Kong/mashape-oauth/blob/master/FLOWS.md https://docs.blackboard.com/learn/rest/getting-started/tutorials Bookmarklet to help map entitlements to permissions",
    "tags": "rest learn api announcement",
    "url": "/announcement/2021/01/06/How-to-Create-a-User-With-Limited-Entitlements-For-REST-API-Calls.html"
  },{
    "title": "Caliper Documentation Updated for 1.1",
    "text": "Caliper Documentation Updated for 1.1 We have spent some time over the holiday break updating and organizing our documentation better. One of the longest outstanding changes was to update the Caliper event samples from 1.0 to 1.1. I am pleased to announce that we have finally completed this project. The event guide is largely unchanged, but the individual events have all been updated to show current sample payloads from each event, allowing you to better anticipate the messages you will receive and better plan your storage and reporting requirements. Over the next few weeks, we will be highlighting some of the other key updates that we hope will help ease the onboarding process for new developers and make finding exactly what you need when you need it for everyone. Happy Coding!",
    "tags": "standards caliper update announcement",
    "url": "/announcement/2021/01/05/Caliper-Documentation-Updated-for-1.1.html"
  },{
    "title": "SOAP EOL Explained",
    "text": "SOAP EOL Explained Back in the day, January 4, 2019 to be exact, Blackboard announced deprecation of our SOAP Web Services with this article Blackboard SOAP Web Services Deprecation Now, almost two years later in our Learn SaaS Relase Notes we’ve written “As of December 31, 2020, Blackboard Learn SOAP Web Services are no longer supported, as they have reached the end of life per our deprecation policy.” What does this mean for you as a develoepr? The most common concern is “Will my SOAP code continue to work in an earlier version of Blackboard Learn?” or some variation. Here’s a recent example: “Will this be for all versions, or will SOAP API still be available on version 3800?” The answer is that client’s self and manged-hosted systems that are on older versions of Learn will not be impacted. If your client is runnign 3800.0.3 and upgrades to the most recent Cumulative Update, the SOAP Webservices should continue to work for them. For self and managed-hosted clients that are on 3900.0.0 and are now upgrading using the same build numbers as in SaaS, SOAP will not be supported in any release post Dec 31, 2020. Another common quesiton is from those using the Blackboard Learn LIS 2.0 SIS integration, which is SOAP based. No, we are keeping the LIS 2.0 SIS integration in the product at this time. It will not be affected. If you have additional questions, drop a line to developers@blackboard.com and we’ll update this blog post with the answer. Happy 2021!",
    "tags": "soap learn eol api blog",
    "url": "/blog/2020/12/16/SOAP-EOL-Explained.html"
  },{
    "title": "Cookies and Browsers",
    "text": "Cookies and Browsers Most people like cookies. Internet browsers used to like cookies, but a lot has changed in the last few years. We are seeing a lot of applications stop working in some browsers because cookies are not being shared, and this post hopes to help explain why that is happening and what can be done about it. A web application may set a cookie to track a user’s session. This is very common, however if your web application is going to be hosted in an iframe, then there’s a good chance your cookie won’t be sent back to you. This is because browsers are clamping down on sending “3rd-party” cookies back to applications hosted in an iframe. Note that a 3rd party is a site that is hosted on a domain different than the 1st party, or your web application. The reason is because these cookies can be used for tracking your internet and browsing activity. Safari has disallowed this for years as a user privacy measure. Another case where cookies aren’t being sent back is during a form POST back to your application. If you set a cookie, then launch to a 3rd party application, if that application does a form POST back to you, the browser will likely not send your cookie back because it is trying to help prevent cross-site request forgery attacks. Rather than detail all the scenarios and work arounds here I link to two web pages that are immensely helpful in explaining the situation and some possible workarounds. The TL;DR is if you must set a cookie in your web application, be careful how you configure that cookie’s properties, and understand that at least in Safari, your cookies may not get passed back to you. The other browser makers are going to get as restrictive as Safari soon. Samesite Cookies Explained Samesite Cookie Recipes",
    "tags": "lti learn api blog",
    "url": "/blog/2020/10/15/Cookies-and-Browsers.html"
  },{
    "title": "New! Student Id Template Variable",
    "text": "New! Student Id Template Variable New in SaaS and the forthcoming 3900 release* an @X@user.student_id@X@ template variable!. Statements regarding our product development initiatives, including new products and future product upgrades, updates or enhancements represent our current intentions, but may be modified, delayed or abandoned without prior notice and there is no assurance that such offering, upgrades, updates or functionality will become available unless and until they have been made generally available to our customers. -markk",
    "tags": "learn template-variables announcement",
    "url": "/announcement/2020/10/07/New-Student-Id-Template-Variable.html"
  },{
    "title": "Oct 2020 - Changes that will impact Learn B2 Integrations",
    "text": "Changes that will impact B2 Integrations Read this article . Download Oct 2020 - Changes that will impact Learn Integrations.docx to find out how to get early access for testing. -Mark Kauffman",
    "tags": "building-blocks update announcement",
    "url": "/announcement/2020/10/04/Changes-That-Impact-Learn-B2-Integrations.html"
  },{
    "title": "Ally as a Service and UEF Documentation now available",
    "text": "Ally as a Service and UEF Documentation now available Today we launched two new sections of developer documentation - Ally as a Service (AaaS) and the Learn Ultra Extension Framework (UEF). These new APIs give you access to integration points and functionality that allows you to bring the power of Blackboard into your applications, and ultimately, your user’s experience. Ally as a Service is a standalone, separately licensed API to apply specific components of Ally’s approach to content within your application. In its initial form, you are able to upload files, process them through Ally’s accessibility checklist, and retrieve data that tells you what can be improved. This is only the tip of the iceberg, so make sure you continue to monitor this amazing capability for enhancements moving forward. For more information, including a conversation about pricing, reach out to your Account Executive. The Ultra Extension Framework Premium APIs allow an integration to subscribe to events happening real-time in the Ultra UI, and respond to those events by interacting directly with the UI to do things like open panels, display modals, show messages and notifications, and augment the help system in Learn. Partners will need to be at a bronze level or higher to access these Premium APIs. See the partnership team for more information. If you are not a partner, check out how to become a partner. Licensed clients need only request access. Access is granted to your group in the developer portal, much like rate limits. Just open a case on Behind the Blackboard to get started! As always, let us know if you have any questions! Happy Coding!",
    "tags": "rest ally learn ultra uef announcement",
    "url": "/announcement/2020/09/03/Ally-as-a-Service-and-UEF-Documentation-now-available.html"
  },{
    "title": "New!! REST and UEF Tutorials",
    "text": "New!! REST and UEF Tutorials New!! Visit the REST Tutorials and UEF Tutorials pages for our tutorials on these topics!! Cheers! -markk",
    "tags": "rest uef tutorials announcement",
    "url": "/announcement/2020/08/30/NewRESTandUEF-tutorials.html"
  },{
    "title": "DevCon 2020 - New LTI Advantage Tutorial",
    "text": "DevCon 2020 - New LTI Advantage Tutorial Be sure to revisit the Developing an LTI Advantage Solution page for the latest and greatest tutorial from DevCon 2020! Cheers! -markk",
    "tags": "lti standards learn announcement",
    "url": "/announcement/2020/08/24/DevCon-2020-new-lti-advantage-tutorial.html"
  },{
    "title": "DevCon 2020 By The Numbers",
    "text": "DevCon 2020 by the numbers! DevCon 2020 is in the books, and what an amazing conference it was. This blog will start a weekly series in which everything Thursday, we will talk about DevCon from a content perspective. To begin this series, I want to set some context about the scope of this conference, so you, the reader, will have a baseline to base your opinions from. So let’s start with some basic figures: Client Registrations: 3,113​ Institutions: 1,276​ Countries: 54​ Badges: 2,348​ 358 Unique attendees to live sessions​ 2,352 Attendees to live sessions total​ 121,842 Collab session minutes Blackboarders: 300​ If we really look at this, we can come up with some interesting insights. If we base our calculations on unique attendees to live sessions, we can see that the average attendee spent almost 6 hours actively engaged in sessions. We had 71 hours worth of sessions spread out over three separate time zones – Monday - Friday 8am-10am EDT, Monday - Friday 1pm-3pm EDT and on five days, 3pm to 4pm, and Monday-Thursday 8pm-10pm EDT – so the average attendee joining 6 sessions is pretty amazing. We also issued 6.6 badges per active attendee programmatically through Badgr. These badges included attending at least 75% of a collab session associated with a session, pathways, which awarded badges based on predetermined groups of session badges, interaction with Ally, and earning points and promotions in the leaderboard. Speaking of insights, let’s take a look at a few that show how users interacted with the content provided: Numbers and charts are cool, but what really matters from a DevCon perspective, is the experience of the attendees. Here are a few quotes that I think sum up the DevCon 2020 experience more that any statistic or chart can: “SUPER big high-five / cheers / shout-out and ALL the other superlatives out to @Scott Hurrey and all that helped make this 2020 DevCon !!!! have greatly enjoyed it in this time of Social Distancing”​ Kevin Squire, PA Virtual Charter School “Thanks @shurrey Scott for an awesome experience.. and thank you to all the presenters as well as participants. Look forward to continue networking and finding better solutions for students and faculty.”​ Arokia Raj, INTI International Universities and Colleges, Malaysia “A big thank you to @shurrey and colleagues from @Blackboard for making the 2020 #DevCon a really special online experience. Spreading the event out over a fortnight gave participants a chance to practice and play, not just listen. Fun in dark times.”​ Malcolm Murray, Durham To summarize, DevCon 2020 was a unique experience, and one that gave me a little bit of normalcy. Of course I would rather see everyone in person, but since I can’t, I was extremely happy we could have a virtual get-together. Happy Coding! -scott",
    "tags": "devcon community recap",
    "url": "/devcon/2020/08/03/DevCon-2020-by-the-numbers.html"
  },{
    "title": "In Orbit at DevCon 2020",
    "text": "In Orbit at DevCon 2020 DevCon 2020 kicked off in full force this week with clients, partners and Blackboarders around the world coming together in Blackboard Learn Ultra to network, share knowledge, and dig deeper into Blackboard tech. We’ve had a record number of people at DevCon with 2,273 attendees logging in from 973 institutions and 43 countries throughout the week. We also had some amazing content, delivered all over the world. Our most-attended session was ‘Collaborate Best Practices’ presented by Amy Eyre from the University of York and Helga Gunnarsdottir from the University of the West of England (UWE), co-chairs of the EMEA Mobile and Collaborate User Group, affectionately known as MoCo. Other highlights include the ‘May the Data be with you’ series. I definitly miss seeing everyone in person, so the lively interaction in these sessions led by a talented group of System Administrators was definitely the next best thing. Big thanks to Casey Eubank from WSU Tech, Chris Bray from Arkansas, Heather Crites from Columbia State Community College, Dan Gioia from St. Louis Community College, Bradley Lawton from Louisville, and Mark Reynolds from University of Illinois at Urbana-Champaign. There were also a number of other sessions that were well-attended and extremely interesting, including: ‘LTI Advantage for System Administrators’, a thorough overview from Blackboard’s own Eric Preston of the history of LTI, the new LTI Advantage spec, and everything a system administrator needs to know about LTI. ‘A Galaxy of Learn Data - Blast off with BbData &amp; Python!’ was a look at the amazing work that Mike Bechtel from Indian River State College has done using Python to interact with Blackboard Data. ‘Turning any resource into an LTI tool to optimize Base Navigation’ from University of Chicago’s Szymon Machajewski was an entertaining look at a simple tool that turns any URL into an LTI tool that can be embedded into any LTI-compliant platform. I wish I could list highlights of all of the sessions, but in the spirit of brevity, let me just say thank you. Thank you to all of our presenters for taking the time out of your busy schedule – sometimes crazy early, crazy late, or both – to share your knowledge with the rest of our community. There is no better way to support and learn from each other than open communication. I look forward to building on this virtual DevCon to continue that global communication. Next week, we’ll continue running sessions three times each day to accommodate all time zones and schedules. Here are some sessions you won’t want to miss: The Python and the Postman - REST APIs for Beginners Migrate Your B2 to LTI Advantage and REST Models for Blackboard Learn REST and LTI Integrations The DevCon Gamification Query: what we built, how we designed it, and how might you adapt it for your institution GUI Admin Tips and Tricks Unconference Sessions And don’t forget about Hackboard: Data. This weeklong event will allow attendees to build meaningful insights against the wealth of information Blackboard Data puts at your fingertips. We’ll kick off Monday and finish on Friday, with two Q&amp;A sessions in between. So add the Hackboard: Data session to your schedule and join us for the kickoff on Monday! As I write this, it looks like Mark Reynolds is atop the leaderboard, with Bradley Lawton and Eric Silva fast on his heels. And I would be remiss if I didn’t mention our badging with Badgr. So far (not including Friday), we have awarded 480 badges, including: Arokia Raj, INTI Internation University and Colleges in Malaysia, who earned the ‘Daily Champions Champion’ badge by earning all of the Daily Champion badges. Mark Carroll, Mark Reynolds, and Kevin Lowey who earned the ‘Let’s take it data day’ badge, by attending 4 of the 8 data-based (see what I did there?) sessions. Mark Carroll, Alicia Dunlap, Irene Rojas, and Elizabeth Barcena, who have attended more than half of the LTI sessions, earning them the ‘LTI Advantageous’ badge. Hoping to see all who attended and more back on Monday as we get ready for another week of great content from our clients (and us, too). Now you know, I can’t let the chance to write some code poetry pass by: DevCon – one week down. Full of tips, tricks, chits and chats. Earn those badges yet?",
    "tags": "devcon community recap",
    "url": "/devcon/2020/07/10/In-Orbit-at-DevCon-2020.html"
  },{
    "title": "3LO",
    "text": "Three-Legged OAuth One of the drawbacks associated with Basic Authentication is that the application requires broad access, as the tool is acting as a system-level user and enacting for the user. Three-legged OAuth (3LO) allows an application to act as a user. This sounds scary, but it actually allows for much more granular access control. Rather than a system user acting as someone that can modify all courses, the application is now acting as Professor X, and as such, only has access to his or her courses. As of Blackboard Learn 3200.7 (SaaS deployed release), third-party REST applications now have the ability to implement 3LO to authorize a user against the APIs and act as that user. In the spirit of sharing pretty pictures, here is a nice diagram displaying the workflow: So let’s talk a bit about what is happening here. Let’s pretend that we have built a mobile app that allows a student to get his or her grades. Today, we will be Marlee. Marlee picks up her iPhone and opens the GetMyGrades app. The first time Marlee opens the app, the app will send a GET request to /learn/api/public/v1/oauth2/authorizationcode with the Content-Type set to form/urlencoded and the following data as query parameters: Parameter Definition Example redirect_uri Where to redirect the user once they have authorized the application redirect_uri=https://my.edu/authorized response_type Must be set to code. Tells the endpoint to return an authorization code response_type=code client_id The application’s OAuth key, from the key/secret pair as registered in the developer portal.NOTE: This is NOT the Application ID!! client_id=8DBBA050-B830-414F-B7F1-0B448A6320C9 scope The application’s permissions: read, write, delete, and/or offline.Offline is required to use Refresh TokensCAUTION: If you do not set the scope appropriately you will still be able to get an access_token, but when using the access_token you will not be able to GET, POST, or UPDATE as expected. Instead you will get error responses. scope=read state Opaque value used to prevent Cross Site Request Forgery state=DC1067EE-63B9-40FE-A0AD-B9AC069BF4B0 So in this example, my request would look like: GET /learn/api/public/v1/oauth2/authorizationcode?redirect_uri = https://my.edu/authorized&amp;response_type=code&amp;client_id=8DBBA050-B830-414F-B7F1-0B448A6320C9&amp;scope=read&amp; state=DC1067EE-63B9-40FE-A0AD-B9AC069BF4B0 The result of this action is that Marlee is presented with her school’s Blackboard Learn login screen. She logs in and is presented with the following screen, asking her to authorize the application. Once Marlee clicks ‘Allow’, the URL sent as the redirect uri is called with the authorization code as a query parameter, for example: https://my.edu/authorized?code=1234567890 Now the application is able to talk server-to-server as Marlee. The next step is to get an access token from Learn based on the authorization code Marlee granted. From here the workflow is very similar to the Basic Authentication method. The token is requested as a POST request from /learn/api/public/v1/oauth2/token. This is also a form/urlencoded. The body of the request contains the text grant_type=authorization_code, and the URL is parameterized with the code code=1234567890 and the redirect_uri redirect_uri=https://my.edu/app. So the request looks like: POST /learn/api/public/v1/oauth2/token?code=1234567890&amp;redirect_uri=https://my.edu/app The endpoint responds with the standard token (access_token, expires_in, and token_type), but also has a couple of new fields. If offline mode is granted, a refresh_token is returned. This allows the application to get a new token on behalf of the user, even if that user isn’t explicitly asking for it. In addition, the scope requested in the initial request is returned, as well as the UUID for the user in the user_id field. From this point forward, the access_token is used just as it is when using Basic Authentication, but instead of acting as the system user, it is acting as Marlee. Refresh Tokens As mentioned above, one of the available scopes that an application can request is offline. Essentially, the offline scope allows an application to access Blackboard Learn as a user without requiring the user to login each time. This might be especially useful in a mobile application to prevent the unnecessary redirects each time an application is loaded. The way this works is through the use of refresh tokens. The first time a user accesses the application and the normal 3LO process takes place. The user is redirected to Blackboard, they login and authorize, and then the application is off an running. The difference is that a refresh token is returned in addition to the Bearer token. From this point forward, the third party application can automatically request a new bearer token by sending the request with the refresh token without involving the user at all. The HTTP message might look like this: POST /learn/api/public/v1/oauth2/token?refresh_token=8DBBA050-B830-414F-B7F1-0B448A6320C9&amp;redirect_uri=https://my.edu/app From this point forward, the access_token is used just as it is when using Basic Authentication, but instead of acting as the system user, it is acting as Marlee. Use Proof Key for Code Exchange (PKCE) with 3-Legged OAuth 2.0 Starting in version 3700.4, Blackboard Learn’s 3-Legged OAuth 2.0 implementation supports the Proof Key for Code Exchange (PKCE) extension. For more information about PKCE, see OAuth 2.0’s RFC 7636: Proof Key for Code Exchange. To implement the PKCE extension: Create a random string 43-128 characters long, containing only the characters A-Z, a-z, 0-9, or the following - . _ ~ (hyphen, period, underscore, and tilde). This sting will later be used as your code_verifier. Use the S256 hashing method to create a hash of your random string. This hash is your code_challenge. The formula for an S256 hash is based on the SHA-256, but is not exactly the same. code_challenge = BASE64URL_ENCODE( SHA256( ASCII( code_verifier ))) For more information about the S256 hashing algorithm, see RFC 7636 - Proof Key for Code Exchange by OAuth Public Clients. Make a request to /learn/api/public/v1/oauth2/authorizationcode, and provide a code_challenge and code_challenge_method in the query parameters. For code_challenge_method, the endpoint accepts only S256. Your request will look something like: POST learn/api/public/v1/oauth2/authorizationcode?client_id=YOUR_CLIENT_ID&amp;response_type=code&amp;redirect_url=YOUR_URL&amp;code_challenge=YOUR_CODE_CHALLENGE&amp;code_challenge_method=S256 Make a request for an access token, as normal. When you do, include your code_verifier as a query parameter. Your request will look like: POST learn/api/public/v1/oauth2/token?grant_type=authorization_code&amp;code=CODE_FROM_AUTH_CALL&amp;code_verifier=YOUR_CODE_VERIFIER The Learn server will verify that the code_challenge and code_challenge_method sent in the first request form a valid hash of code_verifier. This allows to the server to verify that the client asking for the access token is the same client that sent the authorization code request. When you receive an access token, you can use it as you normally would to make API calls. Examples Three-legged OAuth in Curl BBDN-3LO-REST-Swift",
    "tags": "Learn REST",
    "url": "/learn/rest/getting-started/3lo.html"
  },{
    "title": "404 - Not Found",
    "text": "The requested page could not be found. 404 - Not Found Sorry but the page you requested either no longer exists or never did If you are using a previously bookmarked page, I am sorry to inform you that it will no longer work BUT! the good news is that you can navigate on the site in a more intuitive way! So you should be able to find the content fast",
    "tags": "Error",
    "url": "/404.html"
  },{
    "title": "Blackboard App Catalog - FAQ",
    "text": "Blackboard App Catalog - FAQ 1. What is the Blackboard App Catalog? Partner integrations continue to play a critical and vital role within the Blackboard Learn ecosystem, and we’ve always strived to maintain a current and detailed inventory of our partners and their available integrations. The new App Catalog directly enables our partner community to manage their own App listings—ultimately providing our clients with a current, comprehensive, and detailed list of available integrations across all flavors of Blackboard Learn. As our partner community continues to expand, and our clients navigate their transitions from the Original to Ultra experience of Blackboard Learn, partner integrations are more important than ever before. Our partners and clients deserved a scalable, dynamic, and comprehensive resource for partner integrations – and we’ve delivered. 2. How does the Blackboard App Catalog Work? All Partners in the Blackboard Partnerships Program are listed on the App Catalog Partners page and are able to submit detailed information for each of their “Apps” (integrations) to the App Catalog. Submitted Apps are reviewed by the Blackboard App Catalog team and appear in the App Catalog upon approval. The App Catalog enables anyone to browse, search, or filter the Apps by integration type (LTI + REST, Building Block, Partner Cloud) or Category (Accessibility, Admin/Support Tool, Assessment, Classroom Tool, Consulting/Dev Services, Content, Data Insights, Multimedia, Safety/Security, SIS/System Integrator). The new Blackboard App Catalog uses OpenChannel - an experienced provider of LMS integration marketplace solutions in the educational space. 3. What does “ULTRA READY” mean? Any integration listed as “Ultra Ready” is labeled as such to indicate it was built leveraging only Blackboard integration frameworks specifically supported in Ultra (i.e. Partner Cloud, LTI 1.1+ and/or Learn REST APIs). The term “Ultra Ready” is not equivalent to a Blackboard certification status for the Ultra experience.†† 4. What’s the difference between the 3 App types (LTI + REST, Building Blocks, &amp; Partner Cloud)? LTI + REST: LTI + REST apps are those integrations that rely on and utilize LTI Tool Placements and/or Blackboard Learn REST APIs. LTI + REST apps are compatible across all flavors and delivery methods of Blackboard Learn (Original and Ultra experiences) and have no association with legacy Blackboard Building Blocks. Building Block: While only fully functional in the Original Experience of Blackboard Learn, for any Building Blocks that are installed on a Blackboard Learn environment with the Ultra Experience enabled, the functionality of the integration will only be available in courses using the Original course view. Building Block functionality is not compatible with the Ultra experience of Learn including anywhere within the Ultra base navigation (outside of the course context) or within Ultra view courses. Partner Cloud: Natively available in all flavors and delivery methods of Blackboard Learn (Original and Ultra experiences), Partner Cloud Apps and have no association with a legacy Blackboard Building Block. The Blackboard Partner Cloud streamlines our inventory of content integrations into a single registration and activation process, eliminates Building Block version control issues, and accelerates the delivery of new partner features and product updates. Via the course-embedded Content Market tool, instructors and course builders can access ready-made material from textbook publishers to enhance their curriculum and provide students with supplementary materials that aid in learning. At the same time, sensitive student data remains private and secure. 5. How can I tell which integrations work for Original vs. Ultra? It can be a bit tricky, but this Ultra Compatibility Matrix provides a bit of clarity: 6. Why can’t I find the App(s) I’m looking for? The majority of LTI+REST integrations and Building Blocks are developed, maintained, and supported by our developer community of partners and clients. It is up to the integration owner to submit their apps the the Blackboard App Catalog. If you know of an App that you’d like to see in the App Catalog, please fill out the Suggest an Integration form and we will work with the partner/vendor to get the App listed. 7. Will more Apps be added to the App Catalog? Most definitely! The new Blackboard App Catalog confirms our continued investment in the expansion of our partner integration ecosystem, commitment to client transparency, and ongoing support of our transition to Blackboard Learn Ultra. With an updated FAQ page coming soon and new Partners and Apps being added weekly, the Blackboard App Catalog is a valuable resource that will only improve as it grows. 8. How can I list my App(s) in the App Catalog? Any Blackboard Partner can submit Apps to the Blackboard App Catalog - join the Blackboard Partnerships Program to get started! 9. What if I have additional questions? Reach out to the Blackboard App Catalog Team (appcatalog@blackboard.com) - - - - - ††The 3rd party Ultra Ready integrations available through the Blackboard App Catalog allow you to use the named 3rd party service with the Ultra experience in Blackboard Learn. By enabling any 3rd party integrations you agree that any use of the a 3rd party service is governed solely by the terms of use by the named 3rd party (and you shall comply with all such terms of use). Any contract entered into, services provided, or any transaction completed via the named 3rd party is between you and that party, and not Blackboard. Blackboard makes no representation with respect to the named 3rd parties and shall have no liability or obligation whatsoever in relation to the content provided to or available at, use of, or correspondence with, the named 3rd party or any transactions completed and any contract entered into by you with any named 3rd party. Further, by authorizing a 3rd party integration, you authorize Blackboard to provide limited personal information required for the named 3rd party (“Integration Information”). You agree that Blackboard is not responsible for the data privacy and security practices of named 3rd party and Blackboard is not liable for any unauthorized access to the Integration Information. You accept that you are solely responsible for meeting any applicable requirements and the consequences of authorizing named 3rd party to access the Integration Information.",
    "tags": "App Catalog",
    "url": "/learn/App%20Catalog/Blackboard%20App%20Catalog%20FAQ.html"
  },{
    "title": "About the API Documentation",
    "text": "How to use the Ally as a Service API Document to Test API The API documentation for Ally as a Service allows a developer to test the API real-time inline on the page. It is a quick and easy way to not only get high-level information about the API itself, but also see how it works. You can upload a file, check the status of processing, and retrieve the report when finished. Doing so and then testing your application with the same file is a quick, easy, and powerful way to validate your work. To do this, you will need your client ID and your secret. See the Getting Started Guide for information on how to request your credentials. At the top of the page you will see two text boxes, one for each of these values. Simply plug them in and you are all ready to. At the bottom of the documentation for the Upload a File to Ally endpoint, there is a Try it now section, where you can select a file and click submit to upload that file to be processed. Upon upload, you will see the results appear on the screen, which will include the content hash value. This content hash value is unique to a specific piece of content, and specifically, the piece of content you just uploaded. In your application, you will use this for all subsequent calls. In the API documentation, it will automatically capture that value and paste it into the subsequest endpoints. The next section is the Check the processing status of a file endpoint. In the Try it now section, you will see a field for the Content hash already filled in and a Submit button. Click submit to see the result of this call. Finally, at the bottom of the documentation for the Retrieve the feedback for a file, the Try it now section has a similar Content hash text box prefilled with the content hash value, and a Feedback radio button. Setting to true will retrieve the full report, while setting it to false or N/A, which indicates that you are not specifying the argument, will retrieve just the metadata. For a walkthrough, check out this video:",
    "tags": "Ally",
    "url": "/ally/about-api-documentation.html"
  },{
    "title": "About Web Services Sample Code",
    "text": "About Web Services Sample Code Blackboard Learn provides access to sample code to help Developers build against the Blackboard Web Services. This sample code is accessible directly from the Blackboard Learn User Interface. The download comes in the form of a zip archive and contains a number of build-able projects. These projects can be re-used in conjunction with the license contained in the root directory of the zip archive. How To Get It Any user with access to the Web Services section of the System Administrator panel can download the Web Services Sample Code and Javadoc-based Web Services API documentation. Sample Code Contents Name Description client This directory contains the necessary files to build the wsc.client.jar. This library is required to build the projects in the javaclient and proxy directories included in this package. It can also be used in conjunction with the included license in custom applications. dotnetclient This directory contains the necessary files to build the .NET client library. This library is required to build the project located in the qa/dotnet directory included in this package. It can also be used in conjunction with the included license in custom applications. javaclient The javaclient directory contains the code necessary to build a java-based Web Services client. LICENSE_for_samples.txt This file explains the re-use and licensing policy associate with the sample code proxy The code in this directory can be used to build a java-based proxy Server qa The qa directory contains the code necessary to build a fully-functioning .NET based desktop application. From this program, you can test every API available through the core Web Services. readme.txt The readme.txt outlines the contents of each directory and the path to the readme.txt file for each. sample_webservice The Blackboard Web Services contain a number of the most popular integration points available in the Building Block framework, but not all. As a result, Blackboard Learn allows for the inclusion of custom web services to be created and added into the existing Web Services framework. A sample “hello world” web service is included in this package. b2client A sample Building Block that utilizes the web services directly in the Java Virtual Machine, bypassing the SOAP Layer.",
    "tags": "Learn Soap",
    "url": "/learn/soap/getting-started/about-web-services-sample-code.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/ally.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/category/announcement.html"
  },{
    "title": "B2 API Documentation",
    "text": "B2 API Documentation As of 3700.9.0, we will be uploading these files as part of the build process with each release of Blackboard Learn SaaS to test, to facilitate better readiness for SaaS releases to go to production. In order to accomplish this, we are automating this process and pushing to the public maven repository: Javadocs Jdiff Taglibs OpenDb Simply navigate to the link and select your version. You can view these documentation packages directly in HTML using the following links. You can also download the packages and access earlier versions of these documents through Behind the Blackboard on the Download Files page for each release. If an API is not shown in the publicly available documentation, it is not a public API. Blackboard does not support its use and we do not guarantee any kind of ongoing maintenance or compatibility. Use unsupported APIs at your own risk. API Documentation Blackboard provides the Building Blocks API and Web Services Specifications for Blackboard Learn 9.1 in an HTML package in Javadoc format. Blackboard also provides a “diff file” to detail the changes to the Building Blocks API and Web Services Specifications since the previous release of Blackboard Learn. This navigable list of added, removed, and changed public APIs is an HTML package in Javadoc format. Tag Libraries The familiar look and feel of the Learn user interface is provided to developers through the Blackboard Tag Library. These are the same tag libraries used in the Learn application and are available for your use. Java Server Pages constructed using elements from the tag library render the user interface in a manner familiar for users of the Learn application. Using the tag libraries in your Building Block creates a ‘seamless’ ui experience for your Building Block users. OpenDB The Open Database Schema provides information about the Blackboard Learn database structure, including layout and table inter-dependencies. This information is intended for intermediate to expert database administrators, as an aid to troubleshooting, capacity planning and analytics. The schemas include a description of the data characteristics of the tables and columns in the Blackboard Learn database, which includes datatypes and sizes, nullability, index, sequence, key and constraint information. Additional commentary is also provided for key tables and columns. The Open Database Schema does not include a complete description of every database object inBlackboard Learn. The following information is not included: Detailed commentary for some tables and columns. No table or column information for the Xythos engine file storage schema. No information about stored procedures, views, triggers, or database jobs. Note: These documents are available in English only. 9.1 Release API Documentation API Differences Tag Libraries OpenDB OpenDB Differences Q2 2019 View API View API Changes View Taglibs View Schema View Schema Changes Q4 2018 View API View API Changes View Taglibs View Schema View Schema Changes Q2 2018 View API View API Changes View Taglibs View Schema View Schema Changes Q4 2017 View API View API Changes View Taglibs View Schema View Schema Changes Q2 2017 View API View API Changes View Taglibs View Schema View Schema Changes Q4 2016 View API View API Changes View Taglibs View Schema View Schema Changes Q2 2016 View API View API Changes View Taglibs View Schema View Schema Changes Q4 2015 View API View API Changes View Taglibs View Schema View Schema Changes",
    "tags": "Learn b2",
    "url": "/learn/b2/getting-started/api-documentation.html"
  },{
    "title": "API Objects",
    "text": "API Objects The Blackboard Collaborate API is built to allow a third-party application to perform scheduler operations. To handle this, the API exposes several objects that may or may not be familiar to you. In order to set the stage, here is a glossary of the API Objects in play. Session Sessions are the life-blood of Collaborate’s API. A session is equivalent to a meeting room. If you login to the scheduler and create a room, you are creating a session. For more information about the settings available for Sessions, see the Collaborate Session Definitions document. Instance An instance is an individual meeting in a session. An instance is created when the first person logs into the Collaborate session, and is terminated when the last person leaves the session. Enrollment An enrollment is a User that has been invited to a session. Enrolling a user allows you to provide an individual URL to an individual user, such that when they enter the room, Collaborate knows who the user is. User As you would expect, this object corresponds to a session attendee. Context Context is a container for grouping sessions. Typically in an LMS integration, the Context would correspond to a course or section, and all the sessions in that course would belong to that context. Context is not required, and it can be used for any logical grouping. It doesn’t have to be a course. Recording A stored recording of a session instance.",
    "tags": "Collaborate",
    "url": "/collaborate/api-objects.html"
  },{
    "title": "B2s and Java Permissions",
    "text": "B2s and Java Permissions Building Blocks are capable of fulfilling predominantly, but not exclusively two scenarios: Plugging-in additional or enhanced functionality to the core Blackboard product Bridging the Blackboard product to an external system A Building Block is simply a java based web application that runs on your Blackboard application server. Packaged in the web application is an xml configuration file called the bb-manifest that defines the security restrictions on that particular Building Block as well as where the Building Block hooks into the core product. For Building Blocks that have user interfaces, tag libraries can be used to give the interface Blackboard’s distinct look and feel. Building Blocks are used to access, add, remove, and manipulate data within the Learning System. Examples of data types include users, courses, grades, calendar entries, and content items. These objects map to the entities that a user would see represented in the user interface. Accessing and manipulating data involves using a series of loaders and persisters that provide the logic and functionality required to save data into and read data from the Blackboard Learning System. Functional Overview Announcement Announcements are representations of an announcement within the Blackboard application. These can be either system-wide or course-specific in nature. Blackboard provides the ability to create, update, and remove announcements. Authentication The authentication API allows developers to implement a customized authentication scheme other than those that ship with the product. An example would be creating a way to authenticate against a custom central authentication database or other non-LDAP-based authentication service. Calendar Calendar entries represent a calendar entry within the Blackboard application. These can be system-wide, course-specific, or user-specific in nature. Blackboard provides the ability to create, update, and remove calendar entries. Content Content refers to files that exist in the various content areas within a given course site such as presentations or documents. The APIs give you the ability to add and remove content, create links to content, create sequentially- ordered lessons, and access data related to user interaction with a given piece of content. Content System (When licensed) The Blackboard Content System allows users to upload and share content within the context of a content management system. The Content System APIs allow content to be created, bookmarked, tagged with metadata, incorporated into a portfolio, and acted on as part of a workflow. Context The Context allows a developer to access information regarding a given user or course based on that user’s current interactions with the Learning System. Courses Courses can be created, updated, deleted, and copied in the same ways that are possible with the Snapshot enterprise data integration tool. Course Categories Course categories allow courses to be categorized according to a given taxonomy. Blackboard provides ways to create, update, and remove course categories. Discussion Board Discussion board conferences, forums, threads, and posts can be accessed. You can also determine the status of a given posting and generate statistics on discussion board usage. Enrollments Course enrollments can be created, updated, and removed in the same ways that are possible with the Snapshot enterprise data integration tool. File System Various directories can be accessed directly giving access to logs, course content, temp directories, and other areas. Gradebook Individual gradebook items and scores can be created, updated, and removed. Logging Allows access to the core Blackboard logging system including the ability to define new logs. Navigation / Course Table of Contents Allows the loading of the course table of contents. Plugins Utility class for interacting with Building Blocks on a Blackboard server giving access to information such as which Building Blocks are installed, versions of which Blackboard products are installed, and other Building Block configuration information. Portal data Allows user-specific module data to be created and updated. Roles Allows individual users to be associated with various institution/portal roles in the same ways that are possible with the Snapshot enterprise data integration tool. System configuration Allows access to server configuration data such as application server name, authentication type enabled, installation directory, database name, and SMTP configuration. Users Allows creation, update, and removal of users in the same ways that are possible with the Snapshot enterprise data integration tool. Utility classes Various classes to support functions such as byte-&gt;kilobyte conversion and localized number representation.",
    "tags": "Learn b2",
    "url": "/learn/b2/getting-started/api-overview.html"
  },{
    "title": "Collaborate API",
    "text": "Collaborate API If you want to see the API on its source please click here",
    "tags": "Collaborate",
    "url": "/collaborate/api.html"
  },{
    "title": "Ally API",
    "text": "Ally API If you want to see the API on its source please click here",
    "tags": "Ally",
    "url": "/ally/api.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/api.html"
  },{
    "title": "Learn API",
    "text": "Learn API If you want to see the API on its source please click here",
    "tags": "Learn REST",
    "url": "/learn/rest/getting-started/api.html"
  },{
    "title": "Assessment Events",
    "text": "Assessment Events Blackboard Learn’s Caliper Analytics stream has two event types dedicated to assessments: AssessmentEvent AssessmentItemEvent These events work hand-in-hand. An AssessmentEvent is fired whenever a student starts or submits a test, and the AssessmentItemEvent is fired whenever a student starts or submits a question on an assessment. Here is some of the key data that is associated with these events: AssessmentEvent group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.@id - …/assessments/id - the primary key for the assessment ID action - Started, Completed AssessmentItemEvent group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.@id - …/questions/id - the primary key for the question ID object.ispartOf.@id …/assessments/id - the primary key for the assessment this questions is a part of action - Started, Submitted Sample Payloads AssessmentEvent AssessmentItemEvent 1. AssessmentEvent { \"sensor\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"sendTime\": \"2021-01-05T14:49:40.609Z\", \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"data\": [ { \"@context\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"type\": \"AssessmentEvent\", \"id\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a361d45a65564777b98460834687183f\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"action\": \"Started\", \"object\": { \"dateToSubmit\": \"2021-01-12T06:59:00.000Z\", \"maxAttempts\": 0, \"maxSubmits\": 0, \"maxScore\": 150, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1\", \"type\": \"Assessment\", \"name\": \"My Test\", \"extensions\": { \"bb:assessment.categoryId\": \"_12345_1\", \"bb:assessment.categoryName\": \"Assignment\", \"bb:contentId\": \"_12345_1\", \"bb:assessment.gradeableItemId\": \"_12345_1\", \"bb:assessment.catUserDefined\": \"false\" }, \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"items\": [] }, \"generated\": { \"startedAtTime\": \"2021-01-05T14:49:36.451Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1/attempts/_12345_1\", \"type\": \"Attempt\", \"assignable\": { \"dateToSubmit\": \"2021-01-12T06:59:00.000Z\", \"maxAttempts\": 0, \"maxSubmits\": 0, \"maxScore\": 150, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1\", \"type\": \"Assessment\", \"name\": \"My Test\", \"extensions\": { \"bb:assessment.categoryId\": \"_12345_1\", \"bb:assessment.categoryName\": \"Assignment\", \"bb:contentId\": \"_12345_1\", \"bb:assessment.gradeableItemId\": \"_12345_1\", \"bb:assessment.catUserDefined\": \"false\" }, \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"items\": [] }, \"assignee\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a361d45a65564777b98460834687183f\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"count\": 1 }, \"eventTime\": \"2021-01-05T14:49:36.451Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"group\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/34f0705416864ca09a34f22f73446686\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/34f0705416864ca09a34f22f73446686/members/a361d45a65564777b98460834687183f\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_12345_1\", \"bb:course.externalId\": \"BIO-101\", \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a361d45a65564777b98460834687183f\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/34f0705416864ca09a34f22f73446686\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"roles\": [ \"Learner\" ], \"status\": \"Active\" }, \"federatedSession\": { \"startedAtTime\": \"2021-01-05T14:49:36.451Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/94DD6EFB1B20EBD3B62889A38C7BF590\", \"type\": \"LtiSession\", \"name\": \"94DD6EFB1B20EBD3B62889A38C7BF590\", \"dateCreated\": \"2021-01-05T14:49:36.451Z\", \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a361d45a65564777b98460834687183f\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } } }, \"extensions\": {} } ] } AssessmentItemEvent { \"sensor\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"sendTime\": \"2021-01-05T14:50:26.769Z\", \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"data\": [ { \"@context\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"type\": \"AssessmentItemEvent\", \"id\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"action\": \"Started\", \"object\": { \"maxAttempts\": 0, \"maxSubmits\": 0, \"maxScore\": 0, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1/questions/_12345_1\", \"type\": \"AssessmentItem\", \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"isPartOf\": { \"dateToSubmit\": \"2020-12-23T07:59:00.000Z\", \"maxAttempts\": 1, \"maxSubmits\": 0, \"maxScore\": 300, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7cc/assessments/_12345_1\", \"type\": \"Assessment\", \"name\": \"My Test\", \"extensions\": { \"bb:assessment.categoryId\": \"_12345_1\", \"bb:assessment.categoryName\": \"Test\", \"bb:assessment.catUserDefined\": \"false\", \"bb:assessment.gradeableItemId\": \"_12345_1\" }, \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"items\": [] } }, \"generated\": { \"startedAtTime\": \"2021-01-04T19:13:19.774Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1/questions/_12345_1/attempts/_12345_1\", \"type\": \"Attempt\", \"assignable\": { \"maxAttempts\": 0, \"maxSubmits\": 0, \"maxScore\": 0, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1/questions/_12345_1\", \"type\": \"AssessmentItem\", \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"isPartOf\": { \"dateToSubmit\": \"2020-12-23T07:59:00.000Z\", \"maxAttempts\": 1, \"maxSubmits\": 0, \"maxScore\": 300, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1\", \"type\": \"Assessment\", \"name\": \"My Test\", \"extensions\": { \"bb:assessment.categoryId\": \"_12345_1\", \"bb:assessment.categoryName\": \"Test\", \"bb:assessment.catUserDefined\": \"false\", \"bb:assessment.gradeableItemId\": \"_12345_1\" }, \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"items\": [] } }, \"assignee\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"count\": 1 }, \"eventTime\": \"2021-01-04T19:13:19.774Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"group\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/35983609b6084ef88407f98a2263e574\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/35983609b6084ef88407f98a2263e574/members/1a26d8c5b4d44f1db491db1f24407715\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_12345_1\", \"bb:course.externalId\": \"BIO-101\", \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/35983609b6084ef88407f98a2263e574\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"roles\": [ \"Learner\" ], \"status\": \"Active\" }, \"federatedSession\": { \"startedAtTime\": \"2021-01-04T19:13:19.774Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/DCC5DE08316F7BB7F5355929DD49AE28\", \"type\": \"LtiSession\", \"name\": \"DCC5DE08316F7BB7F5355929DD49AE28\", \"dateCreated\": \"2021-01-04T19:13:19.774Z\", \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } } }, \"extensions\": {} }, { \"@context\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"type\": \"AssessmentItemEvent\", \"id\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"action\": \"Completed\", \"object\": { \"maxAttempts\": 0, \"maxSubmits\": 0, \"maxScore\": 0, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_9058464_1/questions/_9058487_1\", \"type\": \"AssessmentItem\", \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"isPartOf\": { \"dateToSubmit\": \"2020-12-23T07:59:00.000Z\", \"maxAttempts\": 1, \"maxSubmits\": 0, \"maxScore\": 300, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_9058464_1\", \"type\": \"Assessment\", \"name\": \"My Test\", \"extensions\": { \"bb:assessment.categoryId\": \"_12345_1\", \"bb:assessment.categoryName\": \"Test\", \"bb:assessment.catUserDefined\": \"false\", \"bb:assessment.gradeableItemId\": \"_12345_1\" }, \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"items\": [] } }, \"generated\": { \"startedAtTime\": \"2021-01-04T19:13:19.774Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1/questions/_12345_1/attempts/_12345_1/response\", \"type\": \"MultipleResponseResponse\", \"extensions\": { \"bb:questionType\": \"MultipleAnswer\" }, \"attempt\": { \"startedAtTime\": \"2021-01-04T19:13:19.774Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1/questions/_12345_1/attempts/_12345_1\", \"type\": \"Attempt\", \"assignable\": { \"maxAttempts\": 0, \"maxSubmits\": 0, \"maxScore\": 0, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1/questions/_12345_1\", \"type\": \"AssessmentItem\", \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"isPartOf\": { \"dateToSubmit\": \"2020-12-23T07:59:00.000Z\", \"maxAttempts\": 1, \"maxSubmits\": 0, \"maxScore\": 300, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1\", \"type\": \"Assessment\", \"name\": \"My Test\", \"extensions\": { \"bb:assessment.categoryId\": \"_12345_1\", \"bb:assessment.categoryName\": \"Test\", \"bb:assessment.catUserDefined\": \"false\", \"bb:assessment.gradeableItemId\": \"_12345_1\" }, \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"items\": [] } }, \"assignee\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"count\": 1 }, \"values\": [] }, \"eventTime\": \"2021-01-04T19:13:19.774Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"group\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/35983609b6084ef88407f98a2263e574\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/35983609b6084ef88407f98a2263e574/members/1a26d8c5b4d44f1db491db1f24407715\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_12345_1\", \"bb:course.externalId\": \"BIO-101\", \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/35983609b6084ef88407f98a2263e574\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"roles\": [ \"Learner\" ], \"status\": \"Active\" }, \"federatedSession\": { \"startedAtTime\": \"2021-01-04T19:13:19.774Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/DCC5DE08316F7BB7F5355929DD49AE28\", \"type\": \"LtiSession\", \"name\": \"DCC5DE08316F7BB7F5355929DD49AE28\", \"dateCreated\": \"2021-01-04T19:13:19.774Z\", \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } } }, \"extensions\": {} } ] }",
    "tags": "Standards",
    "url": "/standards/caliper/events/assessment-events.html"
  },{
    "title": "Assignable Events",
    "text": "Assignable Events Blackboard Learn’s Caliper Analytics stream emits an AssignableEvent in four cases: A student starts an assignment A student submits an assignment A student starts a group assignment A student submits a group assignment Here is some of the key data that is associated with these events: AssignableEvent - Assignment group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.@id - …/gradableItems/id - the primary key for the content ID action - Started, Submitted, Completed AssignableEvent - Group Assignment group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.@id - …/gradableItems/id - the primary key for the content ID extensions.bb:group.users - an array of users in the group. The batchUId field will contain the batch_uid for the user action - Started, Submitted, Completed For a completed group assignment, the course information is located one level lower in group.subOrganizationOf Sample Payload { \"sensor\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"sendTime\": \"2021-01-05T14:51:22.739Z\", \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"data\": [ { \"@context\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"type\": \"AssignableEvent\", \"id\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/47fe55cef30441458b7625885e8aee83\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"action\": \"Completed\", \"object\": { \"dateToSubmit\": \"2021-01-12T06:59:00.000Z\", \"maxAttempts\": 0, \"maxSubmits\": 0, \"maxScore\": 60, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1\", \"type\": \"AssignableDigitalResource\", \"name\": \"My Assignable Item\", \"creators\": [], \"learningObjectives\": [], \"keywords\": [] }, \"generated\": { \"startedAtTime\": \"2021-01-05T14:51:14.512Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1/attempts/_12345_1\", \"type\": \"Attempt\", \"assignable\": { \"dateToSubmit\": \"2021-01-12T06:59:00.000Z\", \"maxAttempts\": 0, \"maxSubmits\": 0, \"maxScore\": 60, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1\", \"type\": \"AssignableDigitalResource\", \"name\": \"My Assignable Item\", \"creators\": [], \"learningObjectives\": [], \"keywords\": [] }, \"assignee\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/47fe55cef30441458b7625885e8aee83\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"count\": 1 }, \"eventTime\": \"2021-01-05T14:51:14.512Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"group\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/22fb6a3e811f4bad8a418dcb2caa0a85\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/22fb6a3e811f4bad8a418dcb2caa0a85/members/47fe55cef30441458b7625885e8aee83\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_12345_1\", \"bb:course.externalId\": \"BIO-101\", \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/47fe55cef30441458b7625885e8aee83\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/22fb6a3e811f4bad8a418dcb2caa0a85\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"roles\": [ \"Learner\" ], \"status\": \"Active\" }, \"federatedSession\": { \"startedAtTime\": \"2021-01-05T14:51:14.512Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/\", \"type\": \"LtiSession\", \"name\": \"\", \"dateCreated\": \"2021-01-05T14:51:14.512Z\", \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/47fe55cef30441458b7625885e8aee83\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } } }, \"extensions\": {} } ] }",
    "tags": "Standards",
    "url": "/standards/caliper/events/assignable-events.html"
  },{
    "title": "Authorize and Authenticate in Ally",
    "text": "Authorize and Authenticate in Ally as a Service Blackboard Ally as a Service relies on JSON web tokens (JWT) to authenticate and authorize incoming REST API calls. You can read more about the JWT standard here. The JSON web token must be signed with HMAC. HMAC allows the JWT to be signed with a shared secret. The data can be trusted because it is digitally signed with mutually known credentials. Note: To request these credentials, you will need to work with your Account Executive, who can request them on your behalf. JWT Assertion To get API access to the Ally service, you must create a JWT assertion. A JWT assertion is a JSON web token request for access. It includes: header payload signature The header and payload are each base64 encoded and the three parts are separated with a dot, resulting in a token in this format: encodedheader.encodedpayload.signature and resembles the following: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJjbGllbnRJZCI6ImFsbHktY2xpZW50LWlkIiwiaWF0IjoxNjAwMTc0MTM3fQ. jh0tox209FPdI2TPMgIt6v2lQZLu9OGOnRs7KxJ6mLY JWT Header The header is a JSON object with that identifies the algorithm used to generate the signature and the type of token being created. In this example, the application is signing the data with HMAC-SHA 256 and requesting a JSON Web Token. {    \"alg\": \"HS256\",    \"typ\": \"JWT\" } To create the encodedheader part of the token, base64 encode this JSON. JWT Payload The payload contains information about the calling application that uniquely identifies the client to the REST server. The Ally as a Service REST APIs require these pieces of information: clientId - holds the numerical value of your provided and unique Ally client ID iat - when the token was issued (seconds since epoch) For example: {    \"clientId\": \"###\",    \"iat\": \"1480457763988\" } Base64 encode the payload and append it to the based64-encoded header, separated by a dot. JWT Signature The signature is basically the string created above encodedheader.encodedpayload, signed using the algorithm specified in the header and the REST API secret provided by Blackboard. The resulting string must be appended to encodedheader.encodedpayload, separated with a dot. Using the JWT Token A properly formed Ally as a Service API call will use this signed JWT as its bearer token. To authorize a request, simply add this token as a Bearer token in your request’s authorization header. The authorization header will look like the following: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJjbGllbnRJZCI6ImFsbHktY2xpZW50LWlkIiwiaWF0IjoxNjAwMTc0MTM3fQ. jh0tox209FPdI2TPMgIt6v2lQZLu9OGOnRs7KxJ6mLY Additional Resources JSON Web Tokens are a widely adopted standard in modern applications, and thus, there are a ton of resources available for developers interested in JWT beyond the scope of Ally. JWT.io: This site is dedicated to assisting developers trying to build JWT-enabled applications. There is a debugger that allows you to manually input your secret and your header and payload and generate an assertion. There is also an extensive list of available libraries in multiple languages that handle the bulk of the JWT creation. RFC 7519: This is the actual standard specification document.",
    "tags": "Ally",
    "url": "/ally/auth.html"
  },{
    "title": "Basic Authentication with REST",
    "text": "Basic Authentication with REST Overview Authentication for REST Integrations follows the OAuth 2.0 RFC Standard. Each developer has a unique key and secret associated with each application they create. The developer makes an HTTP Post directly to the REST-enabled Learn server requesting an OAuth access token. The Learn instance forwards the request to the Blackboard’s API gateway, adding its own siteId to the request so that the gateway can determine whether the application is registered with the server. The API gateway returns an authorization token that grants the application access to the Learn REST API for one hour. The developer uses this token in subsequent REST calls until the token expires. This workflow is illustrated in the following diagram: WARNING: Never share or expose an application’s key/secret pair. These are used for requesting OAuth tokens, which enable the holder to issue REST requests. Exposing an application key/secret pair or token is a serious security risk. If you think you have exposed a key/secret pair you may request a new pair for the application using the Developer Portal My Applications management page. REST calls are subject to quotas and limits. For more information, see Developer Groups, Site Quotas, and Rate Limits. Before You Start Your Blackboard Learn instance must be registered at developer.blackboard.com. The application ID you receive when registering at developer.blackboard.com must then be registered on your Blackboard Learn instance. Registering your application on a Learn instance provides the application key:secret pair access to the Learn instance. To Get a Token Using Basic OAuth 2.0 Use the following high-level steps to fetch a token from your Learn instance. Remember that your Learn instance must be registered at developer.blackboard.com and that your application must be registered on your Learn instance. Registering your application with your Learn instance provides you with an application key and secret. Use cURL or an appropriate HTTP library to make a POST REST call to the /learn/api/public/v1/oauth2/token endpoint. Headers must include: Content-Type set to application/x-www-form-urlencoded Authorization set to Basic followed by a space and with your base64-encoded credentials appended. Credentials must be formatted as application-key:secret before encoding. For example, if your application key were: `12345678-1234-5678-1234-1234567890ab and your secret were abcdefghijklmnopqrstuvwxyzabcdef you would encode the string: 12345678-1234-5678-1234-1234567890ab:abcdefghijklmnopqrstuvwxyzabcdef yielding the encoded value MTIzNDU2NzgtMTIzNC01Njc4LTEyMzQtMTIzNDU2Nzg5MGFiOmFiY2Rl.htmloaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVm Prepending Basic to that value gives Basic MTIzNDU2NzgtMTIzNC01Njc4LTEyMzQtMTIzNDU2Nzg5MGFiOmFiY2Rl.htmloaWprbG1ub3Bx cnN0dXZ3eHl6YWJjZGVm which would be your Authorization header value. Some REST libraries and clients like cURL handle this encoding for you. The body must include: grant_type=client_credentials. If everything is working correctly, the server will return an HTTP 200 response and a data body. The data body includes a field access_token. Your access token for further REST calls is the value of this field. To Make a REST Call with the Basic OAuth 2.0 Token Use the following high-level steps to use a Blackboard Learn REST API token to authorize other REST calls. Use cURL or an appropriate HTTP library to make a REST call to the appropriate endpoint. For a list of endpoints and the methods supported for each, see the Blackboard Learn REST reference docs at https://developer.blackboard.com/portal/displayApi/Learn. Headers must include: Content-Type and Accept should be set as specified by the reference docs for the call you want. Authorization set to Bearer followed by a space and your access token. For example, Bearer abcdefghijklmnopqrstuvwxyzabcdef The body and URL parameters must be set as specified by the reference docs for the call you want. If everything is working correctly, the server will return an HTTP 200 response and a response body as specified by the reference docs for the call you made. Example: Using cURL to Get a Token and Make a REST Call The easist way to test is using cURL. We will assume you have already registered through the Developer Portal and retrieved your application ID, key, and secret, as well as added your application ID to the Learn server you wish to integrate with: From the command line, use cURL to send a token request to Learn, signed with their application key and secret: key=&lt;your key&gt; secret=&lt;your secret&gt; curl -i -X POST -u \"$key:$secret\" https://&lt;your server&gt;/learn/api/public/v1/oauth2/token -d \"grant_type=client_credentials\" The cURL statement calls and HTTP POST request. This POST request contains an Authorization header that states this is Basic authentication. The cURL command uses the -u switch to create and send a Base64-encoded version of key:secret. cURL sets content-type to application/x-www-form-urlencoded for you. The developer portal returns a standard OAuth 2.0 response, which is passed back to the developer. For example: HTTP/1.1 200 OK Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache  {      \"access_token\": \"abcdefghijklmnopqrstuvwxyzabcdef\",      \"token_type\": \"bearer\",      \"expires_in\": 3600 } Use the returned access token to make further REST calls. For example: curl -X GET -H \"authorization: Bearer abcdefghijklmnopqrstuvwxyz\" https://yourserver/learn/api/public/v1/users?query=userName Implementation notes: Tokens expire after 1 hour, as per the OAuth RFC examples. Tokens are associated with a specific Learn site. Any application may have only one token per Learn site. Asking for a token returns the existing one with an updated expiry time if it has not expired yet. Check the REST API Documentation for error codes.",
    "tags": "Learn REST",
    "url": "/learn/rest/getting-started/basic-authentication.html"
  },{
    "title": "Bb App students launch schema",
    "text": "Blackboard App for Students Launch Schema You can link into the Blackboard app from other applications. With deep linking, a uniform resource identifier (URI) links to a specific location within the mobile app rather than simply launching the app. Use the provided schemas to link to specific features in the Blackboard app. Note: the app-to-app launch schema changed from the bbstudent:// prefix to the blackboard:// prefix in June, 2017. Please be sure your schema is updated. This functionality is not available for the Blackboard Instructor app. Activity Stream Endpoint: blackboard://activity Version: “Blackboard 3.0+” Course Base Endpoint: blackboard://courses Version: “Blackboard 3.0+” Organization Base Endpoint: blackboard://org Version: “Blackboard 3.2+” Grades Endpoint: blackboard://grades Version: “Blackboard 3.0+” Due Dates Endpoint: blackboard://calendar Version: “Blackboard 3.0+” Profile Endpoint: blackboard://profile Version: “Blackboard 3.0+” Settings Endpoint: blackboard://settings Version: “Blackboard 3.0+” Linked Accounts Endpoint: blackboard://settings/linkedAccounts Version: “Blackboard 3.0+” Feedback Endpoint: blackboard://feedback Version: “Blackboard 3.0+” Course Overview Endpoint: blackboard://course/[course_id]/overview Notes: [course_id] is the id of the course you would like to open Version: “Blackboard 3.0+” Organization Overview Endpoint: blackboard://org/[org_id]/overview Notes: [org_id] is the id of the organization you would like to open Version: “Blackboard 3.2+” Course/Content Endpoint: blackboard://course/[course_id]/content Notes: [course_id] is the id of the course you would like to open Version: “Blackboard 3.0+” Organization/Content Endpoint: blackboard://org/[org_id]/content Notes: [org_id] is the id of the organization you would like to open Version: “Blackboard 3.2+” Course/Announcements Endpoint: blackboard://course/[course_id]/announcement Notes: [course_id] is the id of the course you would like to open Version: “Blackboard 3.0+” Organization/Announcements Endpoint: blackboard://org/[org_id]/announcement Notes: [org_id] is the id of the organization you would like to open Version: “Blackboard 3.2+” Course/Calendar Endpoint: blackboard://course/[course_id]/calendar Notes: [course_id] is the id of the course you would like to open Version: “Blackboard 3.0+” Organization/Calendar Endpoint: blackboard://org/[org_id]/calendar Notes: [org_id] is the id of the organization you would like to open Version: “Blackboard 3.2+” Course/Grades Endpoint: blackboard://course/[course_id]/grades Notes: [course_id] is the id of the course you would like to open Version: “Blackboard 3.0+” Organization/Grades Endpoint: blackboard://org/[org_id]/grades Notes: [org_id] is the id of the organization you would like to open Version: “Blackboard 3.2+” Course/Discussion Panel Endpoint: blackboard://course/[course_id]/discussion Notes: [course_id] is the id of the course you would like to open Version: “Blackboard 3.0+” Organization/Discussion Panel Endpoint: blackboard://org/[org_id]/discussion Notes: [org_id] is the id of the organization you would like to open Version: “Blackboard 3.2+” Course/Assignment/Overview Endpoint: blackboard://course/[course_id]/assessment/assignment/[assignment_id]/overview Notes: [course_id] is the id of the course the assignment resides in [assignment_id] is the id of the assignment you would like to open Version: “Blackboard 3.0+” Organization/Assignment/Overview Endpoint: blackboard://org/[org_id]/assessment/assignment/[assignment_id]/overview Notes: [org_id] is the id of the organization you would like to open [assignment_id] is the id of the assignment you would like to open Version: “Blackboard 3.2+” Course/Assignment/Submissions Endpoint: blackboard://course/[course_id]/assessment/assignment/[assignment_id]/submissions Notes: [course_id] is the id of the course the assignment resides in [assignment_id] is the id of the assignment you would like to open Version: “Blackboard 3.0+” Organization/Assignment/Submissions Endpoint: blackboard://org/[org_id]/assessment/assignment/[assignment_id]/submissions Notes: [org_id] is the id of the organization you would like to open [assignment_id] is the id of the assignment you would like to open Version: “Blackboard 3.2+” Course/Test/Overview Endpoint: blackboard://course/[course_id]/assessment/test/[test_id]/overview Notes: [course_id] is the id of the course the test resides in [test_id] is the id of the test you would like to open Version: “Blackboard 3.0+” Organization/Test/Overview Endpoint: blackboard://org/[org_id]/assessment/test/[test_id]/overview Notes: [org_id] is the id of the course the test resides in [test_id] is the id of the test you would like to open Version: “Blackboard 3.2+” Course/Test/Submissions Endpoint: blackboard://course/[course_id]/assessment/test/[test_id]/submissions Notes: [course_id] is the id of the course the test resides in [test_id] is the id of the test you would like to open Version: “Blackboard 3.0+” Organization/Test/Submissions Endpoint: blackboard://org/[org_id]/assessment/test/[test_id]/submissions Notes: [org_id] is the id of the course the test resides in [test_id] is the id of the test you would like to open Version: “Blackboard 3.2+” Course/Content Item Endpoint: blackboard://course/[course_id]/item/[item_id] Notes: [course_id] is the id of the course the item is linked to [item_id] is the id of the item you would like to open Version: “Blackboard 3.0+” Organization/Content Item Endpoint: blackboard://org/[org_id]/item/[item_id] Notes: [org_id] is the id of the course the item is linked to [item_id] is the id of the item you would like to open Version: “Blackboard 3.2+” Course/Content File Endpoint: blackboard://course/[course_id]/file/[file_id] Notes: [course_id] is the id of the course the file is linked to [file_id] is the id of the file you would like to open Version: “Blackboard 3.0+” Organization/Content File Endpoint: blackboard://org/[org_id]/file/[file_id] Notes: [org_id] is the id of the course the file is linked to [file_id] is the id of the file you would like to open Version: “Blackboard 3.2+” Original Course/Discussion Group Endpoint: blackboard://course/[course_id]/discussion/discussionBoard/[discussion_board_id] Notes: [course_id] is the id of the course the discussion board is linked to [discussion_board_id] is the id of the discussion board you would like to open Version: “Blackboard 3.0+” Original Organization/Discussion Group Endpoint: blackboard://org/[org_id]/discussion/discussionBoard/[discussion_board_id] Notes: [org_id] is the id of the course the discussion board is linked to [discussion_board_id] is the id of the discussion board you would like to open Version: “Blackboard 3.2+” Original Course/Discussion Thread Endpoint: blackboard://course/[course_id]/discussion/discussionThread/[discussion_thread_id] Notes: [course_id] is the id of the course the discussion thread is linked to [discussion_thread_id] is the id of the discussion thread you would like to open Version: “Blackboard 3.0+” Original Organization/Discussion Thread Endpoint: blackboard://org/[org_id]/discussion/discussionThread/[discussion_thread_id] Notes: [org_id] is the id of the course the discussion thread is linked to [discussion_thread_id] is the id of the discussion thread you would like to open Version: “Blackboard 3.2+” Ultra Course/Discussion Thread Endpoint: blackboard://course/[course_id]/discussion/discussionThread/[discussion_thread_id]/discussionGroup/[discussion_group_id]/contentId/[content_id] Notes: [course_id] is the id of the course the discussion thread is linked to [discussion_thread_id] is the id of the discussion thread you would like to open [discussion_group_id] is the id of a virtual discussion group the discussion thread is linked to [content_id] is the content id of this discussion thread [discussion_group_id] and [content_id] are ultra course required only Version: “Blackboard 3.0+” Ultra Organization/Discussion Thread Endpoint: blackboard://org/[org_id]/discussion/discussionThread/[discussion_thread_id]/discussionGroup/[discussion_group_id]/contentId/[content_id] Notes: [org_id] is the id of the course the discussion thread is linked to [discussion_thread_id] is the id of the discussion thread you would like to open [discussion_group_id] is the id of a virtual discussion group the discussion thread is linked to [content_id] is the content id of this discussion thread [discussion_group_id] and [content_id] are ultra course required only Version: “Blackboard 3.2+” Ultra Course/Discussion Folder Endpoint: blackboard://course/[course_id]/discussion/discussionFolder/contentId/[content_id] Notes: [course_id] is the id of the course the discussion folder is linked to [content_id] is the content id of this discussion folder [content_id] are ultra course required only Version: “Blackboard 3.0+” Ultra Organization/Discussion Folder Endpoint: blackboard://org/[org_id]/discussion/discussionFolder/contentId/[content_id] Notes: [org_id] is the id of the course the discussion folder is linked to [content_id] is the content id of this discussion folder [content_id] are ultra course required only Version: “Blackboard 3.2+” Course/Content Folder Endpoint: blackboard://course/[course_id]/folder/[folder_id] Notes: [course_id] is the id of the course the content folder resides in [folder_id] is the folder id of the content folder Version: “Blackboard 3.0+” Organization/Content Folder Endpoint: blackboard://org/[org_id]/folder/[folder_id] Notes: [org_id] is the id of the course the content folder resides in [folder_id] is the folder id of the content folder Version: “Blackboard 3.2+”",
    "tags": "Mobile",
    "url": "/mobile/bbapp-students-launch-schema.html"
  },{
    "title": "BbML",
    "text": "Blackboard Markup Language BbML Overview BbML is a subset of HTML. The parameters of some methods accept BbML-formatted text. For more information about particular Learn REST endpoints, see the REST API documentation BbML specification - version 1 A BbML field accepts text containing either: Ultra experience courses: BbML Original experience: safe HTML Either experience outside of the context of courses: safe HTML Valid BbML uses only following HTML elements and only the attributes accepted for each element. You can use attributes marked Internal use only as part of a REST API GET method when you are patching/updating an existing resource. Do not use them to create a resource from scratch. a br del div em h4 h5 h6 img li ol p span strong sub sup ul For more information about each accepted element, see below. a Attribute Comment data-bbid Deprecated Internal use only. data-bbfile Rendering control for use with Ultra UI. data-bbfile=\"{&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;1.jpg&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/jpeg&amp;quot;}\" data-bbtype Internal use only. data-mce-href Internal use only. href   rel[nofollow]   br Attribute Comment data-mce-bogus Internal use only. del div Attribute Comment data-bbid Internal use only. em h4 h5 h6 img Attribute Comment align   alt   class   data-mathml MathML from which the image was created if applicable. data-mce-src Internal use only. src   li ol Attribute Comment data-mce-style Internal use only. style[list-style-type: *]   p span Attribute Comment data-mce-bogus Internal use only. data-mce-style Internal use only. style[font-style: ,font-weight: *,text-decoration:]   strong sub sup ul Attribute Comment data-mce-style Internal use only. style[list-style-type: *]   Examples If one were to use the following as the input to a BbML field of a resource within an Ultra course context, such as an Ultra Document: &lt;!-- {\"bbMLEditorVersion\":1} --&gt; &lt;div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"&gt; &lt;h2&gt;Header Large&lt;/h2&gt; &lt;h5&gt;Header Medium&lt;/h5&gt; &lt;h6&gt;Header Small&lt;/h6&gt; &lt;p&gt;&lt;strong&gt;Bold &lt;/strong&gt;&lt;em&gt;Italic &lt;span style=\"text-decoration: underline;\"&gt;Italic Underline&lt;/span&gt;&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;span style=\"text-decoration: underline;\"&gt;&lt;em&gt;&lt;/em&gt;&lt;/span&gt;Bullet 1&lt;/li&gt; &lt;li&gt;Bullet 2&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;img&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.\"&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&amp;lt;braces test=\"values\" other=\"encoded values\"&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Header Small&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Number 1&lt;/li&gt; &lt;li&gt;Number 2&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Just words followed by a formula &lt;img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" data-mathml=\"Â«math xmlns=Â¨[http://www.w3.org/1998/Math/MathMLÂ¨Â»Â«mnÂ»3Â«/mnÂ»Â«moÂ»/Â«/moÂ»Â«m nÂ»4Â«/mnÂ»Â«mrootÂ»Â«mnÂ»7Â«/mnÂ»Â«mnÂ»2Â«/mnÂ»Â« /mrootÂ»Â«/mathÂ»](https://community.blackboard.com/external-link.jspa?url=htt p%3A//www.w3.org/1998/Math/MathML%25C2%25A8%25C2%25BB%25C2%25ABmn%25 C2%25BB3%25C2%25AB/mn%25C2%25BB%25C2%25ABmo%25C2%25BB/%25C2%25AB/mo%25C2 %25BB%25C2%25ABmn%25C2%25BB4%25C2%25AB/mn%25C2%25BB%25C2%25ABmroot%25C2%25BB %25C2%25ABmn%25C2%25BB7%25C2%25AB/mn%25C2%25BB%25C2%25ABmn%25C2%25BB2%25C2%2 5AB/mn%25C2%25BB%25C2%25AB/mroot%25C2%25BB%25C2%25AB/math%25C2%25BB)\"&gt; &lt;/p&gt; &lt;p&gt;&lt;a href=\"[http://www.blackboard.com](https://community.blackboard.com/external- link.jspa?url=http%3A//www.blackboard.com/)\"&gt;Blackboard&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; Render It would render as follows in Ultra UI: Uploaded files When creating content using the Learn Public REST API, it is expected that any related file content be uploaded prior to creation. Uploading files can be done using the upload file endpoint documented at https://developer.blackboard.com/portal/displayApi Once a file has been uploaded, the upload file endpoint will have provided an Id which will be used to reference the associated file. Using the upload file id withing the Learn Public REST API, any BbML anchor tag href attribute can be used to associate the uploaded file using the following notation: &lt;a href=\"bbupload://&lt;uploadFileId&gt;\"&gt;filename.ext&lt;/a&gt; For proper formatting and rendering within the ULTRA environment, it is recommened to also include a data-bbfile attribute. An example value of this can be seen above in the BbML specification section. However, to describe it a bit more, the data-bbfile attribute’s value is an HTML encoded json string: HTML encoded: `{\"render\":\"inline\",\"linkName\":\"1.jpg\",\"mimeType\":\"image/jpeg\"}`&lt;br/&gt; HTML decoded: `{\"render\":\"inline\",\"linkName\":\"filename.ext\",\"mimeType\":\"image/jpeg\"}` render: At this time, it is recommended to only use ‘inline.’ linkName: The filename of the uploaded file. mimeType: The MIME type of the uploaded file.` The end result of all this would be as follows: &lt;a href=\"bbupload://&lt;uploadFileId&gt;\" data-bbfile=\"{&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;filename.ext&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/jpeg&amp;quot;}\"&gt;      filename.ext &lt;/a&gt; File Type Documentation The editor recognizes the following values for data-bbfile, with the arguments it accepts for data-bbtype. For each plugin, the bbml element is given (usually a); the value of data-bbtype which selects that plugin; and the fields of data-bbfile which are expected. (data-bbfile is a JSON-encoded object.) For example, for the Attachment plugin, the generated bbml is as follows (minus unneccessary whitespace I’ve added for easy viewing): &lt;a href=\"https://ultra-integ.int.bbpd.io/bbcswebdav/pid-486306-dt-content-rid-13383141_1/xid-13383141_1\" data-bbtype=\"attachment\" data-bbfile=\"{&amp;quot;extension&amp;quot;:&amp;quot;pdf&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;1-23MB&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;alternativeText&amp;quot;:&amp;quot;1-23MB.pdf&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;application/pdf&amp;quot;,&amp;quot;isDecorative&amp;quot;:false\"&gt; 1-23MB &lt;/a&gt; Tags without a data-bbfile attribute, or with an unrecognized value for data-bbfile, are displayed normally. Plugin Name: Attachment element: &lt;a href=\"${link}\"&gt; data-bbtype: attachment data-bbfile: linkName - the name of the file render - “inline” to render images/video/audio/etc inline “attachment” to show as a block alternativeText - alt text for accessibility mimeType - the mime type of the file isDecorative - a flag indicating whether the image is decorative. Currently always false for images generated in Ultra. Notes: The href attribute is the download url for the document. Attachments can be add from the local file system or the cloud (via Kloudless). After the item has been added, there is no way of distinguishing this. Attachments, whether displayed inline or not, are full-width. Plugin Name: Block Images element: &lt;a href=\"${src}\"&gt; data-bbtype: image data-bbfile: alt - the image alt text Notes: Displays an image as a full-width block (instead of inline.) All images generated by Ultra are full-width blocks, but images converted from Learn are regular &lt;img&gt; elements. The href attribute in the bbml tag becomes the src attribute of the img tag. Mathml images (as generated by Wiris) are regular img elements that have the data-mathml attribute. It is beyond the scope of this document to describe the wiris service; however, no additional processing beyond that of a regular img tag is required to render mathml images. Plugin Name: Custom Class element: &lt;a&gt; data-bbtype: customClass data-bbfile: className Notes: Transforms into &lt;span class=\"${className}\"&gt;. This type will never be encountered in saved bbml; it is generated at runtime to modify the editor display. Plugin Name: Embedded Video element: &lt;a&gt; data-bbtype: video data-bbfile: src - The link for the embedded video Notes: Links to an embedded video from Youtube or Video which is shown in an iframe. Only links from Youtube or Vimeo are allowed. Plugin Name: LTI Content Market element: a data-bbtype: lti data-bbfile:Placement linkType - ‘resource/x-bb-bltiplacement’ linkRefId - The PK of the placement record Partner Cloud “linkType” - ‘resource/x-bbgs-partner-cloud’ “linkRefId” - The partner tool ID. Usually some concatenation of partner ID + the tool ID LTI Link “linkType” - ‘resource/x-bb-blti-link’ “linkRefId” - The PK of the parent IMS Deep Linking placement. Used to look up key/secret at launch “url” - LTI Tool Url “launchInNewWindow” - Whether to launch in an iframe or new window “customParameters” - Custom parameters to pass with the launch as JSON Notes: It is beyond the scope of this document to describe LTI links. Plugin Name: Video Everywhere (aka Collab Integration; aka Collab Video; aka Video Integration) element: &lt;img title=\"description\" alt=\"alt text\"&gt; data-bbtype: collab_video data-bbfile: video_uuid - The uuid of the collab video. Notes: src is a relative image link returned by the collab service. title is the description of the video. alt is the alt text of the image. It is beyond the scope of this document to describe the collab service api.",
    "tags": "Learn REST",
    "url": "/learn/rest/advanced/bbml.html"
  },{
    "title": "Become a Partner!",
    "text": "Become a Partner! While our Community partner level is FREE to developers and provides access to the Blackboard Learn AMI for developers to build REST and LTI applications, API limits apply and Behind the Blackboard support access is not included. Consider investing in one of our other partnership levels to receive added benefits that help partners deepen integrations, promote solutions and connect with Blackboard clients. Blackboard Developers Network (BbDN) is Blackboard’s basic partnership and is available for $3,000 annually. BbDN Partnerships include the following benefits: Member partners receive: One (1) Blackboard Learn Developer License (for a self-hosted instance) Access to Shared SaaS sites Access to Behind the Blackboard Support portal Custom listing in our Partner Catalog Listing in our App Catalog Use of Blackboard Licensed Marks in marketing materials (subject to approval) Eligible to sponsor exhibit at BbWorld® and other Blackboard events. BbDN Partners also have the option to add-on of a “Blackboard Learn SaaS Starter site” for $2,000 annually. Limited use for testing/demo purposes Licensed for 20 active users and 20 GB Storage Updated automatically against the Blackboard Learn SaaS Test Release schedule For more info, see our help details About the Blackboard Learn SaaS Deployment Sign up for the BbDN agreement today on our registration page, or visit our Partnerships Program page to learn about additional opportunities to work together.",
    "tags": "Partners",
    "url": "/partners/become-a-partner.html"
  },{
    "title": "Blog Events",
    "text": "Blog Events Blackboard Learn’s Caliper Analytics stream emits a BlogEvent whenever a student submits a blog entry in an original experience course. Here is some of the key data that is associated with these events: BlogEvent object.id - the primary key for the Blog action - Created, Modified, Commented extensions - contains a tag called bb:user.externalId with the batch_uid for the user Sample Payload Here is a sample of what an event payload might look like: { \"sensor\": \"530efc49-6b9f-40a6-918b-966ee83a744c\", \"sendTime\": \"2021-01-05T16:55:05.235Z\", \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"data\": [ { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/BlogEvent\", \"id\": \"a6fa63b8-9db7-44f8-aff8-63b94b952ead\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/users/9c60a9cdb3144d1aa77ff56c34ef248b\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_227_1\", \"bb:user.externalId\": \"scott.hurrey@myschool.edu\" } }, \"action\": \"Created\", \"object\": { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/Blog\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/blog/_39_1\", \"name\": \"Test Blog\", \"description\": \"\", \"blogType\": \"INDIVIDUAL\", \"journal\": false, \"pointsPossible\": 100, \"extensions\": {} }, \"generated\": { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/BlogPost\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/blog/_39_1/post/_40_1\", \"name\": \"\", \"description\": \"\", \"anonymous\": false, \"attachedFilesCount\": 0, \"length\": 51, \"extensions\": {} }, \"eventTime\": \"2021-01-05T16:55:03.225Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/courses/e9c09e39c7844ae3b2ed677ac4fd90d7/members/9c60a9cdb3144d1aa77ff56c34ef248b\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_124_1\", \"bb:course.externalId\": \"og-101\", \"bb:user.id\": \"_227_1\", \"bb:user.externalId\": \"scott.hurrey@myschool.edu\" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/users/9c60a9cdb3144d1aa77ff56c34ef248b\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_227_1\", \"bb:user.externalId\": \"scott.hurrey@myschool.edu\" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/courses/e9c09e39c7844ae3b2ed677ac4fd90d7\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_124_1\" }, \"members\": [], \"courseNumber\": \"og-101\" }, \"roles\": [ \"Learner\" ], \"status\": \"Active\" }, \"federatedSession\": { \"startedAtTime\": \"2021-01-05T16:55:03.225Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/sessions/5118E091FCBDF29709BBD9D6F6758679\", \"type\": \"LtiSession\", \"name\": \"5118E091FCBDF29709BBD9D6F6758679\", \"dateCreated\": \"2021-01-05T16:55:03.225Z\", \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/users/9c60a9cdb3144d1aa77ff56c34ef248b\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_227_1\", \"bb:user.externalId\": \"scott.hurrey@myschool.edu\" } } }, \"extensions\": {}, \"session\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/sessions/5118E091FCBDF29709BBD9D6F6758679\", \"type\": \"Session\" } } ] }",
    "tags": "Standards",
    "url": "/standards/caliper/events/blog-events.html"
  },{
    "title": "Blog",
    "text": "DevBlogs Welcome to the home of Blackboard Developer blogs. Keep up on all the latest developer documentation. Latest Posts Mark Kauffman 06 January 2021 How to Create a User With Limited Entitlements For REST API Calls How to Create a User With Limited Entitlements For REST API Calls ...read more rest learn api Scott Hurrey 05 January 2021 Caliper Documentation Updated for 1.1 We have spent some time over the holiday break updating and organizing our documentation better. One of the longest outstanding changes was to update the Caliper event samples from 1.0 to 1.1. ...read more standards caliper update Mark Kauffman 16 December 2020 SOAP EOL Explained Back in the day, January 4, 2019 to be exact, Blackboard announced deprecation of our SOAP Web Services ...read more soap learn eol api Eric Preston 15 October 2020 Cookies and Browsers Most people like cookies. Internet browsers used to like cookies, but a lot has changed in the last few years. ...read more lti learn api Mark Kauffman 07 October 2020 New! Student Id Template Variable New in SaaS and the forthcoming 3900 release an @X@user.student_id@X@ template variable! ...read more learn template variables Mark Kauffman 04 October 2020 Oct 2020 - Changes that will impact Learn B2 Integrations Read more to learn about important changes coming for Building Block Developers. ...read more building blocks update Scott Hurrey 03 September 2020 Ally as a Service and UEF Documentation now available Today we launched two new sections of developer documentation - Ally as a Service (AaaS) and the Ultra Extension Framework (UEF). ...read more rest ally learn ultra uef Mark Kauffman 30 August 2020 New!! REST and UEF Tutorials New!! Visit the REST Tutorials and UEF Tutorials pages for our tutorials on these topics!! ...read more rest uef tutorials Mark Kauffman 24 August 2020 DevCon 2020 - New LTI Advantage Tutorial Be sure to revisit the Developing an LTI Advantage Solution page for the latest and greatest tutorial from DevCon 2020! ...read more lti standards learn Scott Hurrey 03 August 2020 DevCon 2020 By The Numbers DevCon 2020 is in the books, and what an amazing conference it was. This blog will start a weekly series in which everything Thursday, we will talk about DevCon from a content perspective. ...read more devcon community recap Scott Hurrey 10 July 2020 In Orbit at DevCon 2020 DevCon 2020 kicked off in full force this week with clients, partners and Blackboarders around the world coming together in Blackboard Learn Ultra to network, share knowledge, and dig deeper into Blackboard tech. ...read more devcon community recap",
    "tags": "",
    "url": "/blogs/blog-home.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/category/blog.html"
  },{
    "title": "Build The C# SOAP Sample Client",
    "text": "Build The C# SOAP Sample Client The Blackboard Learn sample code contains a fully-functional client that provides form-based interaction with all of the available SOAP-based Web Services. This allows a Developer to interact with any of the Web Services, see what data is required, try different combinations and permutations and inspect the code behind it. This is a great tool to use to assist in designing your Web Services integration, and even to troubleshoot an existing integration from release-to-release. This help article assumes that you have downloaded the Web Services Sample Code and that you have built the .NET Web Services Library. How to Build Building the .NET Sample Client is really quite simple, once you have generated and built the Web Services Library. The solution has already been created, and lives in the **_/qa/dotnet/wsagent_** directory. The easiest way to build it, is to open Microsoft Visual Studio Express 2010 for C# and open the solution containing the .NET library. With this loaded, click **File-&gt;Add...-&gt;Existing Project**. Navigate to the wsagent directory, select wsagent2010 project, and click Open. This will add the sample client to the existing project. Now simply click Debug-&gt;Build and build the project. This will place an executable called wsagent.exe in the _**/qa/dotnet/wsagent/bin/Debug**_ directory. You can add a link to your desktop, start menu, or quick launch bar and launch the tool whenever you need it.",
    "tags": "Learn soap",
    "url": "/learn/soap/tutorials/build-sample-client-csharp.html"
  },{
    "title": "Build The .Net SOAP Sample Library",
    "text": "Build The .Net SOAP Sample Library The first step to building the .NET Web Services sample desktop application is to build the library that handles the communication between that client and Blackboard Learn. This library can also be used from within Microsoft™ Visual Studio® to build custom applications, without having to build the communication protocols. If you choose to build your own, you have access to all of the code used herein. Prerequisites Microsoft™ Web Services Extensions 2.0 Service Pack 3 Client.zip archive from the Blackboard Learn User Interface Web Services are Available and Discoverable Assumptions This sample was written based on instructions for Microsoft™ Visual Studio® 2010 Express Edition. There is sample code specific to several versions of Visual Studio, so some steps may vary slightly. The most fluid item is the location of wsdl.exe. This seems to change depending upon the version of Microsoft™Windows® and the version of Visual Studio installed. The path to this file is required to generate the sample code used to build this library. That said, there is no known restriction as to which version of Microsoft Visual Studio you use. Using a version other than the versions that Blackboard supplies specific solutions for may require additional configuration changes to build the software. Build It The sample code must be built from the command line. To access the command line in Microsoft Windows, click on the ‘Start’ menu, click run, type .html and click ok. Once you are at the command prompt, navigate to the dotnetclient sub-directory where you unzipped the client.zip file. In this directory, you will see a file called sampleGenClient..html. Edit this file in your favorite text editor. When this script is executed, it will reach out to your Blackboard instance and retrieve the wsdl for each of the available web services in order to generate the code. This requires access to the wsdl.exe executable that is part of the Microsoft Visual Studio Installation. This is set in the sampleGenClient..html file. Locate the line in the file that reads set DOTNETBIN= and set it to the appropriate path. Do not include wsdl.exe in the path. This will be appended by the script. This file may be located in several locations depending upon the version of Visual Studio and Windows. You might find this file in the following locations. OS Application WSDL.exe Location Windows 7 Visual Studio 2010 Express C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\bin Windows Server 2008 R2 Visual Studio 2010 Express C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.0A\\Bin Once this edit has been made, save the file. Now from the command line, and in the dotnetclient directory, type the following: sampleGenClient..html http://&lt;blackboard learn domain&gt; WARNING: You will see error messages similar to the one below. You can safely ignore these messages. Schema validation warning: Schema item 'element' named 'getServerVersion' from namespace 'http://util.ws.blackboard' is invalid. Namespace 'http://ws.platform.blackboard/xsd' is not available to be referenced in this schema. Schema validation warning: Schema item 'element' named 'getServerVersionResponse' from namespace 'http://util.ws.blackboard' is invalid. Namespace 'http://ws.platform.blackboard/xsd' is not available to be referenced in this schema. Schema validation warning: Schema item 'element' named ‘getDataSourcesResponse' from namespace 'http://util.ws.blackboard' is invalid. Namespace 'http://util.ws.blackboard/xsd' is not available to be referenced in this schema. Schema validation warning: Schema item 'element' named 'checkEntitlement' from namespace 'http://util.ws.blackboard' is invalid. Namespace 'http://ws.platform.blackboard/xsd' is not available to be referenced in this schema. Warning: Schema could not be validated. Class generation may fail or may produce incorrect results. Writing file 'C:\\Users\\username\\Blackboard\\Developer Tools\\Web Services\\dotnetclient\\BbWsClient\\gen\\UtilWS.cs'. Once the sample code has been generated, the next step is to build the code into a re-usable library. To do this, you must first open Microsoft Visual Studio. Once the application is open, select File &gt; Open from the menu and navigate to and open the …/dotnetclient/BbWsClient/BbWsClient2010.sln file. If you are going to use this code in a production environment, you will need to add code to handle load balanced environments. The best way to do this is to modify the WebserviceWrapper.cs file to add a CookieContainer to each initialize call. For example, the initAnnoucement(UsernameToken userToken) method looks like the following: announcement = new AnnouncementWS(); announcement.Url = baseUrl + \"/Announcement.WS\"; announcement.RequestSoapContext.Security.Tokens.Add(userToken); Simply modify the method as illustrated below to enable the cookie container. announcement = new AnnouncementWS(); announcement.CookieContainer = new System.Net.CookieContainer();  //HANDLE STICKY COOKIES announcement.Url = baseUrl + \"/Announcement.WS\"; announcement.RequestSoapContext.Security.Tokens.Add(userToken); You must make this change to all of the init methods you plan to implement. Now simply build the project. To do this, right-click the BbWsClient2010 project in the Solution Explorer and select Build from the contextual menu. This will create the Dynamic Link Library (.dll) file as either …/dotnetclient/BbWsClient/bin/Debug/BbWsClient.dll or ../dotnetclient/BbWsClient/bin/Release/BbWsClient.dll. The .dll file can be imported into other projects, or, as you will see in subsequent help topics, can be added to in order to create custom applications. Gradebook.WS WSDL and Learn October 2014 A bug in the Blackboard Learn 9.1 October 2014 release with the WSDL for gradebook.ws causes the code generation to fail when trying to ingest the this WSDL. For more information and workarounds for this bug, see the Behind the Blackboard article Gradebook.WS wsdl not Able to be Consumed due to Invalid RuntimeException Declaration. If you follow workaround 1, simply change the initial gradebookWS call: url = url_header + 'Gradebook.WS?wsdl' with this: url = 'file:///Users/username/wsdl/Gradebook.xml' Just be sure to replace my absolute path to the absolute path on your file system. If you follow workaround 2, the code should work as-is.",
    "tags": "Learn soap",
    "url": "/learn/soap/tutorials/build-sample-library-csharp.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/building-blocks.html"
  },{
    "title": "Calculated Grade Snapshot Events",
    "text": "Calculated Grade Snapshot Events Blackboard Learn’s Caliper Analytics stream emits a CalculatedGradeSnapshotEvent nightly for any grade that is recalculated. Here is some of the key data that is associated with these events: CalculatedGradeSnapshotEvent object.course.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.itemId - the primary key for the calculated grade column user.id - contains a unique ID of the user (the ID is known to Bb) object.score - score provided object.isCourseGrade - true if final grade user.extensions - contains a tag called bb:user.externalId with the batch_uid for the user action - Graded Sample Payload Here is a sample of what a payload might look like: { \"sensor\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"sendTime\": \"2021-01-05T08:20:38.600Z\", \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"data\": [ { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/CalculatedGradeSnapshotEvent\", \"id\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"action\": \"Graded\", \"object\": { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/CalculatedGrade\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1/calculatedGrade/329189703\", \"name\": \"\", \"description\": \"\", \"itemId\": \"_12345_1\", \"scorePossible\": 100, \"isCourseGrade\": false, \"syncVersion\": 329189703, \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/b1ea2fccd95144a29e5e906034e4ddee\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"course\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/ab336626104044daab61e9a9d72ac8e2\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"extensions\": {} }, \"eventTime\": \"2021-01-05T08:20:33.572Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/ab336626104044daab61e9a9d72ac8e2/members/b1ea2fccd95144a29e5e906034e4ddee\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_12345_1\", \"bb:course.externalId\": \"BIO-101\", \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/b1ea2fccd95144a29e5e906034e4ddee\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/ab336626104044daab61e9a9d72ac8e2\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"roles\": [ \"Learner\" ], \"status\": \"Active\" }, \"extensions\": {} } ] }",
    "tags": "Standards",
    "url": "/standards/caliper/events/calculated-grade-snapshot-events.html"
  },{
    "title": "Caliper Event Store in Learn",
    "text": "Configuring Caliper Event Store in Blackboard Learn Blackboard Learn was the first Learning Management System to be certified for Caliper Learning Analytics. Caliper is an IMS Global standard that allows a provider, in this case Learn, to stream usage data to an external system. This data contains things like login and out events, content views, assignment submissions, and even grading events. The standard defines a specific format providing a self-contained JSON document that gives the ingestor all of the information needed to understand who performed what action on what system to what outcome. The following document describes how to enable an external Event Store in Blackboard Learn. If you are self-hosted, you will need to make a configuration change in order to use Caliper. In bb-config.properties, you must set bbconfig.cloud.telemetry.aws.region=us-east-1 and run PushConfigUpdates for the setting to take affect. For UK clients, the data transfer to us-east is protected under the requirements as set forth in GDPR. As a user with Administrator privledges, login to Blackboard Learn and access the System Administrator area. In the original experience, this is a tab across the top. If in the Ultra experience, this will be available in the left hand navigation panel. On the subsequent page, select installed Tools. From the Manage Building Blocks page, navigate through the paging tools until you see the ‘Telemetry’ Building Block. Using your mouse, hover to the right of the Building Block’s title to show the context menu. Click the context menu icon and select ‘Settings’ from the menu. On the Settings page, you will notice two entries. Caliper Providers is to review external Caliper Providers that are feeding Caliper events into Learn. If you are a Kaltura client running on a SaaS deployment of Blackboard Learn, you will likely see Kaltura here. This is how the Kaltura Student Usage Report is populated. For this document, we are focused on Caliper Event Stores. Click the corresponding link. On this screen, you can see all of the currently registered Event Stores. You will likely only see one entry on this page, similar to the last URL in this example. This is Blackboard’s internal event store, used to power the Student Activity Reports. The top entry in our example is a custom Event Store, used to capture the Blackboard Learn events as they are streamed. It is important to note that the internal event store is not accessible externally. As a client, you must enable your own custom event store and capture the data there if you want access to it. It is also important to note that Caliper Providers that send data to Blackboard Learn like Kaltura are not included in the caliper event stream. Any caliper providers on your campus should write directly to your event store. Service URL - This is the full URL to the Caliper Ingestion Service i.e. https://mydomain.edu/caliper API Key - This is a value that is included with every Caliper Event transmission. Your Event Store should know this value and use it to validate the message as authentic. It can also be used to differentiate between multiple Caliper Providers. Highly recommended that this value is a true UUID. Generate API Key - Use this button to have Blackboard Learn automatically generate a true UUID for the API key if you have not already done so. Event Batch Size - The Telemetry Building Block captures a lot of information. The Event Batch Size allows you to specify how many messages to compile before sending. Once it the batch size is reached, a single HTTP message will be sent with an array of caliper events. Active - Essential Admin toggle to make the Event Store active or inactive. Submit/Cancel - Click Submit to save. As soon as you enable your event store, it will start to recieve events. Your event store should be a fully-hardened data warehouse. There is a ton of data and no way to filter the data you receive on the Blackboard Learn server. You can certainly filter out the data that you want, but you will have to be able to process all of the incoming messages and have ample space and processing power to store the data and run reports against it. If you want more information about what types of data is included, check out the rest of this space for documents tagged for caliper.",
    "tags": "Standards Caliper Getting Started",
    "url": "/standards/caliper/getting-started/caliper-event-store-for-learn.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/caliper.html"
  },{
    "title": "Check the processing status of a file",
    "text": "Check the processing status of a file Ally processes files asynchronously. We aim to process files in near-realtime, but some delays might be present. This endpoint can be used to poll for status updates. Endpoint GET /api/v2/clients/:clientId/content/:contentHash/status Path Parameters clientId - Path parameter - Your Ally Client ID contentHash - Path parameter - The content hash from the previous endpoint Body Parameters None Query Parameters None Expected response This endpoint will always return a 200 status code for existing content hashes regardless of whether the file was processed successfully. { \"hash\": \"MS4gQWxsI...\", \"status\": \"success\", \"statusUrl\": \"/api/v2/clients/:clientId/content/MS4gQWxsIH.../status\", \"resourceUrl\": \"/api/v2/clients/:clientId/content/MS4gQWxsIH...\" } Parameter Definition hash the content hash used to reference the file by Ally as a Service status the stage of processing the file is in* statusUrl the endpoint to call to check the status resourceUrl the endpoint to retrieve the report or metadata The following status values can be identified: success pending inprogress failed Testing with cURL curl \\ -H \"Authorization: Bearer myJwtToken\" \\ https://prod.ally.ac/api/v2/clients/:clientId/content/:contentHash/status",
    "tags": "Ally",
    "url": "/ally/check-status.html"
  },{
    "title": "Rest registry",
    "text": "Register Developer Instances to the Cloud You must register developer instances of Blackboard Learn to the Blackboard cloud. This is true of both developer virtual machines (DVM) that you host locally and AWS cloud-based instances created from the Blackboard Learn AMI. Use the following steps to register your DVM or AMI. To register your developer instance to the Blackboard cloud: Do not select Move to Production in the DVM or AMI without guidance to do so from Blackboard’s developer experience team. Log into your developer instance as Administrator. You may be greeted with an first-time user message. You can select Close or refresh the page to close it. Select System Admin. Select Cloud Connector under Cloud Management. Provide a Display Name. Select an Instance Type. For most development work, select Development. Select a Regional Cloud. This one-time choice indicates the AWS region with which you want to associate your developer instance. Your choice is permanent and irrevocable. Select Save and Retry to save the configuration and connect to the Blackboard cloud. In some cases, the developer instance of Learn throws an error explaining that it could not connect to the Blackboard cloud. This behavior is expected. Ignore it. If you are working with a developer virtual machine (DVM) rather than an AMI, you may need an SSL connection to register successfully. In these cases, you receive an error message like the following: If you see this error message, try connecting to the Virtual Machine at https://localhost:9877 and following the steps above. This should allow you to register to the cloud and then you should be able to use it in non-SSL mode.",
    "tags": "Learn Rest",
    "url": "/learn/rest/admin/cloud-registry.html"
  },{
    "title": "Code Quality Initiative",
    "text": "Code Quality Initiative Why Code Quality Matters Your code is your asset Keeps your cost down as you grow Increase robustness, maintainability, security, performance, scalability, extensibility, etc. Prevention is the best medicine Challenges with Code Quality Often talked about in theory but not actually practiced Hard to measure or prove Difficult to plan and prioritize Sonar – Quality Management Platform http://www.sonarsource.org/ Open source and extensible Manages code quality with: Views of all projects at a glace, drill down to source code, differential, hotspots Coding Rules Unit Tests Standard Metrics Time Machine Integration with tools such as PMD, Findbugs, Checkstyle, JSLint, Clover, Cobetura, Hudson (many plugins available) Static Code Analysis (SCA) Applies rules to find potential bugs, anti-patterns, and code style violations Catches problems as early as possible in the development process A well-established industry practice for validating the quality of source code Can be automated and tracked by tools like Sonar Downloads Blackboard Learn custom PMD rules and Sonar Java profile The latest version is attached to this post. Please install Blackboard custom PMD rules before importing Java rule set. How to install Blackboard custom PMD rules: Copy bb-.html-rules.jar and bb-rules-sonar.xml files to ${Sonar_Home}/extensions/rules/.html Make sure the files have read rights for Sonar Restart Sonar server Verify that Bb* rules exist from a Java profile’s coding rules list How to use Blackboard’s Java rule set: Log in to Sonar as a user with Administrators role Navigate to “Configuration” -&gt; “Quality Profiles” Click on “Restore profile” link located on the top right of the page Select bb-sonar-profile-java.xml and click on “Restore profile” button Specify the Sonar analysis configuration to use the restored profile",
    "tags": "Learn b2",
    "url": "/learn/b2/best-practices/code-quality.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/community.html"
  },{
    "title": "Configuring Ultra Extension Framework in Learn",
    "text": "Configuring Ultra Extension Framework in Learn The Ultra Extension Framework (UEF) encompasses a broad array of features and functionality, and as such, each UEF-enabled integration will have its own specific configuration settings. However, the setup process followed by a Blackboard Learn System Administrator leverages existing standard configuration workflows already in place. Adding a UEF-enabled integration to a Blackboard Learn environment requires a System Admin to make configuration changes to one or more of the following areas: REST API Integrations: UEF-enabled integrations will need to be added as a REST API integration [Administrator Panel ⇨ REST API Integrations ⇨ Create Integration]. LTI Tool Providers: UEF-enabled integrations will need to be registered as an LTI Tool Provider. We recommend using LTI 1.3, though LTI 1.1 will work. To register an LTI 1.3 tool: [Administrator Panel ⇨ LTI Tool Providers ⇨ Register LTI 1.3 Tool] To register an LTI 1.1 tool: [Administrator Panel ⇨ LTI Tool Providers ⇨ Register Provider Domain] New LTI Placement Type: “Ultra extension” As part of the Ultra integration framework development, it’s necessary to define a way for Learn admins to register an Ultra integration and how the registered integrations are going to be loaded inside Ultra: • We’ll keep the current registration workflow for LTI 3rd party tools, but a new placement type will be added so that is possible to know when an LTI tool is expected to work as an Ultra UI integration. • The new LTI placement type will be known as “Ultra extension” and such type will only be visible for Learn Ultra instances. NOTE: When registering an LTI 1.1 Placement, you must include the following information: Tool Provider URL Tool Provider Key Tool Provider Secret The Tool Provider Key and Tool Provider Secret would be the ones given by the devportal when the application is created and the Tool Provider URL must follow this format: https://example.provider.com/lti-launch?id=&lt;PlacementId&gt;&amp;appkey=&lt;Tool Provider Key&gt; Cross-Origin Resource Sharing: For UEF-enabled integrations that make direct calls to their Blackboard Learn instance’s REST API will need be be configured via the Cross-Origin Resource Sharing (CORS) tool [Administrator Panel ⇨ Cross-Origin Resource Sharing ⇨ Create Configuration].",
    "tags": "Learn UEF",
    "url": "/learn/uef/configure-uef.html"
  },{
    "title": "Getting Involved",
    "text": "How to contact us! There are many ways to get in touch with us: E-mail the Blackboard Developers Network Team: developers@blackboard.com E-mail the Blackboard Partner Team: bbpartnerteam@blackboard.com Post to our discussion space Join the Blackboard Techies Slack channel. Tell us in person at a conference Provide your feedback through one of our many users groups",
    "tags": "Community",
    "url": "/community/contact.html"
  },{
    "title": "Content Events",
    "text": "Content Events Blackboard Learn’s Caliper Analytics stream emits a ContentEvent to cover a plethora of use cases. Here is when a message will be sent: Content Item Created Object Message Sent Folder done Link done LTI done Assignment done Forum done Content File Upload done Test done Document done File Upload done Content Item Updated (by member value) The columns contain attributes of the Content Item. Legend done - Changing this value emits a caliper event close - Changing this value does not emit a caliper event remove - This value is not applicable for this attribute radio_button_unchecked - This results in a ForumEvent Object Name URL Des Avl Parm Score Due Date Start Date End Date Disc Grp Inst Qs Folder done remove close done remove remove remove done done close remove remove   Link done done close done remove remove remove done done close remove remove   LTI done done close done done close close done done radio_button_unchecked remove remove remove Assignment done remove remove done remove close close done done radio_button_unchecked close done remove Forum done remove remove done remove close close done done close remove remove remove Content File Upload done remove remove done remove remove remove done done close remove done remove Test done remove remove done remove close close done done radio_button_unchecked close close close Document done remove remove done remove remove remove done done close remove done remove File Upload done remove remove done remove remove remove done done close remove done remove Content Item Deleted Object Message Sent Folder done Link done LTI done Assignment done Forum done Content File Upload done Test done Document done File Upload done GradeEvents are sent in bulk nightly. Here is some of the key data that is associated with these events: ContentEvent group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.@id - …/content/id - the primary key for the content ID actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user membership.roles - #Instructor action - Created or Modified or Deleted Sample Payload Here is a sample of what a payload might look like: { \"sensor\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"sendTime\": \"2021-01-05T14:50:35.681Z\", \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"data\": [ { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/ContentEvent\", \"id\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/566f88cb92b64e1086590458deeeb0da\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c \" } }, \"action\": \"Modified\", \"object\": { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/Content\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/content/_12345_1\", \"name\": \"\", \"description\": \"\", \"handler\": \"resource/x-bb-forumlink\", \"isLesson\": false, \"isFolder\": false, \"isGroupContent\": false, \"dataVersion\": 3, \"renderType\": \"LINK\", \"scorePossible\": 20, \"dueDate\": \"2021-01-19T06:59:00.000Z\", \"aggregationModel\": \"Last\", \"extensions\": {} }, \"eventTime\": \"2021-01-05T14:50:29.906Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/3ced8bf8f6174c339908f7dab224f0fa/members/566f88cb92b64e1086590458deeeb0da\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_12345_1\", \"bb:course.externalId\": \"BIO-101\", \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c \" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/566f88cb92b64e1086590458deeeb0da\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c \" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/3ced8bf8f6174c339908f7dab224f0fa\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"roles\": [ \"Instructor\" ], \"status\": \"Active\" }, \"federatedSession\": { \"startedAtTime\": \"2021-01-05T14:50:29.906Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/98CDC6B4501AF7FDAF55D8CC2B3DD7CA\", \"type\": \"LtiSession\", \"name\": \"98CDC6B4501AF7FDAF55D8CC2B3DD7CA\", \"dateCreated\": \"2021-01-05T14:50:29.906Z\", \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/566f88cb92b64e1086590458deeeb0da\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c \" } } }, \"extensions\": {}, \"session\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/98CDC6B4501AF7FDAF55D8CC2B3DD7CA\", \"type\": \"Session\" } }, { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/ContentEvent\", \"id\": \"90cc7d43-60df-49a4-8782-f4719988d5fb\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/566f88cb92b64e1086590458deeeb0da\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c \" } }, \"action\": \"Modified\", \"object\": { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/Content\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/content/_12345_1\", \"name\": \"\", \"description\": \"\", \"handler\": \"resource/x-bb-forumlink\", \"isLesson\": false, \"isFolder\": false, \"isGroupContent\": false, \"dataVersion\": 3, \"renderType\": \"LINK\", \"scorePossible\": 20, \"dueDate\": \"2021-01-19T06:59:00.000Z\", \"aggregationModel\": \"Last\", \"extensions\": {} }, \"eventTime\": \"2021-01-05T14:50:30.114Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/3ced8bf8f6174c339908f7dab224f0fa/members/566f88cb92b64e1086590458deeeb0da\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_12345_1\", \"bb:course.externalId\": \"BIO-101\", \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c \" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/566f88cb92b64e1086590458deeeb0da\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c \" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/3ced8bf8f6174c339908f7dab224f0fa\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"roles\": [ \"Instructor\" ], \"status\": \"Active\" }, \"federatedSession\": { \"startedAtTime\": \"2021-01-05T14:50:30.114Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/98CDC6B4501AF7FDAF55D8CC2B3DD7CA\", \"type\": \"LtiSession\", \"name\": \"98CDC6B4501AF7FDAF55D8CC2B3DD7CA\", \"dateCreated\": \"2021-01-05T14:50:30.114Z\", \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/566f88cb92b64e1086590458deeeb0da\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c \" } } }, \"extensions\": {}, \"session\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/98CDC6B4501AF7FDAF55D8CC2B3DD7CA\", \"type\": \"Session\" } } ] }",
    "tags": "Standards",
    "url": "/standards/caliper/events/content-events.html"
  },{
    "title": "Data types for contentHandler",
    "text": "Data types for contentHandler Blackboard Learn’s /contents endpoints accommodate different types of content by using different handlers. Use the contentHandler field of requests and responses to indicate which content handler should be used. Available contentHandlers their uses are summarized below. Supported handlers include: contentHandler ID Description Supported since resource/x-bb-document (Original) base document type, consists of rich text with an associated title(Ultra) basic content item 3000.1.0 resource/x-bb-externallink external link 3000.1.0 resource/x-bb-folder document that has child documents 3000.1.0 resource/x-bb-courselink link to a Blackboard course 3100.5.0 resource/x-bb-forumlink link to a discussion object 3100.6.0 resource/x-bb-blti-link link to an LTI object 3200.6.0 resource/x-bb-file represents a file object within Learn 3200.6.0 resource/x-bb-asmt-test-link (Ultra only) Ultra assignment or test object 3300.5.0 resource/x-bb-assignment (Original only) 3400.9.0 resource/x-bb-document Original experience: Base content type consisting of rich text with an associated title. Ultra: represents the body of an Ultra document object. It must be the child of a resource/x-bb-folder content item for which isBbPage=true. resource/x-bb-externallink Link to an external resource. It has the following properties: id (string, read-only) of the object in Blackboard Learn url (string) of the external resource resource/x-bb-folder Content item that contains child content items. It has the following properties: id (string, read-only) of the object in Blackboard Learn isBbPage (boolean) whether the object represents a page in its own right resource/x-bb-courselink Content item with a link to other objects within Blackboard Learn. It has the following properties: id (string, read-only) of the object in Blackboard Learn targetId (string) of the linked Blackboard Learn object targetType (string) is the Blackboard object type of the linked object. Possible values include: Unset CourseAssessment CourseTOC Forum Tool CollabSession (deprecated since 3000.1.0) Group BlogJournal StaffInfo ModulePage resource/x-bb-forumlink Content item with a link to a discussion object. It has the following properties: id (string, read-only) of the object in Blackboard Learn discussionId (string) for the discussion object in Blackboard Learn resource/x-bb-blti-link Representation of an LTI link within course content. It has the following properties: id (string, read-only) of the object in Blackboard Learn url (string) of the the LTI link customParameters is a map of custom parameters to POST to the specified launch URL. Learn serializes the entire custom parameters map, so you should specify all custom parameters when the map is changed. resource/x-bb-file Representation of a file uploaded to course content. id (string, read-only) of the object in Blackboard Learn file is an object with the following properties: uploadId (string, read-only) is the system-assigned ID of the uploaded file fileName (string) is the name of the file mimeType (string, read-only) is the MIME type. Blackboard Learn uses IANA standards to assign MIME type based on the filename extension. duplicateFileHandling (string, optional) used to describe behavior when a file is uploaded that duplicates an existing filename. Options include: Rename (default) causes the new file with the duplicate name to be renamed. Replace causes the new file to replace the earlier file with the same name. ThrowError causes Learn to throw an error. resource/x-bb-asmt-test-link (Ultra experience only) Representation of an assignment/test link object id (string, read-only) of the object in Blackboard Learn assessmentId (string) is the ID of the associated assessment gradeColumnId (string) is the ID of the associated grade column resource/x-bb-assignment (Original experience only) id (string, read-only) of the object in Blackboard Learn gradeColumnId (string, read only) ID of the associated grade column groupContent (boolean) specifies whether or not the content is group content.",
    "tags": "Learn REST",
    "url": "/learn/rest/advanced/contenthandler-datatypes.html"
  },{
    "title": "Course announcements on Python",
    "text": "Course announcements using Python This project will provide the Developer with sample code demonstrating how to perform the following actions, as they pertain to Blackboard Learn 9.1 Web Services: Use the Python module SUDS to ingest Blackboard WSDLs and dynamically create code to use them. Build a SOAP header with WS-Security utilizing Python and SUDS Attach the SOAP header to a SOAP Envelope to prepare a Web Service call Configure and make the following Web Service Calls: ContextWS.initialize() ContextWS.login(…) ContextWS.getMyMemberships() AnnouncementWS.initializeAnnouncementWS(…) AnnouncementWS.getCourseAnnouncements(…) ContextWS.logout() This is not meant to be a Python tutorial. It will not teach you to write code in Python. It will, however, give a Developer familiar with Python the knowledge necessary to build a Web Services integration. Glossary Term Definition Python A powerful Web Development language SUDS A Python module that facilitates the use of SOAP Web Services WSDL Web Service Definition Language - and XML document describing the endpoints, methods, and attributes associated with a given Web Service Assumptions This help topic assumes the Developer: is familiar with Python has installed Python and Suds has set up a Python development environment has a Blackboard Learn instance with Web Services enabled and a Proxy Tool created and made available on the system. Why Python and SUDS? Python is a scripting language that is very powerful. It enables a Developer to perform complex operations in just a few lines of code. In addition, Python is a widely-used Web Development language, and there are many Client and Partner Developers using it today. The SUDS Python module handles much of the complex SOAP processing for the Developer. This module takes two lines of code with a URL argument and dynamically creates all of the code necessary to interact with the Blackboard Learn Web Services. Code Walkthrough To build an integration with the Blackboard Web Services, regardless of the programming language of choice, can really be summed up in four steps: Initialize the Web Services using WS-Security Login as a Proxy Tool or Blackboard user Initialize any other services you may require Perform actions against those services. Before a Web Application can perform these actions, it is important to understand the headers. Headers The most important piece of the Learn Web Service puzzle is the SOAP Header. The header is attached to every Web Service call, and documents what method is being called and authorizes that call against the WS-Security framework. The format of the header is basically the same for every call. There is some dynamic identifiers that change from call-to-call, and of course differences in the method being called or the end-point address, but building this can really be handled with re-usable code. Specifically for this tutorial using Python with the SUDS module, this code will be using the built-in tools to generate the XML. The first step is to create the Soap Header XML. This is an example of what that header might look like:     &lt;SOAP-ENV:Header&gt;           &lt;wsa:Action&gt;initialize&lt;/wsa:Action&gt;           &lt;wsa:MessageID&gt;uuid:98d134de-b7bc-11e4-af96-14109fe5b7e1&lt;/wsa:MessageID&gt;           &lt;wsa:ReplyTo&gt;               &lt;wsa:Address&gt;http://schemas.xmlsoap.org/ws/2004/0...role/anonymous&lt;/wsa:Address&gt;           &lt;/wsa:ReplyTo&gt;           &lt;wsa:To&gt;https://localhost:9887/webapps/ws/services/Context.WS&lt;/wsa:To&gt;           &lt;wsse:Security xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/...tility-1.0.xsd\"                                                                         SOAP-ENV:mustUnderstand=\"1\"&gt;                &lt;wsse:UsernameToken xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/...tility-1.0.xsd\"                                         wsu:Id=\"SecurityToken-98d247b5-b7bc-11e4-bb99-14109fe5b7e1\"&gt;                   &lt;wsse:Username&gt;session&lt;/wsse:Username&gt;                   &lt;wsse:Password               Type=\"http://docs.oasis-open.org/wss/2004/...0#PasswordText\"&gt;nosession&lt;/wsse:Password&gt;                   &lt;wsse:Nonce&gt;891246152278172331825375&lt;/wsse:Nonce&gt;                   &lt;wsu:Created&gt;2015-02-18 22:22:17.361215&lt;/wsu:Created&gt;               &lt;/wsse:UsernameToken&gt;               &lt;wsu:Timestamp wsu:Id=\"Timestamp-98d2457d-b7bc-11e4-a804-14109fe5b7e1\"/&gt;           &lt;/wsse:Security&gt;       &lt;/SOAP-ENV:Header&gt; At first glance, it looks a bit daunting, but Python makes it pretty easy. In this code, building the header XML is handled with two methods. The first is called createHeaders and takes an action, an endpoint, the username, and the password as arguments. NOTE: This is not the Blackboard User login, but rather a specific login associated with WS-Security. The first step is to add the action tag. This corresponds to the action argument passed to the createHeaders() method. The value of this tag should be set equal to the method this SOAP Envelope will be passed to. In the example above, this SOAP-ENV will be passed to the ContextWS.initialize() Web Service, so the action is set to ‘initialize’.     wsa_action = Element('Action', ns=wsa_ns).setText(action) The next tag we add is the MessageId. This is a unique identifier tied to this specific SOAP envelope. To generate this identifier, the sample code uses the built-in Python method uuid.uuid1().     wsa_uuid = Element('MessageID', ns=wsa_ns).setText('uuid:' + str(uuid1())) To add the ReplyTo and Address Tags, we must first build the address and then add it to the ReplyTo tag. This is done in a straight-forward manner.     wsa_address = Element('Address', ns=wsa_ns).setText('http://schemas.xmlsoap.org/ws/2004/0...role/anonymous')       wsa_replyTo = Element('ReplyTo', ns=wsa_ns).insert(wsa_address) Adding the To tag is also straight-foward.     wsa_to = Element('To', ns=wsa_ns).setText(url_header + endpoint) Now we must add the WS-Security bits. This is the methodology that keeps each session secure. The following code adds the wsse:Security tag at the same level as the above elements.     security = Element('Security', ns=wsse)     security.set('SOAP-ENV:mustUnderstand', '1') The contents of the Security headers is what allows a Web Service call to be authorized to take an action against the Learn API. It is imperative that this section is formatted correctly and includes the appropriate information. NOTE: The rest of the Security headers must be included in a specific order. The Element.insert() method always inserts at the top of the list, so while the code creates the tags in the order it needs to be included, it actually inserts them in reverse order. The first time the Web Services are called, the webapp must call ContextWS.initialize() and the WS-Security header must include the username ‘session’ and the password ‘nosession’. The result of this call will be a session ID. From that point forward, the WS-Security header will contain username ‘session’ and the password must be set to the session ID returned in the initialize call. This must be included in all Web Service calls. In addition, the webapp must include a timestamp tag. In this sample, the Timestamp is left empty, but typically, it would include a created tag containing the date and time the web service call is initiated, as well as an expires tag, that contains the date and time the session should expire. If included, this time must be within 5 minutes of the time set on the Learn server, or the API call will fail. All times should be in UTC format. SUDS does include a WS-Security module, but it is not flexible enough to allow this script to format things as needed, so the security headers are built dynamically     usernametoken = Element('UsernameToken', ns=wsse)     usernametoken.set('xmlns:wsu', 'http://docs.oasis-open.org/wss/2004/...tility-1.0.xsd')     usernametoken.set('wsu:Id', 'SecurityToken-' + str(uuid1()))         uname = Element('Username', ns=wsse).setText(username)     passwd = Element('Password', ns=wsse).setText(password)     passwd.set('Type', 'http://docs.oasis-open.org/wss/2004/...0#PasswordText')     nonce = Element('Nonce', ns=wsse).setText(str(generate_nonce(24)))     created = Element('Created', ns=wsu).setText(str(datetime.utcnow()))     usernametoken.insert(created     usernametoken.insert(nonce)     usernametoken.insert(passwd)     usernametoken.insert(uname)     security.insert(usernametoken)     timestamp = Element('Timestamp', ns=wsu)     timestamp.set('wsu:Id','Timestamp-' + str(uuid1()))     security.insert(timestamp) The SOAP headers have now been created dynamically in just a few lines of re- usable code. The only thing left to do is to add the headers to our Web Service Client, by calling the SoapClient’s set_options() method. The headers are passed as the soapheaders option, and the default port is set to one of the available ports identified in the Web Service WSDL file provided by Blackboard. There are four ports, mapped to the version of SOAP and the protocol being used. This sample code assumes SOAP 1.2 and SSL. Initialize the Web Services Using WS-Security Thanks to the inclusion of SUDS and the introduction of re-usable code to handle the header generation, a web application really only needs four lines of code to make a service call.     # returns [wsa_action, wsa_uuid, wsa_replyTo, wsa_to, security]     headers = createHeaders('initialize', 'session', 'nosession', 'Context.WS')     contextWS.set_options(soapheaders=headers, port='Context.WSSOAP12port_https') The last thing to do is to call the method. The SUDS Python module does all the work for the application automatically. All the this Python script has to do is call the service method.     sessionId = contextWS.service.initialize() In just a handful lines of code, the application has authenticated against the Blackboard Learn Web Services and created a secure session. From this point forward, the code will just use this same code pattern to call additional services and send and receive messages. Login as a Proxy Tool or Blackboard User The ContextWS.initialize() method returns the sessionID, as demonstrated in the previous section. The next step in the process is to login as either a Blackboard user or a Proxy Tool. In this sample code, the application logs in as the Administrator user on the Developer Virtual Machine.     headers = createHeaders('login', 'session', sessionId, 'Context.WS')     contextWS.set_options(soapheaders=headers, port='Context.WSSOAP12port_https')     loggedIn = contextWS.service.login(\"administrator\", \"password\", \"bb\", \"blackboard\", \"\", 3600) One important thing to note is the in the createHeaders() call is two-fold: the action is set to ‘login’ to denote the new method call being made, and the password is no longer ‘nosession’. It is now set to sessionId, the return value from the initialize call. If logging in as user, it is important to note that the Blackboard Learn Web Services only support RDBMS authentication. If the Learn system is configured to authenticate against an external services, such as Active Directory, LDAP, or CAS, the application should login as a Proxy Tool Initialize Any Other Services Required In this case, the application is pulling Course Announcements. As such, the AnnouncementWS service must be initialized.     headers = createHeaders('initializeAnnouncementWS', 'session', sessionId, 'Announcement.WS')     announcementWS.set_options(soapheaders=headers, port='Announcement.WSSOAP12port_https')     annInit = announcementWS.service.initializeAnnouncementWS(False) This application has now initialized the ContextWS and the AnnouncementWS SoapClients. These two Web Service end points can now be called successfully. Perform Actions Against Those Services For the purposes of this tutorial, the application must retrieve a list of courses for the logged in user, and then pull course announcements for each course. As has been the case throughout this tutorial, Python and SUDS combine to make this very simple. First, the application needs the Course Memberships.     headers = createHeaders('getMyMemberships', 'session', sessionId, 'Context.WS')     contextWS.set_options(soapheaders=headers, port='Context.WSSOAP12port_https')     myMemberships = contextWS.service.getMyMemberships() The getMyMemberships() method returns a list containing Course and Organization IDs, in the form of the pk1. This is the value needed going forward, so the next step is to retrieve each pk1 and retrieve the announcements for that course.     headers = createHeaders('getCourseAnnouncements', 'session', sessionId, 'Announcement.WS')     announcementWS.set_options(soapheaders=headers, port='Announcement.WSSOAP12port_https')     for membership in myMemberships:          externalId = membership.externalId          annFilter = announcementWS.factory.create('ns4:AnnouncementAttributeFilter')          annFilter.filterType = '2'          annFilter.startDate = '0'          annFilter.userId = \"\"          announcements = announcementWS.service.getCourseAnnouncements(str(externalId),annFilter) The annFilter variable above looks a little different. The getCourseAnnouncements() method requires a Complex data type. The SUDS module provides a utility for creating that type called .factory, as listed in the sample code. Once it has been created, using it is as simple as .&lt;property = . The application has now looped through the course list and pulled back all announcements. These could be displayed in a new portal, added to a queue to be sent to an archive, or anything else one might require. The last step is to logout to invalidate the sessionId currently in use and prevent Cross-Site Scripting or Session hijacking. This will look familiar. ~~~ python     headers = createHeaders( 'logout' , 'session' , sessionId)     contextWS.set_options(soapheaders=headers, port= 'Context.WSSOAP12port_https' )     loggedOut = contextWS.service.logout() ~~~ ### Conclusion All of the code snippets included in this document are included in a sample Python module available on [GitHub](https://github.com/blackboard/BBDN-Web-Service-Python-Sample-Code). There is a README.html included that talks more specifically about building and running the code. Feel free to review the code and run it against a test or development Learn instance to see how it works.",
    "tags": "Learn soap",
    "url": "/learn/soap/examples/course-announcements-using-python.html"
  },{
    "title": "Course Group Events",
    "text": "Course Group Events Blackboard Learn’s Caliper Analytics stream emits a CourseGroupEvent whenever an instructor creates, updates, or deletes a group in a course. Here is some of the key data that is associated with these events: CourseGroupEvent extensions - contains bb:group.users with list of course membership ids in the group action - Created or Modified or Deleted Sample Payload Here is a sample of what a payload might look like: { \"sensor\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"sendTime\": \"2021-01-05T09:37:13.827Z\", \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"data\": [ { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/CourseGroupEvent\", \"id\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a1165a247b9044dc9730620872d11788\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"action\": \"Created\", \"object\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/a3fe89604fc6437ea381979569cd6d81/groups/_12345_1\", \"type\": \"Group\", \"extensions\": { \"bb:group.name\": \"Team 2\" }, \"subOrganizationOf\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/a3fe89604fc6437ea381979569cd6d81\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"members\": [] }, \"eventTime\": \"2021-01-05T09:37:09.585Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"group\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/a3fe89604fc6437ea381979569cd6d81/groups/_12345_1\", \"type\": \"Group\", \"extensions\": { \"bb:group.name\": \"Team 2\" }, \"subOrganizationOf\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/a3fe89604fc6437ea381979569cd6d81\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"members\": [] }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/a3fe89604fc6437ea381979569cd6d81/members/a1165a247b9044dc9730620872d11788\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_12345_1\", \"bb:course.externalId\": \"BIO-101\", \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a1165a247b9044dc9730620872d11788\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/a3fe89604fc6437ea381979569cd6d81\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"roles\": [], \"status\": \"Active\" }, \"federatedSession\": { \"startedAtTime\": \"2021-01-05T09:37:09.585Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/10497B7377117FFD7B5FD7D3EE58227E\", \"type\": \"LtiSession\", \"name\": \"10497B7377117FFD7B5FD7D3EE58227E\", \"dateCreated\": \"2021-01-05T09:37:09.585Z\", \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a1165a247b9044dc9730620872d11788\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } } }, \"extensions\": {}, \"session\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/10497B7377117FFD7B5FD7D3EE58227E\", \"type\": \"Session\" } } ] }",
    "tags": "Standards",
    "url": "/standards/caliper/events/course-group-events.html"
  },{
    "title": "Roles and membership with C#",
    "text": "Get CourseMembership and Role with SOAP and C# This project will provide the Developer with sample code demonstrating how to perform the following actions, as they pertain to Blackboard Learn 9.1 Web Services: Use the .NET Sample Library code included in Blackboard Learn 9.1 to write a custom integration with C#. Configure and make the following Web Service Calls: ContextWS.initialize() ContextWS.registerTool(…) ContextWS.loginTool(…) ContextWS.login(…) ContextWS.getMyMemberships() ContextWS.logout() CourseWS.initializeCourseWS(…) CourseWS.loadCourses(…) CourseMembershipWS.initializeCourseMembershipWS(…) CourseMembershipWS.loadCourseMembership(…) UserWS.initializeUserWS(…) UserWS.getUser(…) This is not meant to be a C# tutorial. It will not teach you to write code in .NET. It will, however, give a Developer familiar with C# the knowledge necessary to build a Web Services integration. Assumptions This help topic assumes the Developer: is familiar with C# has installed built the .NET Sample Library and has access to BbWsClient.dll has set up a Visual Studio development environment has a Blackboard Learn instance with Web Services enabled. Code Walkthrough To build an integration with the Blackboard Web Services, regardless of the programming language of choice, can really be summed up in four steps: Initialize the Web Services using WS-Security Login as a Proxy Tool or Blackboard user Initialize any other services you may require Perform actions against those services. Initialize the Web Services using WS-Security The most complicated part of the entire process is the authentication process. Essentially, the Web Service client must call ContextWS.initialize() and in the headers of that call, create a WS-Security (wsse) envelope. In the wsse envelope, the username must be set to session and the password must be set to nosession. This will return a session id, that is then added into all subsequent calls until the session ends. The .NET sample library handles all of this for you in two lines of code: // Initialize and configure web service wrapper ws = new WebserviceWrapper(host, vendor, program, EXPECTED_LIFE);  // Context.WS initialize to establish session and get session Id ws.initialize_v1(); At this point, the Web Service client will need a proxy tool in Blackboard Learn and it must be set as available by the Blackboard Learn System Administrator. The System Administrator can register a Proxy Tool through the User Interface, or the application developer can register the Proxy Tool via the ContextWS.registerTool() method as seen below: RegisterToolResultVO result = ws.registerTool(\"Blackboard Developer Experience C-Sharp Sample Tool\",                                          regpass, secret, tools, tickets); See the registerTool() method in Program.cs for more details. Login as a Proxy Tool or Blackboard User Logging in either as a Blackboard User or a registered proxy tool is equally simple, with the sample library performing all the heavy lifting on your behalf. if(logintype.Equals(\"tool\")) {      // Login as proxy Tool      loggedIn = ws.loginTool(secret); } else {      // Login as user      loggedIn = ws.loginUser(username,userpass); } One important thing to note is behind the scenes, the wsse password is no longer ‘nosession’. It is now set to sessionId, the return value from the initialize call. NOTE: If logging in as user, it is important to note that the Blackboard Learn Web Services only support RDBMS authentication. If the Learn system is configured to authenticate against an external services, such as Active Directory, LDAP, or CAS, the application should login as a Proxy Tool Initialize Any Other Services Required In this sample code, all Web Services are initialized at once in a method called initWrappers(). Initializing the wrapper objects in the .NET sample library calls the web services’ initialize SOAP methods. static void initWrappers() {      // Initialize the wrappers used for this sample.      ctx = ws.getContextWrapper();      crs = ws.getCourseWrapper();      crm = ws.getCourseMembershipWrapper();      usr = ws.getUserWrapper(); } This application has now initialized the ContextWS, CourseWS, CourseMembershipWS, and UserWS Web Services. These two Web Service end points can now be called successfully. Perform Actions Against Those Services For the purposes of this tutorial, the application must retrieve a list of courses for the specified user, and then pull the user object for that specified user, and then use that data to load each course and course membership. . First, the application needs the Course Memberships. CourseIdVO [] courses = ctx.getMemberships(courseuser); The getMyMemberships() method returns a list containing Course and Organization IDs, in the form of the pk1. In addition to the course pk1 value, the code also needs to retrieve the user object so the user pk1 is also available. // Initialize a user filter, set to get user by username and availability. UserFilter uf = new UserFilter(); uf.filterType = 6;                            // Load user by user name uf.filterTypeSpecified = true; uf.name = new string[] { courseuser }; // Get the user object UserVO [] user = usr.getUser(uf); Once the course and user pk1 values have been created, the code can loop through the courses array and load the course object based on course pk1. CourseFilter cf = new CourseFilter(); cf.filterType = 3;                            // Load courses by course pk1 cf.filterTypeSpecified = true; cf.ids = new string[] { courseId };  CourseVO[] course = crs.loadCourses(cf); With the course object returned, the application now requests the course membership object based on the course pk1 and user pk1. MembershipFilter mf = new MembershipFilter();  mf.filterType = 6;                                    // Load by course pk1 and user pk1 mf.filterTypeSpecified = true; mf.userIds = new string[] { user[0].id }; mf.courseIds = new string[] { courseId };  CourseMembershipVO[] memberships = crm.loadCourseMembership(courseId, mf); Conclusion All of the code snippets included in this document at included in a sample C# application available on GitHub. There is a README.html included that talks more specifically about building and running the code. Feel free to review the code and run it against a test or development Learn instance to see how it works.",
    "tags": "Learn soap",
    "url": "/learn/soap/examples/course-membership-and-role-csharp.html"
  },{
    "title": "Course, User, and Enrollment Data",
    "text": "Course, User, and Enrollment Data This tutorial will show you how to retrieve and save user information using various methods throughout the user interface. Loading user information from the context A new utility API was added in version 7.2 that allows even easier access to the Blackboard context from inside your Building Block. It is located in blackboard.platform.context.ContextManagerFactory. An example of how to use this API to load user information follows: //initializes context ContextManagerFactory.getInstance().setContext(request); //retrieves the users first name, you can get any parameter from blackboard.data.user.User from the getUser() method. String firstName = ContextManagerFactory.getInstance().getContext().getUser().getGivenName(); Loading user information by using the UserSearch API The UserSearch API located in blackboard.persist.user.UserSearch can be used to search for specific users that exist within Blackboard. An example of how to use this API follows: //Creates and initializes a new user search UserSearch us = UserSearch.getNameSearch( UserSearch.SearchKey.UserName, SearchOperator.Equals, \"administrator\" ); //Gets a list of users who match (note: the above search will only return one user) List users = UserDbLoader.Default.getInstance().loadByUserSearch(us); //Iterate through users Search keys exist to search by name, e-mail, system role, username, and enrollment count. Search operators exist for search methods including equals, contains, like, greater than, less than, is null, starts with, and others. These are documented in the API Javadocs located in the Documentation section of this web site. Getting a role To retrieve a persons role within a course, simply use the following code: CourseMembership existing = null; try { existing = CourseMembershipDbLoader.Default.getInstance().loadByCourseAndUserId(courseCode, personCode); } catch (KeyNotFoundException e) { } catch (PersistenceException e) { log.severe(\"BlackboardRole.add: Check on role for \" + courseCode + \" \" + personCode + \" failed. \" + e.getMessage()); } Adding Roles Allocation of a role Here is a basic example that will get you going. It is all you need. You can use this code to associate any person with any subject with any role. CourseMembership newRole = new CourseMembership(); /* Specify which role to allocate */ newRole.setRole(CourseMembership.Role.STUDENT); /* You could also use one of these: newRole.setRole(CourseMembership.Role.INSTRUCTOR); newRole.setRole(CourseMembership.Role.GRADER); newRole.setRole(CourseMembership.Role.COURSE_BUILDER); newRole.setRole(CourseMembership.Role.TEACHING_ASSISTANT); */ /* Specify the course batch uid, and person batch uid */ newRole.setCourseId(\"JACOB101\"); newRole.setUserId(\"jrhoden\"); /* Now simply persist the role to the database */ try { CourseMembershipDbPersister.Default.getInstance().persist(newRole); log.fine(\"BlackboardRole.add: Success \" + role2.subjectCode + \" \" + role2.username + \" \" + role2.role); } catch (Exception e) { log.severe(\"Problem adding role: Failed \" + role2.subjectCode + \" \" + role2.username + \" \" + role2.role + \". \" + e.getMessage()); return false; } However this code does not handle very well when there is a problem. For example you may only insert one role, per person, per course. You probably want something a bit more sophisticated which first checks for a current role before inserting. Sophisticated allocation of a role The following example is what we use for our blackboard server. It attempts to neatly handle exceptions. public static boolean add(String courseCode, String personCode, String role) { CourseMembership newRole = new CourseMembership(); /* First we set the specified role */ try { if(role.equals(\"student\")) newRole.setRole(CourseMembership.Role.STUDENT); else if(role.equals(\"primary_coordinator\")) newRole.setRole(CourseMembership.Role.INSTRUCTOR); else if(role.equals(\"secondary_coordinator\")) newRole.setRole(CourseMembership.Role.INSTRUCTOR); else if(role.equals(\"marker\")) newRole.setRole(CourseMembership.Role.GRADER); else if(role.equals(\"designer\")) newRole.setRole(CourseMembership.Role.COURSE_BUILDER); else if(role.equals(\"tutor\")) newRole.setRole(CourseMembership.Role.TEACHING_ASSISTANT); else { log.fine(\"BlackboardRole.add: Failed. Invalid role: \" + role); return false; } } catch(java.lang.IllegalArgumentException e) { log.severe(\"BlackboardRole.add: Failed on course \" + courseCode + \" adding \" + personCode + \" as \" + role + \". \" + e.getMessage()); return false; } /* Check that the specified course exists */ try { course = CourseSiteLoader.Default.getInstance().load(courseCode); } catch(blackboard.persist.PersistenceException e){ log.severe(\"BlackboardRole.add: Could not find course: \" + courseCode + \" \" + e.getMessage()); return false; } /* Check the specified person exists */ try { person = PersonLoader.Default.getInstance().load(personCode); } catch(blackboard.persist.PersistenceException e){ log.severe(\"BlackboardRole.add: Could not find person: \" + personCode + \" \" + e.getMessage()); return false; } newRole.setCourseId(course.getId()); newRole.setUserId(person.getId()); /* Check if the person already has a role in this course */ try { CourseMembership existing = CourseMembershipDbLoader.Default.getInstance().loadByCourseAndUserId( course.getId(), person.getId()); if(existing.getRole()==newRole.getRole()) { log.fine(\"BlackboardRole.add: Silently ignoring message. \" + person.getId() + \" already has this role in \" + course.getId() + \".\"); return true; } log.warning(\"BlackboardRole.add: Overriding existing role for \" + person.getId() + \" in \" + course.getId() + \".\"); /* Person already has a role in this course, we will update the current role and issue a warning */ existing.setRole(newRole.getRole()); try { CourseMembershipDbPersister.Default.getInstance().persist(existing); } catch (ValidationException e) { log.warning(\"BlackboardRole.add: Overriding existing role for \" + person.getId() + \" in \" + course.getId() + \" failed. \" + e.getMessage()); return false; } return false; } catch (KeyNotFoundException e) { } catch (PersistenceException e) { log.severe(\"BlackboardRole.add: Check on role for \" + courseCode + \" \" + personCode + \" failed. \" + e.getMessage()); return false; } /* If the person has no role, we now persist the role */ try { CourseMembershipDbPersister.Default.getInstance().persist(newRole); log.fine(\"BlackboardRole.add: Success \" + courseCode + \" \" + personCode + \" \" + role); } catch (Exception e) { log.severe(\"Problem adding role: Failed \" + courseCode + \" \" + personCode + \" \" + role + \". \" + e.getMessage()); return false; } return true; }",
    "tags": "Learn b2",
    "url": "/learn/b2/examples/course-user-and-enrollment-data.html"
  },{
    "title": "Creating Database Objects with Building Blocks",
    "text": "Creating Database Objects with Building Blocks With Release 9.1, Blackboard included the ability for Building Blocks to define schema elements in the .war file that would get automatically installed and managed in the Learn database schema. However, that feature was limited to Building Blocks that were signed and distributed by Blackboard. As of 9.1 Service Pack 1 (R9.1SP1), that “sign-gating” restriction has been lifted. Building Blocks authored by independent developers can define and install schema elements via special configuration files referenced from their manifest. In some ways, this was in recognition of the fact that Building Blocks frequently created custom schema objects directly. By enabling it as a feature allows system admins to get more visibility into the process, and ensure some level of consistency. It should be noted that this is not on by default - Administrators must enable this functionality from the Building Blocks management section of the admin panel. The allowed schema actions are specified from the “Global Settings” screen, including: Prevent any Building Block from creating custom database objects Prompt each time a Building Block wants to create custom database objects Allow any Building Block to create custom database objects Also note that these options are not enforced for Blackboard-authored, signed Building Blocks - that would disrupt the operation of some key features, such as the Wiki, that are delivered via Building Blocks. The first option is the default - no schema may be installed. The second option prompts the administrator - previewing the tables/objects that would be created. The third option simply processes the objects, without prompting the admin. That option is only recommended for development, in order to facilitate rapid iteration. In practice, we expect most administrators to choose “prompt”, and then only after attempting to install a Building Block and seeing the error message. With great power comes great responsibility - there are a few things to keep in mind when designing the schema using this mechanism: Database objects must be prefixed with the vendor-id in the B2 manifest (the B2 installer will complain if the prefixes do not match). Minimize your dependency on Blackboard objects If you do need to link to a Blackboard database object, ensure that the relationship does not interfere with standard Blackboard processing - you must specify an on-delete action (cascade or setnull) The Blackboard schema is not an officially supported integration API, and will change from release to release. Test test test - if you do reference a core entity, such as a course or user, make sure you can still delete that entity Getting Started The schema is defined primarily via a file called schema.xml, which is part of a directory structure that also defines various SQL scripts - procedures, functions, views, etc. One or more schema definition directories are referenced via the schema-dirs element in the manifest, as follows: &lt;schema-dirs&gt; &lt;schema-dir dir-name=\"test\"/&gt; &lt;schema-dir dir-name=\"statstest\" database=\"stats\"/&gt; &lt;/schema-dirs&gt; The dir-name attribute is evaluated first against the webapp root, then against WEB-INF. The schema.xml should be in that directory; all other scripts are in sub-directories. The database attribute indicates which schema the objects should be created in. By default, the objects are created in the transactional schema - so if you are creating tables to support the day-to-day features of your Building Block, you would not need to define this value. Tables and other objects can also be created in the reporting schema by using the value “stats”. As of R9.1SP1, there are no other supported values. See Schema Definitions for more information on the structure of schema.xml, the containing directory structure, and the supporting scripts. Next Steps Take a look at Tutorial - Schema.XML for an in-depth look and working example using schema.xml to store building block configuration details in a custom database table.",
    "tags": "Learn b2",
    "url": "/learn/b2/opendb/creating-database-objects.html"
  },{
    "title": "C# Demo",
    "text": "C# Demo The rest demo script demonstrates authenticating a REST application, management and use of the authorization token, and creating, updating, discovering, and deleting supported Learn objects Prerequisites You must register a developer account and application in the Developer Portal You must register your application in Blackboard Learn You must also configure the script as outlined in the README for the project Overview This C# Console Application allows you to: Authenticate Create, Read, and Update a Data Source Create, Read, and Update a Term Create, Read, and Update a Course Create, Read, and Update a User Create, Read, and Update a Membership Delete created objects in reverse order of create - membership, user, course, term, datasource. All generated output is sent to the console. This is not meant to be a C# tutorial. It will not teach you to write code in C#. It will, however, give a Developer familiar with C# the knowledge necessary to build a Web Services integration. Assumptions This help topic assumes the Developer: is familiar with C# has installed Microsoft Visual Studio has obtained a copy of the source code and built it in conjunction with the project README.md file. has a REST-enabled Blackboard Learn instance, like the Developer AMI. Code Walkthrough To build an integration with the Blackboard REST Web Services, regardless of the programming language of choice, can really be summed up in two steps: Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the Basic Authentication document. Call the appropriate REST endpoint with the appropriate data to perform the appropriate action. Authorization and Authentication The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A request is made to the token endpoint with a Basic Authorization header containing the base64-encoded key:secret string as its key. The token service returns a JSON object containing the Access Token, the Token Type, and the number of seconds until the token expires. The token is set to expire after one hour, and subsequent calls to retrieve the token will return the same token with an updated expiry time until such time that the token has expired. There is no refresh token and currently no revoke token method. The C# code handles this in bbdn.rest.Authorizer: var authData = string.Format (\"{0}:{1}\", Constants.KEY, Constants.SECRET); var authHeaderValue = Convert.ToBase64String (Encoding.UTF8.GetBytes (authData)); client = new HttpClient (); var endpoint = new Uri(Constants.HOSTNAME + Constants.AUTH_PATH); client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue (\"Basic\", authHeaderValue); var postData = new List&lt;KeyValuePair&lt;string, string&gt;&gt;(); postData.Add(new KeyValuePair&lt;string, string&gt;(\"grant_type\", \"client_credentials\")); HttpContent body = new FormUrlEncodedContent(postData); HttpResponseMessage response; try {   response = await client.PostAsync(endpoint, body)     if (response.IsSuccessStatusCode)     {          var content = await response.Content.ReadAsStringAsync();           token = JsonConvert.DeserializeObject&lt;Token&gt;(content); The JSON response is serialized into the Token object, and you may then retrieve those values from that object. Calling Services The individual service calls are handled by C# Classes in the bbdn.rest.services package, and each individual service class implements the bbdn.rest.services.IRestService interface. The interface is used to normalize each service handler to make additional service implementation standardized as new endpoints are added. IRestService dictates that four methods must be implemented: Task CreateObject (TRestModel T); Task ReadObject (); Task UpdateObject (TRestModel T); Task DeleteObject (); The Task&lt;TRestModel&gt; allows the code to run asynchronously, but specify when an operation should be handled synchronously before proceeding with the remaining code. TRestModel is a generic class place holder that allows the code to implement the Interface, but pass it an Object type when it is instantiated in order to take and return an individual service model dependent upon the Rest endpoint being implemented. The individual service class must be defined in the following way, to ensure the Interface is using the appropriate class type for TRestModel: public class DatasourceService : IRestService&lt;Datasource&gt;, IDisposable Each of these methods creates the JSON body by instantiating the appropriate model from the bbdn.rest.models package when necessary, and then generates the appropriate HTTP Request, ships it to Learn, and serializes the JSON response back into the appropriate model. End points are generally defined as /learn/api/public/v1/&lt;object type&gt;/&lt;objectId&gt;. Object ID can be either the pk1, like _1_1, or as the batchuid. This value should be prepended by externalId:, like externalId:test101. For example, to retrieve a course by the pk1 _1_1, you would call GET /learn/api/public/v1/courses/_1_1. To retrieve by the batchuid test101, you would call GET /learn/api/public/v1/courses/externalId:test101. Create is sent to Learn as a HTTP POST message with a JSON body that defines the object. The endpoint should omit the objectId, as this will be generated on creation. Read is sent to Learn as a HTTP GET message with an empty body. The endpoint should include the objectId being retrieved. Update is sent to Learn as a HTTP PATCH message with a JSON body that defines the object. The endpoint should include the objectId being updated. Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint should include the objectId being deleted. Datasources Datasources are handled in bbdn.rest.services.DatasourceService. As illustrated above, this Class implements the IRestService interface and exposes four methods. It also includes methods required to implement the IDisposible interface which is required to use the async/await functionality.. Create public async Task&lt;Datasource&gt; CreateObject (Datasource dataSource) {        Datasource datasource = new Datasource();        var uri = new Uri( Constants.HOSTNAME + Constants.DATASOURCE_PATH);        try {             var json = JsonConvert.SerializeObject (dataSource);             var body = new StringContent (json, Encoding.UTF8, \"application/json\");             HttpResponseMessage response = await client.PostAsync (uri, body);                if (response.IsSuccessStatusCode) {                  var content = await response.Content.ReadAsStringAsync ();                  datasource = JsonConvert.DeserializeObject &lt;Datasource&gt; (content);                  Debug.WriteLine (@\" Datasource successfully created.\");             }        } catch (Exception ex) {             Debug.WriteLine (@\" ERROR {0}\", ex.Message);            }        return datasource; } Read public async Task&lt;Datasource&gt; ReadObject () {   Datasource datasource = new Datasource();   var uri = new Uri(Constants.HOSTNAME + Constants.DATASOURCE_PATH + \"/externalId:\" + Constants.DATASOURCE_ID);   try {        var response = await client.GetAsync (uri);        if (response.IsSuccessStatusCode) {             var content = await response.Content.ReadAsStringAsync ();             datasource = JsonConvert.DeserializeObject&lt;Datasource&gt;(content);            }   } catch (Exception ex) {   Debug.WriteLine (@\" ERROR {0}\", ex.Message);   }   return datasource; } Update public async Task&lt;Datasource&gt; UpdateObject (Datasource updateDataSource) {        Datasource datasource = new Datasource();        try {             var json = JsonConvert.SerializeObject (updateDataSource);             var body = new StringContent (json, Encoding.UTF8, \"application/json\");             HttpResponseMessage response =  await HttpClientExtensions.PatchAsync (client, Constants.HOSTNAME + Constants.DATASOURCE_PATH + \"/externalId:\" + Constants.DATASOURCE_ID, body);             if (response.IsSuccessStatusCode) {                  Debug.WriteLine (@\" Datasource successfully updated.\");                  var content = await response.Content.ReadAsStringAsync();                  datasource = JsonConvert.DeserializeObject&lt;Datasource&gt;(content);             }        } catch (Exception ex) {             Debug.WriteLine (@\" ERROR {0}\", ex.Message);        }        return (datasource); } Delete public async Task&lt;Datasource&gt; DeleteObject () {        Datasource datasource = new Datasource();        var uri = new Uri(Constants.HOSTNAME + Constants.DATASOURCE_PATH + \"/externalId:\" + Constants.DATASOURCE_ID);        try {             var response = await client.DeleteAsync (uri);             if (response.IsSuccessStatusCode) {                  Debug.WriteLine (@\" Datasource successfully deleted.\");                  var content = await response.Content.ReadAsStringAsync();                  datasource = JsonConvert.DeserializeObject&lt;Datasource&gt;(content);             }        } catch (Exception ex) {             Debug.WriteLine (@\" ERROR {0}\", ex.Message);        }        return (datasource); } Terms Terms are handled in bbdn.rest.services.TermService. As illustrated above, this Class implements the IRestService interface and exposes four methods. It also includes methods required to implement the IDisposible interface which is required to use the async/await functionality.. Create         public async Task&lt;Term&gt; CreateObject(Term newTerm)         {                  Term term = new Term();                  var uri = new Uri(Constants.HOSTNAME + Constants.TERM_PATH);                  try                  {                      var json = JsonConvert.SerializeObject(newTerm);                      var body = new StringContent(json, Encoding.UTF8, \"application/json\");                      HttpResponseMessage response = await client.PostAsync(uri, body);                      if (response.IsSuccessStatusCode)                      {                          var content = await response.Content.ReadAsStringAsync();                          term = JsonConvert.DeserializeObject&lt;Term&gt;(content);                          Debug.WriteLine(@\" Term successfully created.\");                      }                  }                  catch (Exception ex)                  {                      Debug.WriteLine(@\" ERROR {0}\", ex.Message);                  }                  return term;         } Read public async Task&lt;Term&gt; ReadObject() {             Term term = new Term();             var uri = new Uri(Constants.HOSTNAME + Constants.TERM_PATH + \"externalId:\" + Constants.TERM_ID);             try             {                 var response = await client.GetAsync(uri);                 if (response.IsSuccessStatusCode)                 {                     var content = await response.Content.ReadAsStringAsync();                     term = JsonConvert.DeserializeObject&lt;Term&gt;(content);                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return term; } Update         public async Task&lt;Term&gt; UpdateObject(Term updateTerm)         {             Term term = new Term();             try             {                 var json = JsonConvert.SerializeObject(updateTerm);                 var body = new StringContent(json, Encoding.UTF8, \"application/json\");                 HttpResponseMessage response = await HttpClientExtensions.PatchAsync(client, Constants.HOSTNAME + Constants.TERM_PATH + \"externalId:\" + Constants.TERM_ID, body);                 if (response.IsSuccessStatusCode)                 {                     Debug.WriteLine(@\" Term successfully updated.\");                     var content = await response.Content.ReadAsStringAsync();                     term = JsonConvert.DeserializeObject&lt;Term&gt;(content);                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return (term);         } Delete         public async Task&lt;Term&gt; DeleteObject()         {             Term term = new Term();             var uri = new Uri(Constants.HOSTNAME + Constants.TERM_PATH + \"externalId:\" + Constants.TERM_ID);             try             {                 var response = await client.DeleteAsync(uri);                 if (response.IsSuccessStatusCode)                 {                     Debug.WriteLine(@\" Term successfully deleted.\");                     var content = await response.Content.ReadAsStringAsync();                     term = JsonConvert.DeserializeObject&lt;Term&gt;(content);                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return (term);         } Courses Course are handled in bbdn.rest.services.CourseService. As illustrated above, this Class implements the IRestService interface and exposes four methods. It also includes methods required to implement the IDisposible interface which is required to use the async/await functionality.. Create         public async Task&lt;Course&gt; CreateObject(Course newCourse)         {             Course course = new Course();             var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH);             try             {                 var json = JsonConvert.SerializeObject(newCourse);                 var body = new StringContent(json, Encoding.UTF8, \"application/json\");                 HttpResponseMessage response = await client.PostAsync(uri, body);                 if (response.IsSuccessStatusCode)                 {                     var content = await response.Content.ReadAsStringAsync();                     course = JsonConvert.DeserializeObject&lt;Course&gt;(content);                     Debug.WriteLine(@\" Course successfully created.\");                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return course;         } Read         public async Task&lt;Course&gt; ReadObject()         {             Course course = new Course();             var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + \"/externalId:\" + Constants.COURSE_ID);             try             {                 var response = await client.GetAsync(uri);                 if (response.IsSuccessStatusCode)                 {                     var content = await response.Content.ReadAsStringAsync();                     course = JsonConvert.DeserializeObject&lt;Course&gt;(content);                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return course;         } Update         public async Task&lt;Course&gt; UpdateObject(Course updateCourse)         {             Course course = new Course();             try             {                 var json = JsonConvert.SerializeObject(updateCourse);                 var body = new StringContent(json, Encoding.UTF8, \"application/json\");                 HttpResponseMessage response = await HttpClientExtensions.PatchAsync(client, Constants.HOSTNAME + Constants.COURSE_PATH + \"/externalId:\" + Constants.COURSE_ID, body);                 if (response.IsSuccessStatusCode)                 {                     Debug.WriteLine(@\" Course successfully updated.\");                     var content = await response.Content.ReadAsStringAsync();                     course = JsonConvert.DeserializeObject&lt;Course&gt;(content);                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return (course);         } Delete         public async Task&lt;Course&gt; DeleteObject()         {             Course course = new Course();             var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + \"/externalId:\" + Constants.COURSE_ID);             try             {                 var response = await client.DeleteAsync(uri);                 if (response.IsSuccessStatusCode)                 {                     Debug.WriteLine(@\" Course successfully deleted.\");                     var content = await response.Content.ReadAsStringAsync();                     course = JsonConvert.DeserializeObject&lt;Course&gt;(content);                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return (course);         } Users Users are handled in bbdn.rest.services.UserService. As illustrated above, this Class implements the IRestService interface and exposes four methods. It also includes methods required to implement the IDisposible interface which is required to use the async/await functionality.. Create         public async Task&lt;User&gt; CreateObject(User newUser)         {             User user = new User();             var uri = new Uri(Constants.HOSTNAME + Constants.USER_PATH);             try             {                 var json = JsonConvert.SerializeObject(newUser);                 var body = new StringContent(json, Encoding.UTF8, \"application/json\");                 HttpResponseMessage response = await client.PostAsync(uri, body);                 if (response.IsSuccessStatusCode)                 {                     var content = await response.Content.ReadAsStringAsync();                     user = JsonConvert.DeserializeObject&lt;User&gt;(content);                     Debug.WriteLine(@\" User successfully created.\");                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return user;         } Read         public async Task&lt;User&gt; ReadObject()         {             User user = new User();             var uri = new Uri(Constants.HOSTNAME + Constants.USER_PATH + \"externalId:\" + Constants.USER_ID);             try             {                 var response = await client.GetAsync(uri);                 if (response.IsSuccessStatusCode)                 {                     var content = await response.Content.ReadAsStringAsync();                     user = JsonConvert.DeserializeObject&lt;User&gt;(content);                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return user;         } Update         public async Task&lt;User&gt; UpdateObject(User updateUser)         {             User user = new User();             try             {                 var json = JsonConvert.SerializeObject(updateUser);                 var body = new StringContent(json, Encoding.UTF8, \"application/json\");                 HttpResponseMessage response = await HttpClientExtensions.PatchAsync(client, Constants.HOSTNAME + Constants.USER_PATH + \"externalId:\" + Constants.USER_ID, body);                 if (response.IsSuccessStatusCode)                 {                     Debug.WriteLine(@\" User successfully updated.\");                     if (response.IsSuccessStatusCode)                     {                         var content = await response.Content.ReadAsStringAsync();                         user = JsonConvert.DeserializeObject&lt;User&gt;(content);                     }                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return user;         } Delete         public async Task&lt;User&gt; DeleteObject()         {             User user = new User();             var uri = new Uri(Constants.HOSTNAME + Constants.USER_PATH + \"externalId:\" + Constants.USER_ID);             try             {                 var response = await client.DeleteAsync(uri);                 if (response.IsSuccessStatusCode)                 {                     Debug.WriteLine(@\" User successfully deleted.\");                     var content = await response.Content.ReadAsStringAsync();                     user = JsonConvert.DeserializeObject&lt;User&gt;(content);                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return (user);         } Memberships Memberships are handled in bbdn.rest.services.MemberService. As illustrated above, this Class implements the IRestService interface and exposes four methods. It also includes methods required to implement the IDisposible interface which is required to use the async/await functionality.. In addition, the endpoint for memberships is a bit different, in that it is a sub-call to courses, so the endpoint would look like /learn/api/public/v1/courses/&lt;courseId&gt;/users/&lt;userId&gt;. Create         public async Task&lt;Membership&gt; CreateObject(Membership newMembership)         {             Membership membership = new Membership();             var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + \"/externalId:\" + Constants.COURSE_ID + \"users/externalId:\" + Constants.USER_ID);             try             {                 var json = JsonConvert.SerializeObject(membership);                 var body = new StringContent(json, Encoding.UTF8, \"application/json\");                 HttpResponseMessage response = await client.PostAsync(uri, body);                 if (response.IsSuccessStatusCode)                 {                     var content = await response.Content.ReadAsStringAsync();                     membership = JsonConvert.DeserializeObject&lt;Membership&gt;(content);                     Debug.WriteLine(@\" Membership successfully created.\");                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return membership;         } Read         public async Task&lt;Membership&gt; ReadObject()         {             Membership membership = new Membership();             var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + \"/externalId:\" + Constants.COURSE_ID + \"users/externalId:\" + Constants.USER_ID);             try             {                 var response = await client.GetAsync(uri);                 if (response.IsSuccessStatusCode)                 {                     var content = await response.Content.ReadAsStringAsync();                     membership = JsonConvert.DeserializeObject&lt;Membership&gt;(content);                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return membership;         } Update         public async Task&lt;Membership&gt; UpdateObject(Membership updateMembership)         {             Membership membership = new Membership();             try             {                 var json = JsonConvert.SerializeObject(updateMembership);                 var body = new StringContent(json, Encoding.UTF8, \"application/json\");                 HttpResponseMessage response = await HttpClientExtensions.PatchAsync (client, Constants.HOSTNAME + Constants.COURSE_PATH + \"/externalId:\" + Constants.COURSE_ID + \"users/externalId:\" + Constants.USER_ID, body);                 if (response.IsSuccessStatusCode)                 {                     Debug.WriteLine(@\" Membership successfully updated.\");                     var content = await response.Content.ReadAsStringAsync();                     membership = JsonConvert.DeserializeObject&lt;Membership&gt;(content);                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return (membership);         } Delete         public async Task&lt;Membership&gt; DeleteObject()         {             Membership membership = new Membership();             var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + \"/externalId:\" + Constants.COURSE_ID + \"users/externalId:\" + Constants.USER_ID);             try             {                 var response = await client.DeleteAsync(uri);                 if (response.IsSuccessStatusCode)                 {                     Debug.WriteLine(@\" Membership successfully deleted.\");                     var content = await response.Content.ReadAsStringAsync();                     membership = JsonConvert.DeserializeObject&lt;Membership&gt;(content);                 }             }             catch (Exception ex)             {                 Debug.WriteLine(@\" ERROR {0}\", ex.Message);             }             return (membership);         } Conclusion All of the code snippets included in this document at included in a sample REST Demo C# application available on GitHub. There is a README.html included that talks more specifically about building and running the code. Feel free to review the code and run it against a test or development Learn instance to see how it works.",
    "tags": "Learn Rest",
    "url": "/learn/rest/examples/csharp-demo.html"
  },{
    "title": "cURL Demo for attachments",
    "text": "Using cURL to access content attachments The Learn REST API supports accessing Content Item information and URLs for downloading content attachments. The following is a cookbook that covers the basics for discovering and downloading attachments for both an Ultra and an Original Course. Unless noted the steps are the same. Note that we will only comment on iteration requirements and forego execution thereof in this demo. Note that _36662_1 is an Ultra course and _60054_1 is an Original Course. STEP ONE: Generate an Access Token Request: $ curl -k --user &lt;appkey&gt;:&lt;appsecret&gt; --data \"grant_type=client_credentials\" https://ultra-integ.int.bbpd.io/learn/api/public/v1/oauth2/token Result: {“access_token”:\"QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr\",\"token_type\":\"bearer\",\"expires_in\":3599} STEP TWO: GET a list of top level content Note this step is the same for both Ultra and Original courses Ultra: Request: $ curl -k -X GET -H \"Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr\" https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_36662_1/contents Results: { \"results\" : [ { \"parentId\" : \"_216719_1\", \"position\" : 0, \"availability\" : { \"allowGuests\" : true, \"available\" : \"No\", \"adaptiveRelease\" : { } }, \"id\" : \"_596394_1\", \"title\" : \"SOAP Deprecation Announcement.pdf\", \"created\" : \"2018-11-28T18:38:50.621Z\", \"contentHandler\" : { \"id\" : \"resource\\/x-bb-file\", \"file\" : { \"fileName\" : \"SOAP-Deprecation-20Announcement.pdf\" } } }, { \"parentId\" : \"_216719_1\", \"position\" : 1, \"availability\" : { \"allowGuests\" : true, \"available\" : \"Yes\", \"adaptiveRelease\" : { } }, \"id\" : \"_435736_1\", \"title\" : \"Download PDF\", \"hasChildren\" : true, \"created\" : \"2017-08-23T19:16:34.781Z\", \"contentHandler\" : { \"id\" : \"resource\\/x-bb-folder\", \"isBbPage\" : true } }] } Original: Request: $ curl -k -X GET -H \"Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr\" https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents Results: { \"results\" : [ { \"position\" : 1, \"availability\" : { \"allowGuests\" : true, \"available\" : \"Yes\", \"adaptiveRelease\" : { } }, \"id\" : \"_382277_1\", \"title\" : \"Information\", \"hasChildren\" : true, \"created\" : \"2017-06-09T12:41:07.019Z\", \"contentHandler\" : { \"id\" : \"resource\\/x-bb-folder\" } }, { \"position\" : 2, \"availability\" : { \"allowGuests\" : true, \"available\" : \"Yes\", \"adaptiveRelease\" : { } }, \"id\" : \"_382278_1\", \"title\" : \"Content\", \"hasChildren\" : true, \"created\" : \"2017-06-09T12:41:07.021Z\", \"contentHandler\" : { \"id\" : \"resource\\/x-bb-folder\" } }] } STEP THREE: Discover Downloadable Content Here you will iterate over the result set and based on a set of criteria identify downloadable content. The criteria is whether a content item has an id of resource/x-bb-folder or resource/x-bb-document, has child items, and whether an item has an id of resource/x-bb-file. So in the above examples the Ultra course, _36662_1, has one top level downloadable and a folder with child content, and the Original course has two folders. In each case we would iterate over the result set and take the appropriate action based on the content item id and whether the item, if a type of folder or document, has children. Get children If folder Get children If document and Ultra Course parse BBML for attachment URL else if not Ultra Course get attachments get attachment Id get attachment download In this example both the Ultra and the Original course have folders, with children so we need to determine whether any of the children in either are downloadable content: Ultra: Request: $ curl -i -k -X GET -H \"Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr\" https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_36662_1/contents/_435736_1/children Response: { \"results\" : [ { \"parentId\" : \"_435736_1\", \"position\" : 0, \"availability\" : { \"allowGuests\" : true, \"available\" : \"Yes\", \"adaptiveRelease\" : { } }, \"id\" : \"_435737_1\", \"title\" : \"ultraDocumentBody\", \"created\" : \"2017-08-23T19:16:38.848Z\", \"body\" : \"&lt;!-- {\\\"bbMLEditorVersion\\\":1} --&gt;&lt;a href=\\\"https:\\/\\/ultra-integ.int.bbpd.io\\/bbcswebdav\\/ pid-435737-dt-content-rid-21916118_1\\/xid-21916118_1?VxJw3wfC56=1543432981&amp;Kq3cZcYS15=a253d31a6d36425 c81aaa457ee9e2f04&amp;3cCnGYSz89=f5CtU2s5tQcNJpZFO8tjCoIPZ9z6ZpOhzQpZ23SXyFk%3D\\\"data-bbfile=\\\"{&amp;quot; render&amp;quot;:&amp;quot;attachment&amp;quot;,&amp;quot;alternativeText&amp;quot;:&amp;quot;SOAP Deprecation Announcement.pdf&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;SOAP Deprecation Announcement.pdf&amp;quot;,&amp;quot; mimeType&amp;quot;:&amp;quot;application\\/pdf&amp;quot;}\\\"data-bbid=\\\"bbml-editor-id_e18bbfe0-876c-448e-b178- 0d8371738b86\\\"&gt;SOAP Deprecation Announcement.pdf&lt;\\/a&gt;\", \"contentHandler\" : { \"id\" : \"resource\\/x-bb-document\" } }] } Original: Request: $ curl -k -X GET -H \"Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr\" https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_382278_1/children Response: { “results”:[{ “id”:”_382277_1”, “title\":\"Information\", “created\":\"2017-06-09T12:41:07.019Z\", “position\":1, “hasChildren\":true, “availability”:{ \"available\":\"Yes\", “allowGuests\":true, “adaptiveRelease”:{} }, “contentHandler\":{ “id\":\"resource/x-bb-folder\" } }, { “id\":\"_382278_1\", “title”:\"Content\", “created\":\"2017-06-09T12:41:07.021Z\", “position\":2, “hasChildren\":true, “availability”:{ \"available\":\"Yes\", “allowGuests\":true, \"adaptiveRelease\":{} }, “contentHandler\":{ “id\":\"resource/x-bb-folder\" } }] } Here we have a document and a folder - we can access the found document and then continue iterating on requests until we had no folders and have walked the folder tree. STEP FOUR: Accessing found documents Here is where Ultra is handled differently than Original. In Ultra the URL for the attachment is embedded in the BBML for the content Item as shown in this snippet from the above example: \"body\" : \"&lt;!-- {\\\"bbMLEditorVersion\\\":1} --&gt;&lt;a href=\\\"**https:\\/\\/ultra-integ.int.bbpd.io\\/bbcswebdav\\/ pid-435737-dt-content-rid-21916118_1\\/_xid-21916118_1_?VxJw3wfC56=1543432981&amp;Kq3cZcYS15=a253d31a6d36425 c81aaa457ee9e2f04&amp;3cCnGYSz89=f5CtU2s5tQcNJpZFO8tjCoIPZ9z6ZpOhzQpZ23SXyFk%3D**\\\" data-bbfile=\\\"{&amp;quot; render&amp;quot;:&amp;quot;attachment&amp;quot;,&amp;quot;alternativeText&amp;quot;:&amp;quot;SOAP Deprecation Announcement. pdf&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;SOAP Deprecation Announcement.pdf&amp;quot;,&amp;quot;mimeType&amp;quot;: &amp;quot;application\\/pdf&amp;quot;}\\\" data-bbid=\\\"bbml-editor-id_e18bbfe0-876c-448e-b178-0d8371738b86\\\"&gt; SOAP Deprecation Announcement.pdf&lt;\\/a&gt;\" To access the document URL for downloading you must search the bbml and extract any href string that contains a content item xid: https:\\/\\/ultra-integ.int.bbpd.io\\/bbcswebdav\\/pid-435737-dt-content-rid-21916118_1\\/_xid-21916118_1_ ?VxJw3wfC56=1543432981&amp;Kq3cZcYS15=a253d31a6d36425c81aaa457ee9e2f04&amp;3cCnGYSz89=f5CtU2s5tQcNJpZFO8tj CoIPZ9z6ZpOhzQpZ23SXyFk%3D These URL strings represent content item attachments in Ultra. Original: In the case of an Original course once you have identified a content item as an attachment via the \"id\" : \"resource\\/x-bb-document tag you then may get the attachment id. Thus you must iterate through the content Ids to discover content which has the x-bb-document identifier : Request: $ curl -i -k -X GET -H \"Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr\" https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_382278_1 Result: { “id”:\"_382278_1\",** “title\":\"Information\", “created\":\"2017-06-09T12 : 41 : 07.019Z”, “position\":1,\"hasChildren\":true, “availability\":{ “available\":\"Yes\", “allowGuests\":true, \"adaptiveRelease\":{} }, “contentHandler\":{ “id\":\"resource/x-bb-folder\" } } We have a folder so get it’s children… Request: $ curl -i -k -X GET -H \"Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr\" https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_382278_1/children Response: { “results”:[{ “id\":\"_596395_1\", “parentId\":\"_382278_1\", \"title\":\"FOLDER OF PDFs”, \"body\":\"&lt;p&gt;Folder containing downloadable content&lt;/p&gt;”, “created\":\"2018-11-28T20:01:00.691Z\", “position\":0, “hasChildren\":true, “availability\":{ “available\":\"Yes\", “allowGuests\":true, “adaptiveRelease”:{} }, “contentHandler\":{ “id\":\"resource/x-bb-folder\" } }] } Request: $ curl -i -k -X GET -H \"Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr\" https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_596395_1 Response: { “id\":\"_596395_1\", “parentId\":\"_382278_1\", \"title\":\"FOLDER OF PDFs”, \"body\":\"&lt;p&gt;Folder containing downloadable content&lt;/p&gt;”, “created\":\"2018-11-28T20:01:00.691Z\", “position\":0, “hasChildren\":true, “availability\":{ “available\":\"Yes\", “allowGuests\":true, “adaptiveRelease”:{} }, “contentHandler\":{ “id\":\"resource/x-bb-folder\" } } Request: $ curl -i -k -X GET -H \"Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr\" https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_596395_1/children Response: { “results\":[{ “id\":\"_596397_1\", “parentId\":\"_596395_1\", \"title\":\"SOAP Deprecation PDF”, ”created”:\"2018-11-28T20:02:13.612Z\", “position\":0, “availability\":{ “available\":\"Yes\", “allowGuests\":true, “adaptiveRelease\":{} }, “contentHandler\":{ “id\":\"resource/x-bb-document\" } }] } Now we have a document - check to see if there are any attachments… Note that there may be multiple file attachments - in this case there is only one. Request: $ curl -i -k -X GET -H \"Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr\" https://ultra-integ.int.bbpd.io/learn/api/public/v1/cotsses/_60054_1/contents/_596397_1/attachments Response: { \"id\":\"_42588_1\", \"fileName\":\"SOAP Deprecation Announcement.pdf”,”mimeType\":\"application/pdf\" } Request: $ curl -k -X GET -H \"Authorization: Bearer 8vHQpudSKbIx68jC6M5rykN66R2p048Z\" https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_596397_1/attachments/_42588_1 Response: { \"id\":\"_42588_1\", \"fileName\":\"SOAP Deprecation Announcement.pdf”,\"mimeType\":\"application/pdf\" } Once you have the Attachment Id you may request the download URL: Note that the download URL is contained in the response header’s Location element so you have to add the -i|—include flag to the curl command to display the response headers: Request: $ curl -i -k -X GET -H \"Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr\" https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_596397_1/attachments/_42588_1/download Response: HTTP/1.1 302 Cache-Control: private Cache-Control: max-age=0 Cache-Control: no-store Cache-Control: must-revalidate Content-Security-Policy: frame-ancestors 'self' Content-Type: application/octet-stream Date: Wed, 28 Nov 2018 23:40:32 GMT Expires: Tue, 28 Nov 2017 23:40:32 GMT Last-Modified: Sat, 28 Nov 1998 23:40:32 GMT Location: https://ultra-integ.int.bbpd.io/bbcswebdav/xid-21916142_1?VxJw3wfC56=1543449332&amp;Kq3cZcYS15= a253d31a6d36425c81aaa457ee9e2f04&amp;3cCnGYSz89=A9bgt2bWD7NXyIzsI5kHPQQKBCpZ/qnQZ6XM2cqmZPI%3D P3P: CP=\"CAO PSA OUR\" Pragma: private Server: openresty/1.9.3.1 Set-Cookie: JSESSIONID=96003AD1BF73967D9CE359D5037BDECE; Path=/learn/api; Secure X-Blackboard-appserver: ip-10-145-23-249.ec2.internal X-Blackboard-product: Blackboard Learn &amp;#8482; 3500.7.0-ci.4055+6a82373 X-Frame-Options: SAMEORIGIN Content-Length: 0 Connection: keep-alive STEP FIVE: Rinse-repeat for additional folder or document content items.",
    "tags": "Learn Rest",
    "url": "/learn/rest/examples/curl-attachments-demo.html"
  },{
    "title": "cURL Demo",
    "text": "cURL Demo Introduction The rest demo script demonstrates authenticating a REST application, management and use of the authorization token, and creating, updating, discovering, and deleting the Data Source and User Learn objects. A video presentation using this material plus an explanation of how to register your REST application on the Developer Portal, and how to configure your application’s REST integration on your Learn development system, is available here. Here is the slide deck Prerequisites You must register a developer account and application in the Developer Portal You must register your application in Blackboard Learn You must also configure the script as outlined in the README for the project This cURL command-line demonstration shows you how to: Authenticate Create a Data Source Create, Read, and Update a User Delete created objects in reverse order of create - user, datasource. Create a grade column and add a grade. Upload a file to a content area. All generated output is sent to the terminal. This is not meant to be a cURL tutorial. It will not teach you to use cURL. It will, however, give a Developer familiar with cURL the knowledge necessary to make a complete set of CRUD operations to the Learn REST endpoints. Assumptions This help topic assumes the Developer: is familiar with cURL. has a REST-enabled Blackboard Learn instance. Walkthrough To build an integration with the Blackboard REST Web Services, regardless of the programming language of choice, can really be summed up in two steps: Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the Basic Authentication document. OR Use the authorizationcode endpoint to log into Learn with a given user’s credentials, then obtain an OAuth 2.0 access token, using the application key/secret, that only allows access to the system based on that particular user’s entitlements as described in the Three-Legged OAuth document. Call the appropriate REST endpoint with the OAuth 2.0 access token and necessary data to perform a given action. Every example is shown in bold face, the JSON result is shown in italics. Authorization and Authentication OAuth2 Basic (Two Legged) The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A request is made to the token endpoint with a Basic Authorization header containing the base64-encoded key:secret string as its key. The token service returns a JSON object containing the Access Token, the Token Type, and the number of seconds until the token expires. The token is set to expire after one hour, and subsequent calls to retrieve the token will return the same token with an updated expiry time until such time that the token has expired. There is no refresh token and currently no revoke token method. You can do this with cURL with the following command line. We use the -k parameter to ignore issues caused by the self-signed certificate. curl -k --user &lt;key&gt;:&lt;secret&gt; --data \"grant_type=client_credentials\" https://&lt;LearnHost&gt;/learn/api/public/v1/oauth2/token Example: curl -k --user d128e50d-c91e-47d3-a97e-9d0c8a87fb5d:kLpiuq34320jqreaiJIRoareASELERREv56 --data \"grant_type=client_credentials\" https://localhost%3A9877/learn/api/public/v1/oauth2/token {\"access_token\":\"ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz\",\"token_type\":\"bearer\",\"expires_in\":3444} The JSON response is serialized into the Token object as shown above, and you may then retrieve those values from that object by using copy and paste. You will use the value given for the access_token when calling the services as shown in the Calling Services section. OAuth2 (Three Legged) - 3LO To work with 3LO you will need both a browser, to log into Learn and retrieve a code, and a terminal window for your cURL commands. Note: In step 1 the client_id is NOT the Application ID. It IS the Application Key. Step 1. GET a code using your browser - CAUTION: You MUST set the scope parameter. Put the GET request in your browser’s address field. Craft a URL in the following format: https://&lt;LearnHost&gt;//learn/api/public/v1/oauth2/authorizationcode?redirect_uri=&lt;REST APP URI&gt; &amp;response_type=code&amp;client_id=&lt;your **app key**&gt;&amp;scope=read Example: Place the URI below in your browser address field: https://bd-partner-a-original.blackboard.com/learn/api/public/v1/oauth2/authorizationcode? redirect_uri=https://localhost&amp;response_type=code&amp;client_id=d128e50d-c91e-47d3-a97e-9d0c8a77fb5d&amp;scope=read At this point you are requested to log in. As of 2018.04.19 there is a bug with the cookie-acceptance pop up that will require you to accept the pop-up and do the above a second time. Once your browser has the cookie-acceptance cookie set for a given Learn system the work flow will carry on as follows. For this example, after you log in your browser will be directed to: https://localhost/?code=XYTdmQcSGrggzujJm2Ccf8C7dKyqKc7Q (The code will be different every time.) If you provided some other host name in the redirect_uri, then that host name would be shown instead of localhost. Now you have the code that you will use to retrieve the access token for all additional REST calls. NOTE regarding scope: The developer portal shows an example scope parameter as “read write offline”. Using curl this would be &amp;scope=read_write-offline We have to URL encode the space character. Step 2. POST to get the OAuth2 Access Token You will use your application’s key and secret, and the access code from step Notice that the grant_type is authorization_code in this case. Also note that the redirect_uri value MUST match the value provided in Step 1. For our Example we will use https://localhost. curl -k --user &lt;key&gt;:&lt;secret&gt; --data \"grant_type=authorization_code\" https://&lt;LearnHost&gt;/learn/api/public/v1/oauth2/token Example: curl -k --user d128e50d-c91e-47d3-a97e-9d0c8a77fb5d:kLpiuq34320jqreaiJIRoareASELERREv56 --data \"grant_type=authorization_code\" https://bd-partner-a-original-new.blackboard.com/learn/api/public/v1/oauth2/ token?code=ItmqfxQiA9dzIDNwNoNYseM5GNRHHl fa\\&amp;redirect_uri=https://localhost {\"access_token\":\"Cdf83I0dwRoweXuY1dZDbbW0f0WmDmuF\",\"token_type\":\"bearer\",\"expi res_in\":3599,\"scope\":\"read\",\"user_id\":\"7ac650e5bd0d467882943ed06fbfe72c\"} The JSON response is serialized into the Token object as shown above, and you may then retrieve those values from that object by using copy and paste. You will use the value given for the access_token when calling the services as shown in the Calling Services section. Calling Services The individual service calls are handled in succession here. We’ll use copy and paste to create the JSON object in the form of a string, use cURL for generating the appropriate HTTP Request, and shipping it to Learn. We’ll see the JSON response come back to stdout on the console. End points are generally defined as /learn/api/public/v1/&lt;object type&gt;/&lt;objectId&gt;. Object ID can be either the pk1, like _1_1, or as the batchuid. This value should be prepended by externalId:, like externalId:test101. For example, to retrieve a course by the pk1 _1_1, you would call GET /learn/api/public/v1/courses/_1_1. To retrieve by the batchuid test101, you would call GET /learn/api/public/v1/courses/externalId:test101. Create is sent to Learn as a HTTP POST message with a JSON body that defines the object. The endpoint should omit the objectId, as this will be generated on creation. Read is sent to Learn as a HTTP GET message with an empty body. The endpoint should include the objectId being retrieved. Update is sent to Learn as a HTTP PATCH message with a JSON body that defines the object. The endpoint should include the objectId being updated. Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint should include the objectId being deleted. Every example is shown in bold face, the JSON result is shown in italics. DATASOURCES Create curl -k -X POST -H \"Authorization: Bearer &lt;Access Token&gt;\" -H \"Content-Type: application/json\" --data '{\"externalId\":\"&lt;String&gt;\",\"description\":\"&lt;String&gt;\"}' https://&lt;LearnHost&gt;/learn/api/public/v1/dataSources Bearer will be the access_token value we got from the oauth2/token call above. Example: curl -k -X POST -H \"Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz\" -H \"Content-Type: application/json\" --data '{\"externalId\":\"CURLDSK\",\"description\":\"cURL Demo DSK\"}' https://localhost:9877/learn/api/public/v1/dataSources {\"id\":\"_5_1\",\"externalId\":\"CURLDSK\",\"description\":\"cURL Demo DSK\"} Read curl -k -X GET -H \"Authorization: Bearer &lt;Access Token&gt;\" https://&lt;LearnHost&gt;/learn/api/public/v1/dataSources/externalId:&lt;externalId from create&gt; Example: curl -k -X GET -H \"Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz\" https://localhost:9877/learn/api/public/v1/dataSources/externalId:CURLDSK {\"id\":\"_7_1\",\"externalId\":\"CURLDSK\",\"description\":\"cURL Demo DSK\"} Update curl -k --request PATCH -H \"Authorization: Bearer &lt;Access Token&gt;\" -H \"Content-Type: application/json\" --data '{\"externalId\":\"&lt;String&gt;\",\"description\":\"&lt;String&gt;\"}' https://&lt;LearnHost&gt;/learn/api/public/v1/dataSources/[&lt;primary id&gt;|externalId:&lt;String&gt;] Examples: curl -k --request PATCH -H \"Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz\" -H \"Content-Type: application/json\" --data '{\"externalId\":\"CURLDSK\",\"description\":\"cURL DEMONSTRATION DSK\"}' https://localhost:9877/learn/api/public/v1/dataSources/_7_1 {\"id\":\"_7_1\",\"externalId\":\"CURLDSK\",\"description\":\"cURL DEMONSTRATION DSK\"} curl -k --request PATCH -H \"Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz\" -H \"Content-Type: application/json\" --data '{\"externalId\":\"CURLDSK\",\"description\":\"cURL REST DEMO DSK\"}' https://localhost:9877/learn/api/public/v1/dataSources/externalId:CURLDSK {\"id\":\"_7_1\",\"externalId\":\"CURLDSK\",\"description\":\"cURL REST DEMO DSK\"} Delete (If you are going to run the following examples, do so now before deleting your demo DSK.) curl -k -X DELETE -H \"Authorization: Bearer &lt;Access Token&gt;\" https://&lt;LearnHost&gt;/learn/api/public/v1/dataSources/[&lt;primary id&gt;|externalId:&lt;String&gt;] Examples: curl -k -X DELETE -H \"Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz\" https://localhost:9877/learn/api/public/v1/dataSources/externalId:CURLDSK With delete, you don’t see anything back on the command line to indicate your delete was successful. You can run it again and you’ll see that the DSK is truly gone. curl -k -X DELETE -H \"Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz\" https://localhost:9877/learn/api/public/v1/dataSources/externalId:CURLDSK {\"status\":404,\"message\":\"Could not find object with ID: externalId:CURLDSK\",\"extraInfo\":\"416d7b944a58482aaed2df50f301861b\"} USERS Create curl -k -X POST -H \"Authorization: Bearer &lt;Authorization Token&gt;\" -H \"Content-Type: application/json\" --data '&lt;JSON to create a User&gt;' https://localhost:9877/learn/api/public/v1/users Remember, you can always find the JSON specification for these calls at Explore APIs Example: curl -k -X POST -H \"Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz\" -H \"Content-Type: application/json\" --data '{\"externalId\":\"restdemouser\",\"dataSourceId\":\"_7_1\" ,\"userName\":\"restdemouser\",\"password\":\"xyzzy\",\"availability\":{\"available\":\"Yes\"}, \"name\":{\"given\":\"demo\",\"family\":\"user\",\"title\":\"Mr\"},\"contact\": {\"email\":\"no.one@ereh.won\"}}' https://localhost:9877/learn/api/public/v1/users {\"id\":\"_7_1\",\"uuid\":\"de2198a86c6645cbafaab13e79529e05\",\"externalId\":\"restdemouser\", \"dataSourceId\":\"_7_1\",\"userName\":\"restdemouser\",\"educationLevel\":\"Unknown\", \"gender\":\"Unknown\",\"created\":\"2016-05-11T21:39:11.518Z\",\"systemRoleIds\":[\"User\"], \"availability\":{\"available\":\"Yes\"},\"name\":{\"given\":\"demo\",\"family\":\"user\",\"title\":\"Mr\"}, \"job\":{},\"contact\":{\"email\":\"no.one@ereh.won\"},\"address\":{},\"locale\":{}} By sheer coincidence this user’s ID, ‘_7_1’, came out to be the same as the DSK ID, ‘_7_1’. Note the availability of query parameters in the documentation at https://developer.blackboard.com. Examples: curl -k -X GET -H \"Authorization: Bearer bsdcojzT9i4qTaNE0T8ugEBcXE2U8jtu\" https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/users?dataSourceId=_2_1 \\&amp;fields=externalId,userName,studentId {\"results\":[{\"externalId\":\"[abcd001@examity.com](mailto:abcd001@examity.com)\", \"userName\":\"[abcd001@examity.com](mailto:abcd001@examity.com)\",\"studentId\":\"ABCD001\"}, {\"externalId\":\"[abcd002@examity.com](mailto:abcd002@examity.com)\",\"userName\":\"[abcd002@examity.com] (mailto:abcd002@examity.com)\",\"studentId\":\"[ABCD002@examity.com](mailto:ABCD002@examity.com)\"},... On a Windows system, use ^ to escape the &amp;. curl -k -X GET -H \"Authorization: Bearer bsdcojzT9i4qTaNE0T8ugEBcXE2U8jtu\" https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/users? dataSourceId=_220_1^&amp;fields=externalId,userName,studentId Read curl -k -X GET -H \"Authorization: Bearer &lt;Authorization Token&gt;\" https://localhost:9877/learn/api/public/v1/users/[&lt;primary id&gt;|externalId:&lt;String&gt;] Examples: curl -k -X GET -H \"Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz\" https://localhost:9877/learn/api/public/v1/users/externalId:restdemouser {\"id\":\"_7_1\",\"uuid\":\"de2198a86c6645cbafaab13e79529e05\",\"externalId\":\"restdemouser\", \"dataSourceId\":\"_7_1\",\"userName\":\"restdemouser\",\"educationLevel\":\"Unknown\", \"gender\":\"Unknown\",\"created\":\"2016-05-11T21:39:11.518Z\",\"systemRoleIds\":[\"User\"], \"availability\":{\"available\":\"Yes\"},\"name\":{\"given\":\"demo\",\"family\":\"user\",\"title\":\"Mr\"}, \"job\":{},\"contact\":{\"email\":\"no.one@ereh.won\"},\"address\":{},\"locale\":{}} curl -k -X GET -H \"Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz\" https://localhost:9877/learn/api/public/v1/users/_7_1 {\"id\":\"_7_1\",\"uuid\":\"de2198a86c6645cbafaab13e79529e05\",\"externalId\":\"restdemouser\", \"dataSourceId\":\"_7_1\",\"userName\":\"restdemouser\",\"educationLevel\":\"Unknown\", \"gender\":\"Unknown\",\"created\":\"2016-05-11T21:39:11.518Z\",\"systemRoleIds\":[\"User\"], \"availability\":{\"available\":\"Yes\"},\"name\":{\"given\":\"demo\",\"family\":\"user\",\"title\":\"Mr\"}, \"job\":{},\"contact\":{\"email\":\"no.one@ereh.won\"},\"address\":{},\"locale\":{}} Update curl -k --request PATCH -H \"Authorization: Bearer &lt;Access Token&gt;\" -H \"Content-Type: application/json\" --data '&lt;JSON Data for a User&gt;' https://&lt;LearnHost&gt;/learn/api/public/v1/users/ [&lt;primary id&gt;|externalId:&lt;String&gt;] Example: curl -k --request PATCH -H \"Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz\" -H \"Content-Type: application/json\" --data '{\"externalId\":\"restdemouser\",\"dataSourceId\":\"_7_1\", \"userName\":\"restdemouser\",\"availability\":{\"available\":\"Yes\"},\"name\":{\"given\":\"Jane\", \"family\":\"Demo\",\"title\":\"Ms\"},\"contact\":{\"email\":\"no.one@ereh.won\"}}' https://localhost:9877/learn/api/public/v1/users/_7_1 {\"id\":\"_7_1\",\"uuid\":\"de2198a86c6645cbafaab13e79529e05\",\"externalId\":\"restdemouser\", \"dataSourceId\":\"_7_1\",\"userName\":\"restdemouser\",\"educationLevel\":\"Unknown\", \"gender\":\"Unknown\",\"created\":\"2016-05-11T21:39:11.518Z\",\"systemRoleIds\":[\"User\"], \"availability\":{\"available\":\"Yes\"},\"name\":{\"given\":\"Jane\",\"family\":\"Demo\",\"title\":\"Ms\"}, \"job\":{},\"contact\":{\"email\":\"no.one@ereh.won\"},\"address\":{},\"locale\":{}} Delete curl -k -X DELETE -H \"Authorization: Bearer &lt;Access Token&gt;\" https://&lt;LearnHost&gt;/learn/api/public/v1/users/[&lt;primary id&gt;|externalId:&lt;String&gt;] Example: curl -k -X DELETE -H \"Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz\" https://localhost:9877/learn/api/public/v1/users/externalId:restdemouser As with the DSK delete there is no output to the console when the delete is successful. But, you can see that the user is gone by running the delete again: curl -k -X DELETE -H \"Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz\" https://localhost:9877/learn/api/public/v1/users/externalId:restdemouser _{\"status\":404,\"message\":\"Could not find object with ID: externalId:restdemouser\",\"extraInfo\":\"e709f6982af744dfae18d42f68e73fb1\"}_ COURSE GRADES (Only in SaaS) Create Grade Column curl -k -X POST -H \"Authorization: Bearer &lt;Authorization Token&gt;\" -H \"Content-Type: application/json\" --data '&lt;JSON to create a Grade Column&gt;' [https://saashost.blackboard.com/learn/api/public/v1/courses/{courseId}/gradebook/columns Example: curl -k -X POST -H \"Authorization: Bearer uFMWyuwgItXL0UzMo6AHG0zOhm0yvfys\" -H \"Content-Type: application/json\" --data '{\"id\": \"7\",\"externalId\": \"co7extId\",\"name\": \"co7name\",\"description\": \"co7desc\",\"externalGrade\": true,\"created\":\"2016-06-30T05:34:56.497Z\",\"score\": {\"possible\": 77,\"decimalPlaces\":0},\"availability\": {\"available\": \"Yes\"},\"grading\": {\"type\":\"Manual\",\"due\": \"2016-07-01T05:34:56.498Z\", \"attemptsAllowed\":0,\"scoringModel\": \"Last\",\"anonymousGrading\": { \"type\": \"None\",\"releaseAfter\":\"2016-07-11T05:34:56.498Z\"}}}' https://partner-smoke-test-a.blackboard.com/learn/api/public/v1/courses/_50_1/gradebook/columns {\"id\":\"**_129_1**\",\"externalId\":\"co7extId\",\"name\":\"co7name\",\"description\":\"co7 desc\",\"externalGrade\":true,\"created\":\"2016-07-01T05:45:37.730Z\",\"score\":{\"poss ible\":77.0,\"decimalPlaces\":0},\"availability\":{\"available\":\"Yes\"},\"grading\":{\"t ype\":\"Manual\",\"due\":\"2016-07-01T05:34:56.498Z\"}} Add/Update Column Grade (PATCH will create a grade where there isn’t one.) curl -k --request PATCH -H \"Authorization: Bearer &lt;Access Token&gt;\" -H \"Content-Type: application/json\" --data '&lt;JSON Data for a Column Grade&gt;' https://&lt;Learn Host&gt;/learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}/users/{userId} Example: curl -k --request PATCH -H \"Authorization: Bearer uFMWyuwgItXL0UzMo6AHG0zOhm0yvfys\" -H \"Content-Type: application/json\" --data '{\"text\": \"A\",\"score\": 77,\"notes\": \"Great\",\"feedback\": \"GoodWork!\", \"exempt\":true}' https://partner-smoke-test-a.blackboard.com/learn/api/public/v1/courses/_50_1/gradebook/columns/_129_1/users/_66_1 {\"userId\":\"_66_1\",\"columnId\":\"_129_1\",\"status\":\"Graded\",\"score\":77.0,\"notes\":\"Great\",\"feedback\":\"GoodWork!\",\"exempt\":true} ACCESS CONTENT See Access Content Attachments COURSE COPY curl -k -X POST -H \"Authorization: Bearer &lt;Authorization Token&gt;\" -H \"Content-Type: application/json\" --data '&lt;JSON for the course to copy into&gt;' https://saashost.blackboard.com/learn/api/public/v1/courses/{courseId}/copy Example: curl -k -X POST -H \"Authorization: Bearer RcHoSkh8EH9UKo6iCHWXDpCKrmCyOIwr\" -H \"Content-Type: application/json\" --data '{\"courseId\":\"mbk-test-copied201910111502\"}' https://partner-smoke-test-a.blackboard.com/learn/api/public/v1/courses/courseId:mbk-test/copy A new course with courseId: mbk-test-copied201910111502 is created. The contents of mbk-test are copied into it. NOTE: You can NOT copy contents into an already existing course. For example we used the GUI to create a course with a courseId: mbk-test- copied201910111508. Then we attempted to run the following: curl -k -X POST -H \"Authorization: Bearer RcHoSkh8EH9UKo6iCHWXDpCKrmCyOIwr\" -H \"Content-Type: application/json\" --data '{\"courseId\":\"mbk-test-copied201910111508\"}' https://partner-smoke-test-a.blackboard.com/learn/api/p ublic/v1/courses/_863_1/copy {\"status\":409,\"message\":\"A course with the provided courseId already exists\"} You can only use the copy endpoint to take an existing course and create and copy into a new, never before created, course. ADD CONTENT (Remember to Check Availability of the APIs in the Learn Version) Preconditions - You know the courseId, you’ve gotten an access token, and you have a local file to upload. Get a course’s contents. curl -k -X GET -H \"Authorization: Bearer TwniVbrjLoQnNVWexAGBgQEyMaw7GT0P\" https://bd-partner-a-original.blackboard.com/learn/api/public/v1/courses/courseId:mbk-rest-contents/contents {\"results\":[{\"id\":\"_12906_1\",\"title\":\"Information\",\"created\":\"2017-12-06T18:50:24.625Z\",\"position\":1,\"hasChildren\":true,\"availability\":{\"available\":\"Yes\",\"allowGuests\":true,\"adaptiveRelease\":{}},\"contentHandler\":{\"id\":\"resource/x-bb-folder\"}},{\"id\":\"**_12907_1**\",\"title\":\"Content\",\"created\":\"2017-12-06T18:50:24.628Z\",\"position\":2,\"hasChildren\":true,\"availability\":{\"available\":\"Yes\",\"allowGuests\":true,\"adaptiveRelease\":{}},\"contentHandler\":{\"id\":\"resource/x-bb-folder\"}}]} In the THIRD step we’ll place our file in the Content folder we see in the above response. Every new Learn Original course has a Content folder by default. Upload a file. curl -X POST -H \"Authorization: Bearer TwniVbrjLoQnNVWexAGBgQEyMaw7GT0P\" https://bd-partner-a-original.blackboard.com/learn/api/public/v1/uploads -F \"file=@/Users/mbk/Documents/2016.09.BlackboardPartnerUpdate.pdf\" {\"id\":\"4B6281344DFDD9B1F36A5719BDB10708-38295ef0c6a74954a1055e1045bcfeeb\"} Create the content item using bbXML and the id from the prior step. { \"title\": \"Sept 2016 Partner Update\", \"contentHandler\": { \"id\": “resource/x-bb-file\", \"file\": { \"uploadId\":\"4B6281344DFDD9B1F36A5719BDB10708-38295ef0c6a74954a1055e1045bcfeeb\", \"fileName\": \"2016.09.BlackboardPartnerUpdate.pdf\", \"duplicateFileHandling\": \"Rename\" } } } Then call the appropriate endpoint: curl -k -X POST -H \"Authorization: Bearer TwniVbrjLoQnNVWexAGBgQEyMaw7GT0P\" -H \"Content-Type: application/json\" --data '{\"title\": \"Sept 2016 Partner Update\",\"contentHandler\": {\"id\": \"resource/x-bb-file\",\"file\": {\"uploadId\": \"4B6281344DFDD9B1F36A5719BDB10708-38295ef0c6a74954a1055e1045bcfeeb\",\"fileName\":\"2016.09.BlackboardPartnerUpdate.pdf\", \"duplicateFileHandling\": \"Rename\"}}}' https://bd-partner-a-original.blackboard.com/learn/api/public/v1/courses/courseId:mbk-rest-contents/contents/_12907_1/children {\"id\":\"_12908_1\",\"parentId\":\"_12907_1\",\"title\":\"Sept 2016 Partner Update\",\"created\":\"2017-12-06T19:22:59.536Z\",\"position\":0,\"availability\":{\"available\":\"Yes\",\"allowGuests\":true,\"adaptiveRelease\":{}},\"contentHandler\":{\"id\":\"resource/x-bb-file\",\"file\":{\"fileName\":\"2016.09.BlackboardPartnerUpdate.pdf\"}}} You can, of course, use the id returned in the above to fetch the content item using the appropriate GET. Read the documentation at developer.blackboard.com. CREATE ASSIGNMENT WITH ATTACHMENT Currently Only Available For Ultra Courses (Remember to check the Learn version for availably of the APIs @ https://developer.blackboard.com) Get a course’s content root. root will only work with the _abc_xyz ID format. It will not work for courseId: format. curl -k -X GET -H \"Authorization: Bearer &lt;Access Token&gt; \" https://&lt;LearnHost&gt;/learn/api/public/v1/courses/&lt;ID&gt;/contents/root Example: curl -k -X GET -H \"Authorization: Bearer N75W0ceKowxtlMUZtuIqwwvPQtxvx3L5\" https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/courses/_691_1/contents/root {\"id\":\"_5108_1\",\"title\":\"ROOT\",\"created\":\"2018-04-08T15:57:34.188Z\",\"position\" :0,\"hasChildren\":true,\"availability\":{\"available\":\"Yes\",\"allowGuests\":false,\"adaptiveRelease\":{}},\"contentHandler\":{\"id\":\"resource/x-bb-folder\"}} Upload the file to be attached to the assignment. Note: The file is uploaded to temporary storage so we must attach it to an assignment shortly after the upload curl -X POST -H \"Authorization: Bearer N75W0ceKowxtlMUZtuIqwwvPQtxvx3L5\" https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/uploads -F \"file=@/Users/mbk/Documents/2016.06.BlackboardPartnerUpdate.pdf\" {\"id\":\"D1-D1165F42C7E11286BDAFDCCD2E2BE935-56c7b14aa4cb499b9a9a2a8cc3156290\"} We use this id to indicate the file that is to be attached to the assignment. Create the assignment with the file attached: (The file must be attached soon after being uploaded as it is uploaded to a temporary location and goes away sometime after being uploaded. Also, there is a bug in the following where if attempts allowed is too large it will fail. I’ve not experimented to find the limit.) Reference: POST /learn/api/public/v1/courses/{courseId}/contents/createAssignment Example: curl -k -X POST -H \"Authorization: Bearer N75W0ceKowxtlMUZtuIqwwvPQtxvx3L5\" -H \"Content-Type: application/json\" --data '{\"parentId\": \"_5108_1\", \"title\":\"Assignment Created by REST createAssignment\", \"instructions\": \"Simple Instructions\", \"description\": \"Assignment with Attachment\", \"position\": 0, \"fileUploadIds\":[\"D1-D1165F42C7E11286BDAFDCCD2E2BE935-56c7b14aa4cb499b9a9a2a8cc3156290\"],\"availability\": {\"available\": \"Yes\", \"allowGuests\": true, \"adaptiveRelease\": { \"start\": \"2018-04-05T18:35:20.050Z\", \"end\": \"2018-09-02T18:35:20.050Z\" } }, \"grading\": { \"due\": \"2018-09-02T18:35:20.050Z\", \"attemptsAllowed\": 10 }, \"score\": { \"possible\": 100 } }' https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/courses/courseId:mbk-ultra-course/contents/createAssignment {\"contentId\":\"_6282_1\",\"gradeColumnId\":\"_3297_1\",\"assessmentId\":\"_11701_1\",\"questionIds\":[\"_11703_1\",\"_11704_1\"]} We will use the gradeColumnId when submitting a student attempt to the assignment. SUBMIT ASSIGNMENT ATTEMPT WITH ATTACHMENT Currently Only Available For Presentation-Only Assignments (Reference for all APIs used and the Learn version they are available in is @ https://developer.blackboard.com) Use 3LO to get an access code for the student account that will submit the attempt to the assignment. 3LO MUST be used for this process. NOTES: Use Status read write, write is required to POST the assignment. LOG OUT of any browser session with the Learn system you’ve been working with before doing the next step where you will log in with the student account. a. Put the following URL in a browser’s address field. Use the FQDN of the Learn system you are working with. The client_id is the REST Application Key. (Not the ID.) https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/oauth2/authorizationcode?redirect_uri=https://localhost&amp;response_type=code&amp;client_id=d128e50d-c91e-47d3-a97e-9d0c8a77fb5d&amp;scope=read write&amp;state=xyzzy Your browser should take you to the Learn login page. If you see the dialog to accept cookies, accept the dialog. Then repeat a. There is a bug that won’t take you past b. if you’ve not previously accepted the cookie disclosure dialog. b. Log in with the student account that will be submitting the assignment attempt. Accept any dialog that pops up. Your browser’s address field will be redirected to a URL like the following. You SHOULD see something about being unreachable in the browser. That’s OK. https://localhost/?code=g84Xx0YaEz1iqS6HFRq0X9MdRTnQ48FT&amp;state=xyzzy Our code is: g84Xx0YaEz1iqS6HFRq0X9MdRTnQ48FT This is the code we use in the next step to get an access token. Use the 2nd-leg of 3LO to get an access token - POST using the code, our application key, and secret to the oauth2/token endpoint. Note: the redirect_uri must match the redirect_uri we used when we got the code. curl -k --user d128e50d-c91e-47d3-a97e-9d0c8a77fb5d:sorryyoucanthavemysecret --data \"grant_type=authorization_code\" https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/oauth2/token?code=g84Xx0YaEz1iqS6HFRq0X9MdRTnQ48FT&amp;redirect_uri=https://localhost We get an access token back to use for submitting the students assignment attempt. {\"access_token\":\"4mgoFlQoi4Jq4biKpU4R264wugsKF9R1\",\"token_type\":\"bearer\",\"expires_in\":3599,\"scope\":\"read write\",\"user_id\":\"507ba08376e1498cba8c6cd35b003aa2\"} Upload the file to be attached to the attempt into temporary storage. It’s temporary and needs to be used quickly curl -X POST -H \"Authorization: Bearer 4mgoFlQoi4Jq4biKpU4R264wugsKF9R1\" https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/uploads -F \"[file=@/Users/mbk/Documents/2016.03.BlackboardPartnerUpdate.pdf]\" We get back an ID that we use to attach the file to the attempt. {\"id\":\"BD-BD9C08679892561211D99DB4C817FE68-67545ce854b54d3fb062e38aefeee47c\"} Submit the attempt. We’re using the gradeColumnId”:”_3297_1” that we got when we created the assignment. The “studentSubmision” is in bbML format. Reference: Blackboard Markup Language - BbML curl -k -X POST -H \"Authorization: Bearer 4mgoFlQoi4Jq4biKpU4R264wugsKF9R1\" -H \"Content-Type: application/json\" --data '{\"studentComments\":\"this is the student commment\",\"studentSubmission\": \"&lt;!-- {\\\"bbMLEditorVersion\\\":1} --&gt; &lt;a href=\\\"bbupload://BD-BD9C08679892561211D99DB4C817FE68-67545ce854b54d3fb062e38aefeee47c\\\" data-bbfile=\\\"{&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;2016.03.BlackboardPartnerUpdate.pdf&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;application/pdf&amp;quot;}\\\"&gt;2016.03.BlackboardPartnerUpdate.pdf&lt;_/a&gt;\"}:_' https://bd-partner-a-ultra.blackboard.com/learn/api/public/v2/courses/courseId:mbk-ultra- course/gradebook/columns/_3297_1/attempts We get back an attempt ID for an InProgress student submission. We use the attempt ID in the next step to set the attempt to needs grading so that the instructor sees the attempt. Attempts that are InProgress are not available to the instructor in the GUI. {\"id\":\"_528_1\",\"userId\":\"_649_1\",\"status\":\"InProgress\",\"studentSubmission\":\"&lt;!-- {\\\"bbMLEditorVersion\\\":1} --&gt;\\n&lt;a href=\\\"https://bd-partner-a-ultra.blackboard.com/bbcswebdav/xid-23611_1\\\" data-bbfile=\\\"{&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;2016.03.BlackboardPartnerUpdate.pdf&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;application/pdf&amp;quot;}\\\"&gt;2016.03.BlackboardPartnerUpdate.pdf&lt;/a&gt;\",\"exempt\":false,\"created\":\"2018-05-18T02:48:18.329Z\"} Set the attempt to “NeedsGrading” curl -k -X PATCH -H \"Authorization: Bearer 4mgoFlQoi4Jq4biKpU4R264wugsKF9R1\" -H \"Content-Type: application/json\" --data '{\"status\":\"NeedsGrading\"}:' https://bd-partner-a-ultra.blackboard.com/learn/api/public/v2/courses/courseId:mbk-ultra- course/gradebook/columns/_3297_1/attempts_528_1 {\"id\":\"528_1\",\"userId\":\"_649_1\",\"status\":\"NeedsGrading\",\"studentSubmission\":\"&lt;!-- {\\\"bbMLEditorVersion\\\":1} --&gt;\\n&lt;a href=\\\"[https://bd-partner-a-ultra.blackboard.com/bbcswebdav/xid-23611_1\" data-bbfile=\\\"{&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;2016.03.BlackboardPartnerUpdate.pdf&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;application/pdf&amp;quot;}\\\"&gt;2016.03.BlackboardPartnerUpdate.pdf&lt;/a&gt;\",\"exempt\":false,\"created\":\"2018-05-18T02:48:18.329Z\"} Now, logged in as the instructor, we can see that there has been 1 submission. And we see the student’s submission with the attachment. Common Errors COMMON ERROR: You used 3LO to get an Access Token. You forgot to set the scope correctly and are getting permission denied errors. 404 etc. SOLUTION: Go back through the 3LO process and specify the scope necessary to make your REST calls. Conclusion We hope that the above demonstration gives you a helpful peek under the hood as to what is going on when you make REST calls to a Learn system. You can take these cURL commands and use them to make all of the REST calls documented here: Explore APIs",
    "tags": "Learn Rest",
    "url": "/learn/rest/examples/curl-demo.html"
  },{
    "title": "LTI Advantage - Sample Deep Linking JSON",
    "text": "LTI Advantage - Sample JSON Overview This document documents sample JSON between the Blackboard Learn LMS and an LTI Advantage Tool Provider. We’ll be using https://github.com/blackboard/BBDN-LTI-Tool-Provider-Node for our examples. One use case we’re often asked about is doing video embeds in Blackboard Learn content. That will be our first, and for now, only example. HOWTO Embed LtiLinkItems into the editor via Deep Linking When adding content back from the internal tool for LTI 1.1/Deep Linking 1.0, you can specify custom JSON, use: { \"@context\": \"http://purl.imsglobal.org/ctx/lti/v1/ContentItem\", \"@graph\": [ { \"@type\": \"LtiLinkItem\", \"@id\": \":item1\", \"title\": \"LTI embedded-app test\", \"mediaType\": \"text/html\", \"url\": \"https://lti-tool.dev.bbpd.io/lti\", \"placementAdvice\": { \"displayWidth\" : 147, \"displayHeight\" : 184, \"presentationDocumentTarget\" : \"iframe\" } } ] } For LTI 1.3+/Deep Linking 2.0+ use: { \"type\": \"ltiResourceLink\", \"title\": \"An Embedded Resource\", \"text\": \"A description\", \"url\": \"https://lti-tool-jwt.dev.bbpd.io/lti13\", \"iframe\": { \"width\": 500, \"height\": 800 } }",
    "tags": "Standards",
    "url": "/standards/lti/deep-linking/deep-linking-json.html"
  },{
    "title": "Deprecation Policy",
    "text": "Public REST API Compatibility and Deprecation Policy Compatibility Backward compatibility Wherever possible, we will maintain backward compatibility for REST resources and their representations. An API is backward compatible if a program written using one version of the API will continue to work the same way without modification when using future versions of the API. If we need to change a representation so that it is not backward compatible, we will create a new resource or media type using the new representation. In such cases, we will maintain the old resource or media type according to the deprecation policy described below. Such a change to a representation of a resource constitutes a version increment to the corresponding REST API(s). We may change the behavior of an API without warning if the existing behavior is incorrect or creates a security vulnerability. Stable URIs If a resource exists at a particular URI, that same resource will continue to exist with the same meaning in future versions. HTTP Response Codes We do not change the meaning of HTTP response codes. For example, if a URI that used to return a 200 response returns a 404, you can know that the response indicates that the resource cannot be found, and not that the resource has been moved to another location. We may add HTTP response codes when modifying a resource to refine availability or error responses. Such additions will not change the meaning of success or basic failure responses such as 200, 400, or 403 responses. We may change a resource to return a “redirection” response code, e.g., 301 or 302, instead of returning the resource itself. Your client must handle HTTP-level redirects, and respect HTTP headers such as Location. The target resource for any redirect will be backward compatible with the original resource. Parameters and Data If a resource begins to support more query parameters in future versions they will not be mandatory. The absence of a field value or a default value as appropriate behave as in prior versions. If a resource accepts a representation, e.g., by POST or PUT, it will continue to accept the same representation in future versions. Any new fields that are accepted in a resource will not be mandatory. The default value assumed in their absence will maintain the previous meaning of the resource. Canonical URIs The canonical URI of a resource used in self links or used by other resources to point to the resource may change. Stable representations If we document a resource as available in a specific media type, e.g., using the Content-Type header, we will keep it available using that media type. If a resource returns a default media type in the absence of content negotiation, we will maintain that default. Structured representations (application/json) We further commit to the stability of resources with a media type of application/json. We will maintain backward compatibility for key:value pairs in JSON objects. We will use the same name and return the same value type. If the value of a field is an array, the type of the contents of the array will not change. If the value is an object, that object will meet the same compatibility guarantees as the document as a whole: We may add new key:value pairs to a representation at any time, but the new pairs will not alter the meaning of existing pairs. If a field exposes a URI, the resource identified by that URI will maintain the same compatibility guarantee. We may add new values to the enumerations at any time, but new values will not change the documented field default values, if any exists. Values Not Included in Compatibility Policy The following are not covered by this compatibility policy: Resource and rate limits default and maximum sizes of paged data default sorting behaviors The above items are not part of the API. They may change without warning. It is your responsibility to adhere to limits and behaviors as described in the API documentation or the developer community. Structured representations of paged data and sorting behavior in API responses follow the policies described in the “Structured Representation” section of this document. API versioning Version Increments Our APIs do not tag responses with their version number. The version is part of the URL used to call the API. We increment version numbers only for REST API endpoints affected by a particular change. The “expected” or “preferred” version of an API end-point is always the highest version of the endpoint. The existence of a higher-versioned endpoint implies that we have deprecated some aspect of the previous version of the endpoint or associated resource. Once a newer version of an API endpoint becomes available, we will mark any prior versions of the endpoint as deprecated. If we deprecate an API version, we will follow the policy laid out below. Forward compatibility We make no guarantee of forward compatibility in our REST APIs. These non- binding guidelines about our approach to forward-compatibility may help you plan your projects. An API is forward-compatible if a program written using one version of the API will also work the same way without modification when using previous versions of the API. Where appropriate, we follow the Robustness Principle. This means that in some cases, an API determines how to handle a request based only on the parts that it recognizes. There are some notable exceptions. Blackboard Learn ignores request query parameters that it does not recognize. Property fields of structured data submitted via mutative requests that are not recognized by the server result in a 400 response. This includes fields deprecated in prior versions of an API. Deprecation Deprecation Policy This REST API deprecation policy is to be understood in conjunction with any other relevant deprecation policies. When there is a conflict of policy, the most restrictive policy applies. Announcements We make every effort to notify consumers about new deprecations through all relevant channels. This includes: Deprecation and “since” annotations in REST API swagger docs Announcements on the developer community portal Time frames We will give developers the longest possible notice of deprecations to publicly accessible REST APIs. We maintain deprecated REST APIs in their original forms for at least 1 year. Deprecations take effect with the Blackboard Learn semi-annual releases for self-hosted and managed-hosting customers. Exceptions to this policy apply in case of critical security vulnerabilities or functional defects. Detectability Requests made to deprecated APIs return a header with the response to notify the consumer that the endpoint is deprecated. We use the warning header Warning: 299 - ‘Deprecated API; @since version’. For more information, see https://tools.ietf.org/html/rfc7234#section-5.5. Implementing API Deprecations For details related to the mechanics of deprecating Learn REST APIs please email developers@blackboard.com. Best Practices You should not assume any constraints unless they are mentioned in the documentation. That is, even if the documented example is a number, you should not assume that the only possible response types are numeric unless so noted in the docs. If a field property is not declared as mandatory in the API documentation, do not assume it will be present in responses. Log the occurrence of any 299 response codes and periodically review the logs to plan for future app maintenance",
    "tags": "Learn Rest",
    "url": "/legal/deprecation-policy.html"
  },{
    "title": "Development Life Cycle",
    "text": "Development Life Cycle There are many things to consider when developing a Blackboard Building Block. Here we describe the issues involved and provide an overview of the development process. This is meant to serve as a general guide of how most projects evolve - not all steps will be necessary in every case scenario and additional steps may be necessary depending on your case scenario. Before Writing Code Define the business need and the stakeholders in the project Your project will likely begin with some sort of need. Perhaps your users want additional functionality for the user interface. Perhaps your student information system team wants to automate your data integration so that it can be real-time. Perhaps you are a system administrator who wants to automate a manual process. Perhaps you are a school administrator who wants greater insight into how your Blackboard installation is being used. All of these boil down into defining the business need for this project. Building Blocks enable you to integrate and extend Blackboard beyond its core functionality. This provides an easy way to add value to what is already a significant technology investment. When defining the business need for your project, you will want to determine who the stakeholders are in your project. These are the folks who will fund, champion, develop, deliver, implement, use, maintain, and support your new tool. You will want to make sure that these folks are at least aware of your project, involve them in the initial project discussions, and likely keep them engaged throughout the duration of your project. Assemble your team Once you determine who is involved and what you want to accomplish, you can begin to assemble the core team of folks who will develop your Building Block. This team will likely include a functional lead and a technical lead. The functional lead will contribute to those discussions relating to usability, user-friendliness, and where to link to your tool in the user interface. The technical lead will likely be a developer but may also be the Blackboard System Administrator doing development work on the side. However, it is increasingly common for schools have their own dedicated academic developer. It is also possible that the person doing your Blackboard development also develops tools for your school’s other backend systems including your student information system. Some schools even get their students involved with Building Block development through internships, student work programs, and class projects. Scope user functionality The next step is to clearly define what you want to accomplish with your integration. You may have heard the term “use case” used in discussion. This is what we refer to here. You will want to scope out what will (and what will not) be part of your first version. It is helpful to get users involved and listen to how they would best like to accomplish the tasks at hand. To successfully scope functionality, you will want to be familiar with the areas in which you can use Building Blocks to integrate with our products and the functionality of our API set. There are helpful tutorials on these topics in the Getting Started area of this site. Set deadlines and determine how to define success You will also want to determine how you are going to define the success of your project. Some things to consider are successful development of the tool (a feat in and of itself), adoption rates of the tool, reduction in time or steps involved in completing a process, enhancements to student-centered learning, availability of new tools for faculty, tighter integration with other school systems, increased reporting capabilities, and others. You will also want to consider setting a deadline for implementing your project. Many projects fail simply because they are not completed. There are many challenges to completing a project, but EduGarage provides tutorials, tips, and an active discussion forum area to support you through your project. Before Development Get your developer license When you are ready to begin your Building Block project, you need to find the member of your organization who has the license to install a developer copy of the Blackboard product. This is a fully-capable edition of our product that is limited in the number of users, courses, and enrollments it can support. The person most likely to have this license is your Blackboard administrator. If you don’t have this license and are an enterprise academic client, you can likely request one from your Client Manager at no cost. If you are a commercial partner, click the Business Resources link to the left for instructions on how to obtain a developer license. Set up your development server The next step is to set up a development server that matches your production server’s version (7.3.216.0, 8.0.184.3, etc) and platform (Windows, Linux, Solaris). You can find instructions on how to set up your environment in the Tutorials section of this side and the installers to install Blackboard in the Download section. Set up your development workstation Now you will need to choose which development environment you’ll use to actually do your development. Popular choices include Eclipse, MyEclipse, NetBeans, and JBoss Developer Studio. Some of these are free; others come at a price. The most popular by far are Eclipse and NetBeans. Use whichever is easiest for you. They all accomplish the same tasks in different ways. Determine how to manage code You will also want to determine how you are going to store and manage your code. If you are a single developer working on a small project, it might make sense to just store your code locally (remember to back it up). If you are working on a larger project or with multiple team members, it makes sense to use a code versioning tool such as CVS or Subversion. These tools are also immensely useful when keeping track of changes to your code over time. Starting Development Start and configure your project in the IDE To start development, you will need to open your IDE and start your project. This process will be different with each IDE, but many include a wizard to get you started. The project that is closest in relation to a Building Block is the dynamic web application. Using the wizard creates a shell for your application and makes it easy to get up and running quickly. The only difference between a Building Block and a web application is the presence of the bb-manifest.xml file. This file tells Blackboard how and where your tool integrates with the Blackboard user interface. It is very similar to the xml configuration file required when developing portlets. Choose what the architecture of your project is going to be There are many schools of thought on how to architect your web application. There are arguments that favor strict adherence to the MVC (model-view- controller) design pattern such as can be easily accomplished with Struts. Other schools of thought favor the ease of using JSPs to process logic (arguably a bad practice). You will see examples of both approaches on this site. Most beginners place all of their code in JSPs to start. As their skill level advances, they begin migrating this code into the controller and comply more fully with some style of MVC development. If you are willing to persist through the learning curve, the most commonly seen best practice is to develop a Struts-based web application. This said, you should be aware that there are limitations to using Struts with your Building Block application specifically with portal modules and with the script that is run upon removal of the Building Block. Configure the bb-manifest As stated above, the bb-manifest.xml file tells Blackboard where and how your tool will integrate into our user interface. This file will provide a place to define the type of Building Block (tool, module, or content type), options associated with each type, other configuration options, and permissions. These are described in greater detail in the Developer Guide located in the Documentation area of this site. A more functional overview of where you can integrate with Blackboard products can be found in the Getting Started area of this site. A technical developer will determine exactly where to integrate with Blackboard by working with a functional lead to determine the best feasible user experience. Determine how you will assemble your project for installation You will want to consider using an automated script to build your project and prepare it for installation on your development server. It is also possible to do this by hand, and some IDEs include built-in functionality to automate building your project. The most popular choice for automating your builds is Ant, although a new tool called Maven is also increasingly popular. Building Blocks are assembled and packaged as war/zip files for installation on the Blackboard server. During Development Iterate through development During development, you will make changes to your code, build your project, and install the resulting war file on your development server using the Building Blocks Manager area of the System Admin panel. It is a best practice to remove the old Building Block before installing the new version. The Building Block will deploy to the /blackboard/content/vi/bb_bb60/plugins/name_of_your_project/ directory on your development server. In this directory, you will be able to modify JSPs directly and see their changes on the next page load. Class files or jar libraries can also be replaced, but the Building Block will need to be inactivated and made available again through the Building Blocks Manager before these changes will load. Compiled JSPs will appear in the /blackboard/apps/tomcat/work/Catalina/localhost/webapps_name of your project/ directory. These can be deleted here to force recompiling of them on the next page load. Logging of Building Block activity can appear in any of several log files. Always check /blackboard/logs/bb-services-log.txt and the catalina, stdout, and stderr logs in /blackboard/logs/tomcat/ (Windows) or /blackboard/apps/tomcat/logs (Linux and Solaris) directories. As you imagine, this is a very manual and potentially time consuming process. The Starter Block discussed in the 2007 DevCon presentation titled “Best Practices for Building, Testing and Deploying Building Blocks” automates this process by using HTTP calls and an Ant script. You can download this tool in the Developer Tools areas of the Downloads section of this site. Comment your code Always, always, always comment your code, especially if you are using a non- standard practice. You will forget how things work and why you did things in a certain way. Make life easier for yourself and whoever maintains your code by commenting it well. Keep track of your changes Going a step beyond commenting your code is using a code versioning system to keep track of changes made in each version of your product. This is a recommended best practice. Testing / QA Determine what to test and how to test it One often overlooked step when developing a new Building Block is testing. Testing involves not only verifying that your code works, but that it can scale to meet the demand of a large user base, and that it adequately and accurately meets the needs of your users. One of the most common tools to test code is called JUnit. It allows an automated programmatic script to test API calls. For example, with JUnit you can automate making a connection to a database, adding a record, and closing the connection 100 times sequentially and then verify that 100 records made it into the database. There is another tool along these lines called HTTPUnit which can perform the same type of testing for web sites. It can load your Building Block, perform an action, and verify the success of that action programmatically. In addition to HTTPUnit, there is also a tool called Grinder that can be used to load test your Building Block. Your use cases defined when the project begins roughly correspond to test cases used to verify that your new tool meets the requirements set forth by the project team. You should run through each of these and complete an end-to- end verification that your tool works and behaves as desired. Get your users involved You should absolutely also involve a certain subset of your users with your project. In addition to being an exciting experience for them, it will provide the development team with valuable feedback relating to if the tool meets the needs of your users. This is often called user acceptance testing. Just be careful about scope creep. Your version 1 of your tool is just that - version Record everyone’s ideas and input but set the expectation that additional functionality will be considered for future versions only. Releasing your product Consider running a trial or beta program Consider encouraging the same team that helped with user acceptance testing to serve as the first users of the new tool in your production environment. Depending on how your tool is implemented, you may be able to limit who can see the tool in the Blackboard user interface. A best practice is to install your Building Block and leave the default Course/Org availability as Unavailable. Then, have your beta users activate the Building Block within their individual courses via the Manage Tools area of the Course Control Panel. The tool won’t show by default for all of your users which will avoid confusion. However, this will not prevent anyone from manually turning this tool on. For those who license the Community System, portal modules can be access-restricted by institution role. Encourage your power users to train other users As the participants in your testing and beta programs will be the most familiar with your product, consider encouraging and providing incentives for them to instruct others how to use it. Have a plan for dealing with bugs and issues Even the smallest of projects will have a bug or two that escapes the testing/QA cycle. You should have a process for dealing with these issues. This includes having the ability to report the issues such as through your existing help desk or a bug tracking tool such as Bugzilla, allowing users to track the progress of the fix, making the changes, tracking the changes in your code, testing the changes, and updating your Building Block to its latest version during regularly scheduled Blackboard maintenance hours. Consider sharing your project Many of the free and almost all of the open source Building Blocks that are available come from the innovation of this developer community. If you would like to consider open sourcing your project, you need to consider several things. These include university intellectual property policy, licensing of your open source tool, variances in APIs among product versions, variances in platform (Windows, Linux, Solaris), and maintenance strategy. Each of these can be relatively easily addressed. OSCELOT (the Open Source Community for Educational Learning Objects and Tools) has assisted many with open sourcing their projects in the past. To learn more, visit their web site. Maintaining your product Maintenance issues The three most common causes of issues when updating a Building Block for the most recent Blackboard version are API changes, API bugs, and core product jar library changes. API changes are noted in the Javadoc documentation that ships with each product. Any API marked as deprecated is likely to be removed in the next version. API bugs are unlikely to occur, but they can and do occur. Follow the process detailed in the Help section of this site to obtain assistance. Libraries also can change between versions. For example, the version of Struts and the servlet-api are both likely to change with upgrades made to the core product. Updates to the Tomcat application server in certain releases can also induce unforeseen and undesired behavior in your Building Blocks. Track changes Again, even if you choose not using a code versioning system to track code changes, you should at the very least make a backup copy of the source code and war file for each version. Enhancing your product Version 1.1 Version 1.1 will likely address some of the bugs and minor limitations with your version 1. This is to be expected. It is a best practice to keep this sort of information documented so when you find time to complete 1.1, you can check off your issues down the list. Version 2 Version 2 will likely address those new feature requests brought up in your user acceptance testing and beta programs. These would include any that begin with “It would be nice if…” Caveat You should be aware that although you should keep track of your code versions, changing the Building Block version in the bb-manifest can have adverse affects. Notably, impact on data and records associated with your Building Block which may be lost should you uninstall a previous version to install the new version. Always thoroughly test any changes you make to your Building Blocks.",
    "tags": "Learn b2",
    "url": "/learn/b2/getting-started/dev-life-cycle.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/devcon.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/category/devcon.html"
  },{
    "title": "Developing an LTI 1.3/Advantage",
    "text": "Developing an LTI 1.3/Advantage Solution - Recordings and Resources Caveat Deleting a registered LTI domain and/or the associated managed placements from the Administrator Panel -&gt; LTI Tool Providers page will invalidate all of the associated LTI launch links in courses. The data will be gone from the database. There is no way to fix this. NEVER delete a registered domain or managed placements without considering these consequences. If you create an LTI 1.3 Tool that uses the same domain as a currently registered LTI 1.1 tool on a Learn system, there is code in Learn that will prompt you to migrate from LTI 1.1 to LTI 1.3. Generally that’s a great option. Finally, only very brave people make changes on a production system without testing first on a test or staging system. We recommend you be more cautious than brave. Webinars NEW!! During DevCon 2020 Eric Preston presented the following on developing an LTI 1.3/Advantage solution. This is a must-watch if you are starting out on your LTI 1.3/Advantage journey. Or, if you have questions, you will likely find the answers here. Watch this recording. Here are the slides On April 10, 2019, Eric Preston, Blackboard’s resident LTI expert, spoke with us in Technical Office Hours. He gave us an overview of LTI technology. Watch recording the recording in Bb Collaborate. On May 1, 2019, Eric followed up with another, deeper dive into coding an LTI integration. Watch the recording in Bb Collaborate. This is the associated slide deck.) Here is the sample code referenced in the presentations: https://github.com/blackboard/BBDN-LTI-Tool-Provider-Node",
    "tags": "Standards",
    "url": "/standards/lti/tutorials/develop-lti-advantage-solution.html"
  },{
    "title": "Creating Database Objects with Building Blocks",
    "text": "Creating Database Objects with Building Blocks As Blackboard shifts to a more modular delivery model, with more features delivered as Building Blocks at regular intervals, the importance of having a repository of build objects and documentation has never been more important. Blackboard’s own development teams have been using an internal Maven Repository since the summer of 2012 and they have found it to greatly speed up the Building Block development process. Developing software with external dependencies is a tough business. Maven has made this significantly easier by developing a standard binary repository format that many modern build tools integrate easily with to provide access to many of the dependencies Blackboard Building Blocks developers might need. Maven Central, the main repository for the Maven ecosystem, contains a significant number of popular third party libraries that you may want to use in your projects. When developing Building Blocks, though, you will need some libraries from Blackboard Learn. In the past, to include those libraries, you needed to find the libraries on a local instance of Blackboard Learn, copy them someplace in your source tree, write custom dependency logic and build. Plus when you upgraded to a later Learn version for building, or if you wanted to build against multiple versions, things got even more complicated. Blackboard is happy to announce that we have a publicly accessible Maven repository that can be used to access any of the public API JARs from Learn for every release going back to 9.1 SP8. This article will show you how to integrate with the Maven repository using two popular build tools: Maven and Gradle. The Blackboard Maven repository is hosted at: https://maven.blackboard.com/content/repositories/releases When would you use the repository? A Building Blocks developer would use the repository whenever creating build scripts for a B2. The Maven Repository will make it easier for a developer to reference the correct versions of our public API. Available Libraries All Blackboard API libraries are part of the blackboard.platform group. Blackboard publishes these libraries: Artifact ID Description bb-bbxythos APIs for the content management subsystem. bb-cms-admin APIs pertaining to system administration. bb-platform Core platform APIs. This covers the bulk of the APIs typical Building Blocks will use. bb-taglibs Standard tag libraries provided by the platform. bb-ui-webapi APIs for Building Block developers. Many of the public tags leverage code and resources included in this project.As a webapi, this library must be included in your Building Blocks’ WEB-INF/lib path because the platform does not provide it. This webapi includes a resources package that you must expand at the root of your Building Block. bb-ws-announcement Web Service stubs and APIs for the announcements subsystem. bb-ws-calendar Web Service stubs and APIs for the calendar subsystem. bb-ws-content Web Service stubs and APIs for the content subsystem. bb-ws-context Web Service stubs and APIs for the session context subsystem. bb-ws-course Web Service stubs and APIs for the course subsystem. bb-ws-coursemembership Web Service stubs and APIs for the course membership subsystem. bb-ws-gradebook Web Service stubs and APIs for the gradebook subsystem. bb-ws-notificationdistributoroperations Web Service stubs and APIs for the notification subsystem integration. bb-ws-user Web Service stubs and APIs for the user subsystem. bb-ws-util Web Service stubs and APIs for the some helpful utilities. bb-manifest-plugin XSD for validating the XML in your bb-manifest.xml file. bb-schema-xsd XSD for validating the XML in your schema.xml file. xsscore Library supporting bb-bbxythos. Make sure you are using the same version of each file, and do not include in your war file.",
    "tags": "Learn b2",
    "url": "/learn/b2/best-practices/develop-using-maven-repository.html"
  },{
    "title": "Developer AMI",
    "text": "Using the Blackboard Learn AMI for REST and LTI Development This document outlines usage of the Blackboard REST and LTI Developer AMI made available via the Amazon AWS Marketplace. Overview The Blackboard REST and LTI Developer Amazon Machine Image (“AMI”) is an image of a Blackboard Learn server available in the Amazon Marketplace. The AMI allows a developer to spin up a copy of Blackboard Learn for building applications that use the REST APIs and/or Learning Tool Interoperability (“LTI”) to integrate with Learn. This image is a standalone copy of the SaaS deployment of Blackboard Learn that allows development and testing against the Ultra user experience. Once the developer spins up the copy of Learn, it lives in his or her AWS account and the developer has full control over the instance of Learn. All instances are pre-licensed with a developer license. New developer AMIs will be made available in the same cadence as SaaS releases. Please note that there is often a delay of 5-14 days before the AMI is available due to AMI and AWS processing time. This program allows a developer to build an integration for Blackboard Learn without a formal paid partnership. Anyone who wants to test the Ultra experience can create copy. Note that you cannot deploy a custom building block to this AMI. It is meant only for REST and LTI development. NOTE: Building Block installation is NOT supported on the AMIs. Get the Blackboard REST and LTI Developer AMI The easiest way to find the Developer AMI is by searching the Amazon Marketplace for Blackboard Learn. The results show all of the currently available AMIs. Given the cadence or releases, you should locate the Learn instance you want. Use the Blackboard REST and LTI Developer AMI Before you begin, you must have an Amazon AWS account. If you do not have an AWS account you will need to create one. The steps to set up an AMI are typically as follows. Subscribe to the AMI Configure the specific instance Spin it up and code! When configuring the instance, it is completely up to you how you set up the server. We do have a few recommendations, however. We recommend using the Large Tier instance type. This gives you enough storage and power to run Blackboard Learn effectively and build your cool widget. If you see 502 Gateway errors, you may need to increase the size of your AMI. Additionally, you may periodically see a 502 Gateway error during use - keeping in mind EC2s based on this AMI are NOT intended for use as a Production service, you may simply issue a reboot to restart the server maintaining your AWS provisioned public IP and DNS settings. We recommend you adjust the security settings to allow: SSH from your IP only Enable HTTPS access You must configure VPC for the EC2 to properly function. You do this by going to the VPC Console from the AWS Console: Under Services open VPC under Networking and Content Delivery Open Your VPCs select the VPC connected to your EC2 and select Actions =&gt; Edit DNS Hostnames —&gt; Change DNS hostnames: to YES Startup time: The startup time for your EC2 will vary and may take as long as 15 minutes before you may access the site via your browser. SSH access may be available in 3 minutes or less. On initial startup the Original UX login screen appears. Note the messaging on that page as it informs you when the license expires. You will need to subscribe to a new AMI release prior to license expiration if you wish to migrate data from the old EC2 to the new. Licenses on AMIs are not extendible. Support for Let’s Encrypt SSL Certificates Starting with version 3300.6.0 the Learn for REST and LTI Developers AMI supports free Let’s Encrypt SSL Certificates. At this time we do not support alternative SSL certificate processes. NOTE: Per the Let’s Encrypt FAQ certificates are valid for only 90 days. In order to update your Let’s Encrypt certificate you must perform a server reboot per below instructions. You may read about Let’s Encrypt at Let’s Encrypt - Free SSL/TLS Certificates You may read about certbot at Certbot You may read about how to get a free DNS at Free Dynamic DNS - No-IP.com - Managed DNS Services Setup After starting your AMI there are a few steps to installing and using Let’s Encrypt Certificates. After installing the certificate, management of the Let’s Encrypt SSL certificate is automatic. Register the AWS provided EC2 public IP to your DNS as an A-record. The best practice as an introduction is to use a free DNS service such as freeddns.no-ip.com to provide the FQDN used for your Learn EC2. Use the EC2 Security controls to open HTTP as an inbound security rule - you should have HTTP, HTTPS, and SSH (from your console IP) enabled at this point. SSH to your EC2 instance and create a file containing your FQDN from freeddns.no-ip.com and your email address and save to /home/ubuntu/my_ssl_config. The format of this file is important and should follow the example below. The file contains only two lines specifying the key and value pairs used to configure the Let’s Encrypt process, e.g.: ssldomain : devmen.hopto.org sslemail : developers@blackboard.com SSH to your EC2 instance and from the command line reboot the instance using the command: $ sudo reboot now On reboot the server will generate your Let’s Encrypt SSL certificate, on future reboots or restarts the server will check whether the certificate requires renewal. If renewal is required reboot the server to renew the Let’s Encrypt certificate. If your certificate is past expiration, because you ignored the renewal notices, sudo mv the /etc/letsencrypt directory to your home directory for safe keeping and reboot. Warning: When you stop and start an existing EC2 instance, AWS resets the public domain name and IP - you must update your DNS entry to reflect the new IP. Warning: Let’s Encrypt has a limit of 20 certificate requests on a domain per week. Repeated stop and starts of an AMI using the same domain may exceed the Let’s Encrypt request limit, requiring you to provide a new domain name. ** What does the Blackboard REST and LTI Developer AMI cost? The Open Innovation Initiative was created to lower the cost of entry for developing software solutions on the Blackboard Learn platform. This is accomplished by removing the previous Partner program costs and replacing those partner program costs with low hourly AMI usage costs. This enables you the developer to control your costs for prototyping your applications and entering the education software market. Use of the Developer AMI will result in two charges being made to your account: An AWS Infrastructure charge This charge is based on the EC2 instance type selected to run the AMI and varies based on the instance type size and region. An example is $0.0464/hr for a t2.medium instance served from Software charge A Software charge of $0.05/hr (US dollars) is added to the AWS infrastructure charge. If you have any questions, feel free to ask in this space or email us at developers@blackboard.com. Log into the Blackboard Learn Application on the AMI The username is administrator. The password is the instance ID, e.g., i-234234234234. If you look at the log created when you spin it up it is also printed there. You can find the log from the EC2 console. The first time you go to login, you will see text on the page like the following. NOTE: There is no way to upgrade an AMI. You will need to get the latest AMI, and transfer any necessary data, BEFORE the expiration date shown on the page you see. ««««&lt; IMAGE »»»»&gt; Landing page seen the first time you login to the developer AMI Configure Your AMI-based Blackboard Learn Instance When you set up your instance of Blackboard Learn, you can configure different options. These options are discussed in Enable Learn Tool Interoperability (LTI) Links and Text. Triage Your AMI-based Blackboard Learn Instance Note that not stopping your EC2 when you encounter an error will continue to incur EC2 charges and we do not issue refunds.Always stop your EC2 if you encounter an error or do not require a 24x7 development instance. For General Learn System Administration you may visit: Blackboard Learn SaaS Deployments 504 Gateway Error Visiting https:// displays a 504 error in your browser: 1. Shutdown the instance to stop accumulating charges and try again 2. Or reboot the instance: Ssh into the instance Issue this command: $ sudo reboot now Issue a reboot from the AWS console The above restarts the instance and will typically correct the 504 error. Migration Cookbook - Recreating Data between AMIs Currently, there is no formal migration/transfer tool to port Blackboard Learn data between AMI (EC2) instances. However, there are several existing administrative tools that can be leveraged to capture the bulk of T&amp;L (teaching/learning data) like courses, users, institutional roles, and enrollments, etc. from an existing (source) EC2 and reinstate/recreate the data onto a (new) EC2. The resources linked below will guide you through this data transfer process: Bb Learn EC2 Data Transfer.docx: A Word doc outlining a comprehensive step-by-step overview of the migration/transfer process between a source and destination EC2. EC2 Migration SQL Scripts and Feed Files.zip: A zip file containing all the SQL scripts (PostgreSQL format) and example feed files referenced in the Data Transfer overview document (above). Notice - AVG on Windows Systems While using the AVG antivirus product on a Windows system and attempting to create a course using Blackboard Learn, AVG may manifest what we believe is a false positive dialog regarding CVE-2014-0286-A. This can occur while using any browser, though the error message is specific to now unsupported versions of Microsoft Internet Explorer 6 through 11. Our security team has indicated that this is an issue with the AVG software. Blackboard will be reaching out to AVG to discuss. See the AVG website for questions about configuring the AVG software, and for their contact information.",
    "tags": "DVBA",
    "url": "/dvba/developer-ami.html"
  },{
    "title": "Learn Developer Portal",
    "text": "Learn Developer Portal If you want to see the developer portal on its source please click here",
    "tags": "Learn REST",
    "url": "/learn/rest/getting-started/developer-portal.html"
  },{
    "title": "UEF Documentation",
    "text": "UEF Documentation",
    "tags": "Learn UEF",
    "url": "/learn/uef/documentation.html"
  },{
    "title": "Developer Virtual Machine - DVM",
    "text": "Developer Virtual Machine (DVM) The DVM is only available to clients and partners with Behind the Blackboard access. You can gain access to a developer instance of Blackboard for developing LTI and RESTful applications using our Amazon Web Services Developer AMI, available in the Amazon Marketplace. If you prefer the Virtual Machine, or you wish to develop Building Blocks, you must first be a contracted client or partner. For more information about becoming a Blackboard Partner, see Become a Blackboard Partner and Gain Access To Behind the Blackboard and Partner SaaS Systems. Blackboard provides a preconfigured VirtualBox developer virtual machine (DVM) to help developers quickly test and validate Building Blocks and REST integrations. This article will help you set up the DVM. License You are downloading a Blackboard Learn Developer Virtual Machine instance (the “Bb Virtual Machine”) containing the Blackboard Learn™ developer software. The Bb Virtual Machine shall be deemed a part of the Blackboard Developer Software provided to you pursuant to the terms of your developer license agreement with Blackboard. All terms and conditions of your developer license agreement to the Blackboard Learn™ software shall remain in full force and effect and shall apply in all respects to the Bb Virtual Machine and your use thereof. The Bb Virtual Machine and the Blackboard Learn™ developer software contained therein are provided “as is”. Except as expressly stated in your developer license agreement, Blackboard disclaims all warranties and liability associated with the Bb Virtual Machine and your use thereof. By clicking ‘Accept’ below and/or by downloading or accessing the Bb Virtual Machine, you re-affirm your agreement to the terms of your developer license agreement for the Blackboard Learn™ software and further agree that your use of the Bb Virtual Machine shall be subject to the terms and conditions of your developer license agreement. If you do not agree to the foregoing terms, you may not download or use the Bb Virtual Machine. Prerequisites Developer-class workstation or laptop that supports Linux virtual machines. VirtualBox 5.0.14 must be installed and operational. Vagrant 1.74 or later must be installed and operational. Behind the Blackboard Access - Read Become a Blackboard Partner and Gain Access To Behind the Blackboard and Partner SaaS Systems. Installation Create a directory on your computer for your Vagrant VM. For example: $HOME/Vagrant/Learn Download the Vagrant virtual machine and Vagrantfile from Behind the Blackboard and place them in the directory listed in Step 1. 9.1 Q4 2018 (3500) or greater: Install a recent version and see Upgrade Your DVM ««link here»»if you need the latest version. 9.1 Q2 2018 (3400) 9.1 Q4 2017 (3300) 9.1 Q2 2017 (3200) 9.1 Q4 2016 (3100) 9.1 Q2 2016 (3000) Run the following commands in that directory: vagrant up vagrant ssh If you are on a Windows host machine, you may experience issues logging into the VM because of Windows’ management of SSH. Alternatively, you can log into the VM using any SSH client you want by connecting to localhost:2222 and using the credentials vagrant/vagrant. Additionally, help is available on the Vagrant site. Blackboard Learn should automatically start when the machine is booted up. Using the Virtual Machine You can now access your developer instance of Learn at http://localhost:9876 or https://localhost:9877. The Learn administrator login credentials are administrator/password. Developer License This virtual machine is pre-licensed with a developers license, and is not intended to be re-licensed with your institution’s license or personal developer license. Because a Developer license is in use, there are certain limitations: 150 Users 100 Courses 1000 Enrollments Starting Block This Building Block allows you to deploy your Building Block remotely, and is already installed and configured on this virtual machine. bb-config.properties You can modify this VM to mimic either a SaaS-like configuration or an Enterprise 9.1 configuration. In the bb-config.properties file, there is a variable to control whether the Building Block uses the standard content directory or a local cached copy. SaaS uses a local cached copy of the Building Block directory on each app server. Toggling this value to true mimics this behavior. bbconfig.plugins.cache.enabled=false // Default behavior, just like Learn 9.1 -OR- bbconfig.plugins.cache.enabled=true //Mimics B2 behavior of Learn SaaS You will also need to shutdown Learn and copy the content directory that is being used to the new location when making the switch. For example, the Q2 2016 DVM ships with bbconfig.plugins.cache.enabled=true. When you switch to bbconfig.plugins.cache.enabled=false you will need to shutdown Learn and then cp -r /usr/local/blackboard/cache/vi/BBLEARN/plugins/* /usr/local/blackboard/content/vi/BBLEARN/plugins/ This copies the cache directory content to the standard content directory. As with any configuration change, a PushConfigUpdates is required in order to have the change take affect. See the Shared Content Folder section of Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions ««&lt; LINK »»&gt; for a detailed explanation of the differences between the SaaS-like configuration and the Enterprise 9.1 configuration. Attaching to the Tomcat Debugger The tomcat debugger may be attached via port 9878. Accessing the Virtual Machine Users The user which is by default logged onto the virtual machine is named vagrant and has the password of vagrant. After you have ssh’d to the virtual machine you have the need to perform root privileged operations: vagrant ssh su - root #the root password for the virtual machine is _vagrant_ Accessing the Database Directly To access the database directly (for running SQL), you must be logged in as the postgres user: vagrant ssh sudo su - postgres -c \"psql BBLEARN\" The user and password for accessing the database when not logged in as the postgres user is postgres/postgres. Port 5432 is forwarded to your host machine at 9879, so you can set up a “remote” connection using pgadminIII or your preferred database tool. Tomcat Wrapper Timeout The tomcat wrapper timeout value has been set to 0 to avoid the timing out of the Java Debugger. The memory allocation is initially set to 4gb in the Vagrantfile, as well. Simply modify the entry in Vagrantfile to adjust this value. Register VM With the Cloud The DVM must register with the cloud in order to use the API Gateway. Learn more about this process here. Common Issues Postgres Error Unconnected Sockets To share comments and feedback on the developer virtual machine, please email developers (at) blackboard (dot) com.",
    "tags": "DVBA",
    "url": "/dvba/dvm.html"
  },{
    "title": "Dynamic Rendering with Template Variables",
    "text": "Dynamic Rendering with Template Variables Template variables allow for integration with other systems by exposing information about the user’s context in a way that makes creating URLs to pass information to these systems easy. Template variables are represented by a series of values given a special syntax. This syntax is @X@object.attribute@X@. When used, these variables are expanded when rendered into their corresponding values. Within the UI, they can be used in portal modules and within the body of content items in courses. Note that not all of these variables will resolve on all pages, For example, if the page is not inside a course, there will be no course-related variables available. Using context variables Context item Context variable Example output User external person key @X@user.batch_uid@X@ 123-45-6789 User username (user id) @X@user.id@X@ jsmith User full name @X@user.full_name@X@ John Smith User primary key identifier @X@user.pk_string@X@ _521_1 User locale @X@user.locale@X@ en_GB User system role(s) @X@user.role@X@ System Roles:* C- Course Administrator* U- Guest* N- None* O- Observer* Y- Community Administrator* R- Support* Z- System Admin* H- System Support* A- User Administrator User primary institution role @X@user.institution_role@X@@X@user.primary_institution_role@X@ student User secondary institution role(s) @X@user.secondary_institution_role@X@ student,faculty Course membership role @X@membership.role@X@ Course/Organization Roles:* B- Course Builder/Organization Builder* G- Grader/Grader* U- Guest/Guest* P- Instructor/Leader* S- Student/Participant* T- Teacher’s Assistant/Assistant Course external course key @X@course.batch_uid@X@ ABC123ABC Course course id @X@course.id@X@ BIO101 Course name @X@course.course_name@X@ Introduction to Concepts in Biology Course primary key identifier @X@course.pk_string@X@ _12344_1 Course URL @X@course.url@X@ /courses/1/BIO101/ Course membership role @X@course.role@X@ student Course locale @X@course.locale@X@ en_US Content primary key identifier @X@content.id@X@@X@content.pk_string@X@ _23_1 Content URL @X@content.url@X@ /courses/1/BOB101/content/_221_1 Request UUID @X@request.id@X@   Request locale @X@request.locale@X@   Request return URL @X@request.return@X@   System host name @X@system.site_id@X@  ",
    "tags": "Learn b2",
    "url": "/learn/b2/advanced/dynamic-rendering-with-template-variables.html"
  },{
    "title": "Enabling Remote Debugging",
    "text": "Enabling Remote Debugging This tutorial will show you how to enable Tomcat debugging so that you can connect to your Building Block application with a code-level debugger such as those built into Eclipse and NetBeans. Enabling debugging using bb-config.properties Newer versions of Blackboard Learn have a built-in flag to enable Tomcat debugging. Follow these steps to turn it on: Open the file /blackboard/config/bb-config.properties in a text editor Modify the value bbconfig.tomcat.debug.enable and set bbconfig.tomcat.debug.enable=true Navigate to /blackboard/tools/admin/ and run PushConfigUpdates.sh/.bat from the command line. You can now connect with a debugger to port 2222 (or as set in the value for bbconfig.jvm.options.debug.tomcat) Setting up Eclipse for Tomcat Debugging Remote debugging is project specific in Eclipse. Once you have the building block project created and open you may setup the debugging within Eclipse: In the Eclipse project view tool bar: 1. Click on the upward facing arrow next to the “Debug” button (the button with the bug) in the toolbar and 2. Click on “Debug configurations…” 3. Alternatively you may select “Run &gt; Debug configurations…” from the Eclipse menu. A new window with the current debug configurations will open. 1. Select “Remote Java Application” in the left list of configuration options and then click on “New launch configuration” button (the button with the folder icon in the top-left corner). 2. Alternatively you may double-click “Remote Java Application”. Fill the configuration with the data corresponding with your Tomcat instance: Project: The project you want to debug: it has to contain the source code for the application we want to debug. So include the source in the project build. Connection Type: Standard (Socket Attach). Host: IP of the Learn server being used for debugging. Port: Port indicated to JVM in address parameter. Usually port 2222. Execute the Debugger Once you have built and deployed your Building Block you may click on the button “Debug” and Eclipse will connect with the Learn instance of Tomcat (Learn must be running). Now when you put the breakpoints inside the Eclipse project you may debug as you would normally with a regular project only now it is remote code running in the Learn Tomcat container.",
    "tags": "Learn b2",
    "url": "/learn/b2/resources/enabling-remote-debugging.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/eol.html"
  },{
    "title": "Event Driven API",
    "text": "Event Driven API The Blackboard Learn Event Driven API is used to programmatically push the following data into the Blackboard Learn database from an external system: User Course Organization Enrollment Staff Student Organization membership Course and Organization category Course and Organization category membership The collaboration between the entity and the persistence classes is the process by which data is obtained from the institution systems. An instance is created for that data, and input into the Blackboard Learn database as a data record. The intended audience includes developers creating data integration solutions for the Blackboard Learn. The Data Integration API Specifications describe the packages, classes, and objects of the Event Driven API in systemlib/cms- admin.jar. Event Driven API architecture The API is a collection of java classes and objects that move data from the institution systems into Blackboard Learn. Concrete data from the institution systems are encapsulated as java objects. The methods contained in the java classes determine how the data is input into Blackboard Learn. The data input is controlled by persisters that process the appropriate method, convert the object into data that can be input into Blackboard Learn database, and then input that data according to the method called. Entities and persisters There are two main types of objects in the API: entities (objects) and persisters (actions). Entities include the objects that represent data in the system, such as users. Persisters are behind-the-scenes methods that handle the storage of the entities into a persistent store or transient data format. Operations All data classes have methods to handle persistence actions. The following persistence operations are supported: Insert: Inserts a record into the Blackboard Learn database. Update: Updates an existing record in the Blackboard Learn database. Save: Updates an existing record if it already exists. Otherwise, if it does not exist, inserts the record in the Blackboard Learn database. Remove: Purges the record from the Blackboard Learn database. Change Key: (Person and Group, Course, and Organization) Changes the primary key. This will automatically update any related Memberships of the changed keys. Create an object To create an object in the system, instantiate a corresponding entity, set attributes on the object, and then call a persister method (insert, update, save, delete). Persisters The following Persisters are found in the Event Driven API: CourseSitePersister OrganizationPersister EnrollmentPersister OrganizationMembershipPersister StaffStudentPersister PersonPersister CourseCategoryPersister OrganizationCategoryPersister CourseCategoryMembershipPersister OrganizationCategoryMembershipPersister PortalRolePersister Persist methods include changeKey, insert, remove, save, update, clone. Change key is not relevant for membership type items. Clone is only relevant for Coursesite/Organization. More information about Persist methods can be found in the API specifications. Loaders The following Loaders are found in the Event Driven API: SourseSiteLoader OrganizationLoader EnrollmentLoader OrganizationMembershipLoader StaffStudentLoader PersonLoader CourseCategoryLoader OrganizationCategoryLoader CourseCategoryMembershipLoader OrganizationCategoryMembershipLoader PortalRoleLoader Load methods include load by batch_uid and load by template. More information about Load methods can be found in the API specifications. Data source loader and persister The following Data Source Loader and Persister are found in the Event Driven API: DataSourceLoader loadAll() loadAdminObjectCount() loadAllAdminObjectCounts() loadByBatchUid() DataSourcePersister create() disableAdminObjectsByDataType() disableAllAdminObjects() modify() purgeAdminObjectsByDataType() purgeAllAdmiObjects() purgeSnapshotSessions() removeByBatchUid() Persistence package For the most complete and up-to-date information about packages and classes, refer to the Javadocs included with the API. Persistence package The persistence package provides a framework to handle the insert, update, save, and delete for the entity objects. The framework includes: BbServiceManage: This class handles the coordination of Blackboard Learn enabled services. PersistenceService: This class is a singleton, an object only intended to exist once, that manages the different persistence context for the entity objects. DbPersistenceManager: This class maintains the reference points for each individual loader/persister. An instance of any persister/loader is requested through it. PersisterInterfaces: This includes the PersonPersister, CoursesitePersister, and so forth. blackboard.platform.BbServiceManager.init( serviceConfig,bbprops ); blackboard.platform.persistence.PersistenceService pService = BbServiceManager.getPersistenceService(). blackboard.persist.BbPersistenceManager bManager = pService.getDbPersistenceManager() CoursesiteLoader cLoader= (CoursesiteLoader)bManager.getLoader(CoursesiteLoader.TYPE); PersistenceManager.getLoader=PersonPersister.Default.getInstance() The user must initialize the BbServiceManager before attempting any persistence of the admin data objects. After BbServiceManager is initialized the appropriate loader/persister must be used according to the data type the programmer intends to manage. Determining relationships When using the API, there are specific steps than need to be followed to determine the relationships between the entity and the persistence classes. The following is an example of how to get a Course site: blackboard.admin.data.course.CourseSite site=new blackboard.admin.data.course.CourseSite(); The program must first initialize the BbServiceManager object. The method call is blackboard.platform.BbServiceManager.init( serviceConfig ); where serviceConfig is a java.io.File object. This object represents a link to the configuration file on the operating system. The file is a detailed list of all services that are active on the instance of the servicemanager as well as any of their configuration files. The BbServiceManager object is only initialized once for each execution of the application. A virtual host is also needed for proper setup. A virtual host can be obtained by first getting the Virtual Installation Manager using BBServiceManager.lookupService(VirtualInstallationManager.class). The Virtual Installation Manager has a getVirtualHost(String id) method which returns the virtual host. Next, the ContextManager must be retrieved using BBServiceManager.lookupService(ContextManager.class). Finally, the context can be set by calling the ContextManager’s setContext() method and passing in the virtual host as an argument. The following code sample assumes a “SERVICE_CONFIG_DIR” and “VIRTUAL_HOST_KEY” properties will be set, probably through –D parameters if it is used in a command line application. The SERVICE_CONFIG_DIR should be set to the full path of the Blackboard config directory, while the VIRTUAL_HOST_KEY needs to be the virtual installation you want to test, by default it is bb_bb60. // Initialize the BbServiceManager and set the context //Follow the steps below to determine the relationships between the entity and persistence classes. try { blackboard.platform.BbServiceManager.init(System.getProperties().getProperty(\" SERVICE_CONFIG_DIR\") + \"service-config-snapshot-jdbc.properties\"); // The virtual host is needed to establish the proper database context. VirtualInstallationManager vm = (VirtualInstallationManager) BbServiceManager.lookupService(VirtualInstallationManager.class); String vhostUID = System.getProperty(\"VIRTUAL_HOST_KEY\", \"bb_bb60\"); VirtualHost vhost = vm.getVirtualHost(vhostUID); vhost = vm.getVirtualHost(vhostUID); if(vhost == null) { throw new Exception(\"Virtual Host '\" + vhostUID + \"' not found.\"); } // Now that the vhost is set we can set the context based on that vhost ContextManager cm = (ContextManager) BbServiceManager.lookupService(ContextManager.class); Context context = cm.setContext(vhost); } catch(Exception e) { System.out.println(\"Exception trying to init the BbPersistenceManager\\n \" + e.toString() + \"..exiting.\\n\"); System.exit(0); } The controller creates an entity object and sets its attributes. The controller requests a persist action off the Loader / Persister CourseSiteLoader cLoader= (CourseSiteLoader)BbServiceManager.getPersistenceService().getDbPersistenceMan ager().getLoader(CourseSiteLoader.TYPE); CourseSitePersister cPersister= (CourseSitePersister)BbServiceManager.getPersistenceService().getDbPersistence Manager().getPersister(CoursesSitePersister.TYPE); PersistenceManager.getLoader=PersonPersister.Default.getInstance() The controller catches any persistence exceptions that occur. Repeat steps 2, 3, and 4 as needed for different entities and different persist actions.",
    "tags": "Learn b2",
    "url": "/learn/b2/advanced/event-driven-api.html"
  },{
    "title": "Blackboard Caliper Event Guide",
    "text": "Blackboard Caliper Event Guide This document contains a map of the Caliper events emitted by Blackboard Learn. If you are interested in learning more about Moodle’s Caliper implementation, please visit the Moodle Documentation. SessionEvent Action Actor When Log In All Users Immediately Log Out All Users Immediately Session Time Out All Users Immediately For more information, see Session Events. ViewEvent Action Actor When Click Content File Link All Users Immediately Click External Link All Users Immediately Click Assignment Link All Users Immediately Click Discussion Link All Users Immediately For more information, see View Events. LTIEvent Action Actor When Click LTI Link All Users Immediately Return from LTI Link All Users Immediately For more information, see LTI Events. AssignableEvent Action Actor When Start an Assignment Student Immediately Start a Group Assignment Student Immediately Submit an Assignment Student Immediately Submit a Group Assignment Student Immediately For more information, see Assignable Events. AssessmentEvent Action Actor When Start a Test Student Immediately Submit a Test Student Immediately For more information, see Assessment Events. AssessmentItemEvent Action Actor When Start a Test Question Student Immediately Submit a Test Question Student Immediately For more information see, Assessment Events. ForumEvent Action Actor When Create a Discussion Thread Top Message Instructor Immediately Update Discussion Thread Name, Points Possible, or Message Instructor Immediately Delete a Discussion Thread Top Message Instructor Immediately Post a Thread All Users Immediately Save a Thread as Draft All Users Immediately Post an Assignment Conversation Comment All Users Immediately Post a Group Thread All Users Immediately Post a Group Conversation Comment All Users Immediately Delete a Message Instructor Immediately For more information, see Forum Events. GradeEvent Action Actor When Submit an Assignment Student Immediately Submit a Group Assignment Student Immediately Submit a Test Student Immediately Enter Grade, Comments, or Feedback Instructor Nightly Update Feedback All Users Nightly Post a Manual Grade Instructor Nightly Override a Grade Instructor Nightly Clear an Overridden Grade Instructor Nightly Delete an Attempt Instructor Nightly For more information, see Grade Events. CalculatedGradeSnapshotEvent Action Actor When Trigger Calculated Grade Re-Calculation Instructor Nightly For more information, see Calculated Grade Snapshot Events. ContentEvent Action Actor When Create or Delete Folder Instructor Immediately Update Folder: Name, Description, Availability, Show Dates, Hide Dates Instructor Immediately Create or Delete Link Instructor Immediately Update Link: Name, URL, Description, Availability, Show Dates, Hide Dates Instructor Immediately Create or Delete LTI Instructor Immediately Update LTI: Name, URL, Description, Parameters, Availability, Points Possible,Due Date, Show Dates, Hide Dates Instructor Immediately Create or Delete Assignment Instructor Immediately Update Assignment: Name, Availability, Points Possible, Due Date, Show Dates, Hide Dates, Instructions, Attempts Allowed, Scoring Method Instructor Immediately Create or Delete Discussion Forum Link Instructor Immediately Update Discussion Forum Link: Name, Availability, Due Date, Show Dates, Hide Dates Instructor Immediately Create or Delete Content File (Upload) Instructor Immediately Update Content File (Upload): Name, Availability, Show Dates, Hide Dates, Instructions Instructor Immediately Create or Delete Test Instructor Immediately Update Test: Name, Availability, Points Possible, Due Date, Show Dates, Hide Dates, Instructions, Attempts Allowed, Scoring Method Instructor Immediately Create or Delete Document Instructor Immediately Update Document: Name, Availability, Show Dates, Hide Dates, Instructions Instructor Immediately Create or Delete Document File Instructor Immediately Update Document File: Name, Availability, Show Dates, Hide Dates, Instructions Instructor Immediately Add Questions to Assignment or Test Instructor Immediately For more information, see Content Events. CourseGroupEvent Action Actor When Create or Delete Group Instructor Immediately Update Group: Assignment, Discussion Forum, or Test Instructor Immediately For more information, see Course Group Events. BlogEvent Action Actor When Post a Blog Entry in an Original Experience Course Student Immediately For more information, see Blog Events. WikiEvent Action Actor When Post to a Wiki in an Original Experience Course Student Immediately For more information, see Wiki Events.",
    "tags": "Standards",
    "url": "/standards/caliper/events/event-guide.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/extensions.html"
  },{
    "title": "FAQs",
    "text": "FAQs Account questions Your Behind the Blackboard account will provide you with authenticated access to Developer Resources. Any Behind the Blackboard account is able to post to our discussion forums. If you would like to identify as a Blackboard developer, please e-mail your Blackboard Client Manager and request developer access for your Behind the Blackboard account. Anyone who had an existing account as a Blackboard Developer or Blackboard Partner has full access to this site. Accounts from legacy developer network sites have been migrated. New developer account requests should be directed to your Blackboard Client Manager. Accounts will be provided to existing Blackboard clients and to partners enrolled in our Blackboard Developers Network program according to our contractual terms. If you do not know who your Client Manager is, please contact your institution’s Blackboard System Administrator or primary business relationship owner. He or she will know who to contact. To reset forgotten passwords, please visit Behind the Blackboard and click the “Forgot your password?” link. A new password will be e-mailed to your account. License Questions Academic clients should contact their Client Manager for a developer license or questions about developer licensing. Generally, academic clients who license our enterprise software are eligible for one license to our developer software and 25 developer accounts. These accounts allow you to participate in and contribute to the content on the wiki and forum areas of this site as well as access certain developer content that requires a login to access. Commercial entities are invited to join the program and purchase developer licenses at this link. If you have lost your license file or require a change in your license, please contact your sales representative or the partnership program. IMPORTANT: The developer license of our software limits the number of users, courses, and enrollments that can exist, but otherwise is a fully functional version of the product. Installation assistance Commercial BbDN members are entitled to 30 days of technical support to assist with the installation of the Learning System product. For assistance, please call our Client Support Team at (888) 788-5264. Have your six-digit company ID ready when you call. All others should read up on the available DVBA or request help on the Developer forums API/known issues If you believe you’ve found an issue with our APIs, please follow this process to receive support: Post your issue to our discussion forums on the community site Search the Blackboard Techies Slack Space archives and optionally e-mail the listserv regarding your issue. Open a new case to Behind the Blackboard (or have your Blackboard administrator do this on your behalf) Product improvements/recommendations If you have an idea to improve or add features to our API set, please follow this process: Work with your Blackboard System Administrator to create and document an Enhancement Request through Behind the Blackboard. If you do not have a Behind the Blackboard account or the above is not a viable option, post a new feature request to our The specified item was not found.. Building Block issues Please follow these steps to receive help with a 3rd party Building Block issue: Submit a help ticket with the vendor If the vendor instructs you to submit a help ticket with Blackboard, please work with your Blackboard Administrator to do so on Behind the Blackboard Our Support team will attempt to collaborate with the vendor to resolve the issue Issues that cannot be resolved are escalated as appropriate via our support process",
    "tags": "Learn b2",
    "url": "/learn/b2/getting-started/faq.html"
  },{
    "title": "DVBA FAQ",
    "text": "DVBA FAQ Solution to a PostgreSQL Error in the Developer Virtual Machine Recently I ran across an interesting issue while helping a Partner who uses the DVM exclusively for development. Changing some user’s Institution role resulted in a screen indicating a database error. Looking through the logs/bb- sqlerror-log.txt file we saw entries like the following: 2016-02-19 22:39:34 +0000 - { call user_roles_cr(users_pk1 := , institution_roles_pk1 := , row_status := , data_src_pk1 := , ) } failed. - org.postgresql.util.PSQLException: ERROR: cursor \" cursor0001\" already in use Where: PL/pgSQL function layout_module_group_trg_ins_tf() line 27 at FOR overcursor It turns out that the DVMs have several Postgres procedures and triggers that are using the same cursor names, causing the “already in use” contention. This issue impacts April 2014, October 2014, and Q2 2015 DVMS. You can correct for for this now with the following procedure. Create a backup image/snapshot of the system you’re going to work with. For example with Virtualbox I can click to create a snapshot that I can roll back to. Open a terminal window that you can cut and paste code into. This is important for getting the SQL code provided below exactly right. On my Mac I opened a terminal. From the terminal ssh into the DVM. However you get here doesn’t matter - we’re just after the cut/paste ability. Switch to root. $ sudo su - Shutdown Learn. cd /usr/local/blackboard/tools/admin ./ServiceController.sh services.stop Tail the appropriate logs/tomcat/stdout-stderr file until the Learn app stops. Use ps -ef grep java to ensure no Java code is running. Switch to the postgres user. Start the psql command line interpreter. Connect to the BBLEARN database. sudo su - postgres $ psql postgres=# \\connect BBLEARN You are now connected to the database “BBLEARN” as user “postgres”. BBLEARN=# Now run following SQL which should correct the issue. First copy and paste the block of SQL below into the window you have open, right after the # that is displayed, then hit enter. Copy and paste everything up to and including the line $$ LANGUAGE plpgsql; CREATE OR REPLACE FUNCTION layout_module_group_trg_ins_tf() RETURNS trigger AS $$ DECLARE temp_pk1 bigint; lmg_cur0 cursor for SELECT new.layout_pk1 layout_pk1, defl.pk1 default_layout_pk1 FROM layout l, layout defl WHERE new.layout_pk1=l.pk1 AND l.layout_family_pk1 = defl.layout_family_pk1 AND defl.default_ind='Y' AND defl.pk1 &lt;&gt; new.layout_pk1; BEGIN FOR currow IN lmg_cur0 LOOP DECLARE -- Renamed alias to position1 as it is a reserved word lmg_cur1 cursor for SELECT mmg.module_pk1 module_pk1, ml.column_number column_number, ml.position position1 FROM module_module_group mmg, module_layout ml WHERE mmg.module_group_pk1 = new.module_group_pk1 AND mmg.module_pk1 = ml.module_pk1 AND ml.layout_pk1 = currow.default_layout_pk1 AND mmg.module_pk1 NOT IN ( SELECT module_pk1 FROM module_layout WHERE layout_pk1=currow.layout_pk1); BEGIN FOR currow1 in lmg_cur1 LOOP temp_pk1 := module_layout_cr (module_pk1 := currow1.module_pk1, layout_pk1 := currow.layout_pk1, column_number := currow1.column_number, \"position\" := currow1.position1, manually_added_ind := 'N', minimized_ind := 'N' ); END LOOP; END; END LOOP; RETURN NEW; END; $$ LANGUAGE plpgsql; After you hit the Enter key, you should see CREATE FUNCTION displayed in the terminal window. You can check that you’ve actually changed the function with the following: BBLEARN=# select proname,prosrc from pg_proc where proname='layout_module_group_trg_ins_tf'; Second copy and paste the block of SQL below into the window you have open, right after the #, then hit enter. Copy and paste everything up to and including the line $$ LANGUAGE plpgsql; CREATE OR REPLACE FUNCTION users_portal_trg_upd_tf() RETURNS trigger AS $$ DECLARE lmg_pk1 bigint; v_old_ir_pk1 bigint; v_users_pk1 bigint; v_count int; cursor0001 cursor for SELECT l.pk1 layout_pk1, img.pk1 new_mg_pk1, dmg.pk1 old_mg_pk1, l.users_pk1 v_users_pk1 , old.institution_roles_pk1 v_old_ir_pk1 FROM layout l, module_group img, module_group dmg WHERE l.users_pk1=new.pk1 AND img.institution_roles_pk1=new.institution_roles_pk1 AND dmg.institution_roles_pk1=old.institution_roles_pk1 AND new.pk1=old.pk1 AND new.institution_roles_pk1 &lt;&gt;old.institution_roles_pk1; BEGIN FOR currow1 IN cursor0001 LOOP v_count =0; SELECT count(*) INTO v_count FROM layout_module_group where layout_pk1=currow1.layout_pk1 and module_group_pk1=currow1.new_mg_pk1; IF(v_count=0) THEN lmg_pk1 := layout_module_group_cr (layout_pk1 := currow1.layout_pk1, module_group_pk1 := currow1.new_mg_pk1 ); END IF; v_count =0; SELECT count(*) INTO v_count FROM user_roles where users_pk1=currow1.v_users_pk1 and institution_roles_pk1=currow1.v_old_ir_pk1; IF(v_count=0) THEN perform layout_module_group_rm (layout_pk1 := currow1.layout_pk1, module_group_pk1 := currow1.old_mg_pk1 ); END IF; END LOOP; RETURN NEW; END; $$ LANGUAGE plpgsql; Quit Postgres BBLEARN=#\\q Exit back to root. $ exit Start Learn. Tail the appropriate logs/tomcat/stdout-stderr file to ensure Learn is really started, then test. Solution to Unconnected sockets not implemented in a Q4 2015 DVM You’ve run into the “Unconnected sockets not implemented error” in a Q4 2015 Developer Virtual Machine. What can you do? This article will help. There is a patch that fixes the error, LRNSI-21817, but the Q4 2015 DVM is built from a slightly different version of Learn than what went GA. Hence an attempt to apply the patch will fail, telling you that the patch isn’t meant for the version of Learn you are running. What I did, and it worked for me, is to download the patch, unzip it, modify the bbpatch.mf file so that the DVM version is included in the list of compatible versions, re-build the patch, and apply it. Because there are no database changes involved, just inserting a couple of class files, BbPatch.sh ran without a hitch with this modified file. Following are the details. Hope this helps another developer! $ vagrant up $ vagrant ssh $ yum install zip $ yum install unzip $ cd /usr/local/blackboard/tools/admin $ ./ServiceController.sh services.stop $ ./BbPatch.sh download LRNSI-21817 $ mkdir tmp $ mv ./LRNSI-21817-1.bbp tmp/ $ cd tmp $ mkdir zipdir $ cp LRNSI-21817-1.bbp zipdir/LRNSI-21817-1.zip $ cd zipdir $ unzip LRNSI-21817-1.zip $ rm LRNSI-21817-1.zip $ vi bbpatch.mf **Change: ** Compatible: 9.1.201510/9.1.201510.1171621-9.1.201510.1171621 **To: **Compatible: 9.1.201510/9.1.201510.1171621-9.1.201510.1171702 $ zip -r foo.zip . $ mv foo.zip LRNSI-21817_4DVM.bbp $ cp LRNSI-21817_4DVM.bbp ../.. $ cd ../.. [root@localhost admin]# ./BbPatch.sh apply ./LRNSI-21817_4DVM.bbp [root@localhost admin]# ./BbPatch.sh apply LRNSI-21817_4DVM.bbp Blackboard Patch Client version 2.2.7 apply Blackboard Learn, Version 9.1.201510.1171702, /usr/local/blackboard Package repository /usr/local/blackboard/content/bbpatch/repository, remote [h ttps://bbprepo.blackboard.com/content/repositories/packages](https://community .blackboard.com/external-link.jspa?url=https%3A//bbprepo.blackboard.com/ content/repositories/packages) Identifier : LRNSI-21817 Description : Fixing issue with B2s that rely on outbound encrypted data Resolves bug(s) : LRN-106224 Date built : 2016-01-24 18:51:49 +0000 Compatible with : 9.1.201510.1171621 - 9.1.201510.1171702 Platform : Any Operations : Jar operations: File systemlib/bb-tomcatboot.jar: Update blackboard/tomcat/startup/StrictSSLSocketFactory.class File systemlib/bb-tomcat-bootstrap.jar: Add/Update blackboard/tomcat/startup/StrictSSLSocketFactory.class Package deployment guidance: Package scope: Host-only. Apply/rollback on all hosts Downtime requirement: Current host. Stop application before apply and rollback on the current host Validating package LRNSI-21817 for apply... Retrieving Blackboard Learn service status... File systemlib/bb-tomcatboot.jar is on the Tomcat classpath. Including file copy operation to apps/tomcat/lib/bb-tomcatboot.jar. File systemlib/bb-tomcat-bootstrap.jar is on the Tomcat classpath. Including file copy operation to apps/tomcat/lib/bb-tomcat-bootstrap.jar. Performing pre-apply validation... Are you sure you want to perform this operation? [Y/N]: Y Applying package LRNSI-21817... Preparing to update jar /usr/local/blackboard/systemlib/bb-tomcatboot.jar Checking/extracting file blackboard/tomcat/startup/StrictSSLSocketFactory.class Performing jar update... Copying bb-tomcatboot.jar to /usr/local/blackboard/apps/tomcat/lib/bb- tomcatboot.jar Preparing to update jar /usr/local/blackboard/systemlib/bb-tomcat- bootstrap.jar Checking/extracting file blackboard/tomcat/startup/StrictSSLSocketFactory.class Performing jar update... Copying bb-tomcat-bootstrap.jar to /usr/local/blackboard/apps/tomcat/lib/bb- tomcat-bootstrap.jar Package LRNSI-21817 applied successfully. [SUCCESS] Apply operation succeeded.",
    "tags": "DVBA",
    "url": "/dvba/faq.html"
  },{
    "title": "Feedback parameter definitions",
    "text": "Feedback parameter definitions Here are the feedback parameters returned when the feedback endpoint is called. The full and meta columns defines which fields are included based on the feedback query parameter. If it is set to true, you get the full response, and the full column will have a check. If it is set to false or omitted, you receive just the meta data, and Meta column will have an check Parameter Definition Full Meta hash the content hash used to reference the file by Ally as a Service check check feedback the feedback from processing the document, or null check check feedback.score score between 0 (low) and 1 (high) indicating the documents accessibility check   feedback.visibility visibility is the overall accessibility of your document: low, medium, high or perfect check   feedback.report the contents of the feedback report check   feedback.report.results the results of the feedback report check   feedback.report.results.Scanned was the document scanned? check   feedback.report.results.Scanned.score 0 = scanned, 1 = not scanned check   feedback.report.results.Tagged is the document tagged? check   feedback.report.results.Tagged.score 0 = untagged, 1 = tagged check   feedback.report.results.Ocred was the document OCRed? check   feedback.report.results.Ocred.score 0 = no, 1 = yes check   feedback.report.results.AlternativeText report on alternative text for images check   feedback.report.results.AlternativeText.snippets an array containing locations of detected issues check   feedback.report.results.AlternativeText.snippets[ ].page the page number containing the issue check   feedback.report.results.AlternativeText.snippets[ ].y0 the starting y axis location on the page of the issue check   feedback.report.results.AlternativeText.snippets[ ].x0 the starting x axis location on the page of the issue check   feedback.report.results.AlternativeText.snippets[ ].y1 the ending y axis location on the page of the issue check   feedback.report.results.AlternativeText.snippets[ ].x1 the ending x axis location on the page of the issue check   feedback.report.results.AlternativeText.score alternative text score between 0 (low) and 1 (high) check   feedback.report.results.Contrast report on color contrast check   feedback.report.results.Contrast.snippets an array containing locations of detected issues check   feedback.report.results.Contrast.snippets[ ].page the page number containing the issue check   feedback.report.results.Contrast.snippets[ ].y0 the starting y axis location on the page of the issue check   feedback.report.results.Contrast.snippets[ ].x0 the starting x axis location on the page of the issue check   feedback.report.results.Contrast.snippets[ ].y1 the ending y axis location on the page of the issue check   feedback.report.results.Contrast.snippets[ ].x1 the ending x axis location on the page of the issue check   feedback.report.results.Contrast.score contrast score between 0 (low) and 1 (high) check   feedback.report.results.HeadingsSequential report on sequential headings check   feedback.report.results.HeadingsSequential.snippets an array containing locations of detected issues check   feedback.report.results.HeadingsSequential.snippets[ ].page the page number containing the issue check   feedback.report.results.HeadingsSequential.snippets[ ].y0 the starting y axis location on the page of the issue check   feedback.report.results.HeadingsSequential.snippets[ ].x0 the starting x axis location on the page of the issue check   feedback.report.results.HeadingsSequential.snippets[ ].y1 the ending y axis location on the page of the issue check   feedback.report.results.HeadingsSequential.snippets[ ].x1 the ending x axis location on the page of the issue check   feedback.report.results.HeadingsSequential.score sequential headings score between 0 (low) and 1 (high) check   feedback.report.results.HeadingsHigherLevel.snippets report on PDF heading levels check   feedback.report.results.HeadingsHigherLevel.score higher-level headings score between 0 (low) and 1 (high) check   feedback.report.results.Title does the document have a title? check   feedback.report.results.Title.score 0 = No, 1 = Yes check   feedback.report.results.TableHeaders report on the existence of headers in tables check   feedback.report.results.TableHeaders.snippets an array containing locations of detected issues check   feedback.report.results.TableHeaders.snippets[ ].page the page number containing the issue check   feedback.report.results.TableHeaders.snippets[ ].y0 the starting y axis location on the page of the issue check   feedback.report.results.TableHeaders.snippets[ ].x0 the starting x axis location on the page of the issue check   feedback.report.results.TableHeaders.snippets[ ].y1 the ending y axis location on the page of the issue check   feedback.report.results.TableHeaders.snippets[ ].x1 the ending x axis location on the page of the issue check   feedback.report.results.TableHeaders.score table headers score between 0 (low) and 1 (high) check   feedback.report.results.LanguagePresence does the document contain language information check   feedback.report.results.LanguagePresence.score language presence score: 0 = No, 1 = Yes check   feedback.report.results.HeadingsPresence does the document contain headings? check   feedback.report.results.HeadingsPresence.score headings present score, 0 = No, 1 = Yes check   feedback.report.results.LanguageCorrect does the document language declaration match the language used? check   feedback.report.results.LanguageCorrect.detectedLanguage language code declared, i.e. ‘en’ for English check   feedback.report.results.LanguageCorrect.score language correct score, 0 = No, 1 = Yes check   feedback.report.results.HeadingsStartAtOne report on headings and whether they start at one check   feedback.report.results.HeadingsStartAtOne.snippets an array containing locations of detected issues check   feedback.report.results.HeadingsStartAtOne.snippets[ ].page the page number containing the issue check   feedback.report.results.HeadingsStartAtOne.snippets[ ].y0 the starting y axis location on the page of the issue check   feedback.report.results.HeadingsStartAtOne.snippets[ ].x0 the starting x axis location on the page of the issue check   feedback.report.results.HeadingsStartAtOne.snippets[ ].y1 the ending y axis location on the page of the issue check   feedback.report.results.HeadingsStartAtOne.snippets[ ].x1 the ending x axis location on the page of the issue check   feedback.report.results.HeadingsStartAtOne.score score between 0 (low) and 1 (high) check   feedback.report.results.LibraryReference Deprecated Not used. This will always be null and will be removed in a future release check   feedback.report.results.LibraryReference.score Deprecated Not used. This will always be null and will be removed in a future release check   feedback.report.suggestions the portion of the report that displays improvement suggestions check   feedback.report.suggestions.HeadingsSequential the document’s total score if all headings are made sequential check   feedback.report.suggestions.Title the document’s total score if the title is added check   feedback.report.suggestions.TableHeaders the document’s total score if all tables include headers check   feedback.report.suggestions.HeadingsStartAtOne the document’s total score if all headings hierarchy starts at one check   feedback.report.suggestions.AlternativeText the document’s total score if all images contain alternative text check   feedback.report.suggestions.Contrast the document’s total score if all color contrast issues are corrected check   feedback.report.suggestions.LibraryReference Deprecated Not used. This will always be null and will be removed in a future release check   formats not currently used, will always be null check check metadata document metadata check check metadata.name the name of the processed file check check metadata.decorative Deprecated Not used. This will always be null and will be removed in a future release check check metadata.description Deprecated Not used. This will always be null and will be removed in a future release check check metadata.fileType the file type of the processed file check check metadata.mimeType the mime type of the processed file check check metadata.isVersioned Deprecated Not used. This will always be null and will be removed in a future release check check metadata.isSeizureInducing will the processed file cause seizures? check check metadata.libraryReference Deprecated Not used. This will always be null and will be removed in a future release check check For more information about the Ally accessibility tests, visit the Accessibility Checklist page on help.blackboard.com.",
    "tags": "Ally",
    "url": "/ally/feedback-definitions.html"
  },{
    "title": "First Project: Gradle, Git and b2-starter-template",
    "text": "First Project: Gradle, Git and b2-starter-template After setting up the development workstation as described in the Development Workstation topic you may now build your first project based on the Blackboard basic-b2-template and gradle build environment. Start a Gradle Based Project In this step you will download the Blackboard provided project template, copy it to a new project directory named after your project, configure the template to reflect your project requirements by editing the build and bb-manifest.xml files. ‘GIT’ the basic-b2-template Blackboard provides a gradle-based template for Building Block development which is accessible from the Blackboard GitHub project repository: https://github.com/blackboard/basic-b2-template There are several ways which you may access the basic-b2-template. Notably: Download a zip file – this works fine if you do not have GIT installed and is available via a link on the project page. Clone the project to your desktop via the GitHub website via a link on the project page. Use the GIT command-line tools to clone and rename the project. In the case of the first two you have to manually copy/rename the directory to reflect your project name. The third approach, the GIT command-line is what is used in this tutorial - note this requires that you have installed GIT on your development workstation. Using GIT command-line tools The command for cloning a remote GIT repository is $ git clone  -o  So using ‘my-gradleB2’ as an example the template would be cloned byclone the template thus: Using a terminal change to your GIT managed project directory and $ git clone https://github.com/blackboard/basic-b2-template.git -o my-gradleB2 my-gradleB2 (re)Initialize your local repository $ git init Add the cloned files to your local git repo $ git add -A An important note about GIT It is all local until it is pushed to the remote repository – add, commit, remove, branch etc all happen on your local repository. Only if and only when you push your local repository to the remote do you impact the remote repository. Import the Project Into Your IDE You have cloned the remote repository and set up a local ‘working directory’ now you need to import the project into your IDE so that you can begin coding. The basic-b2-template is a gradle project thus so is the clone. NetBeans NetBeans recognizes and imports gradle projects such as the cloned basic-b2-template: Open NetBeans Select File: Open Project Navigate to your GIT dev directory and select the project. NetBeans recognizes and Imports the project with all it’s ‘gradleness intact.’ Eclipse Eclipse with the Gradle plugin (or STS) supports importing Gradle projects via Import&gt;Gradle&gt;Gradle Project menu. An Eclipse w/o the Gradle plugin requires the creation of the supporting Eclipse project files to import the project. This is done by running the Gradle Eclipse plugin: $ gradle eclipse    :eclipseClasspath    :eclipseJdt    :eclipseProject    :eclipse    BUILD SUCCESSFUL When the Eclipse plugin successfully completes, import the project as you would normally using Import&gt;General&gt;Existing Projects into Workspace. The schema folder in both NetBeans and Eclipse is generated outside the Web Pages folder – this is a manifestation of the template clone not an Eclipse or NetBeans issue – just drag it into the Web Pages folder. Edit the build.gradle and bb-manifest.xml files build.gradle The build.gradle file provides the necessary libraries for the build, dependency management for the project classpath and war file, and the target settings for maven and deployment of the Building Block. These must be edited to reflect your project requirements. You will make edits to three areas of the file: Term Definition ext or project.ext this specifies replacement variables for the build repository this specifies the location of the maven repository dependencies management of project dependencies ext (or project.ext) Set this section to reflect your remote development settings:   project.ext {      learnVersion = \"9.1.110082.0\"      deployServer = \"10.0.1.150\"      deployInstance = \"BBLEARN\"    } Term Definition learnVersion used in pulling the appropriate library jars for target version deployServer the IP or server name for the target development server (add “:&lt;port&amp;rt;” if not served from port 80) deployInstance the DB instance for the target development server Repository Set this section to reflect the Learn maven repository: repositories {    mavenCentral()    maven {     url \"https://maven.blackboard.com/content...ries/releases/\"    } } You may add additional maven repositories: maven {...} maven { url https://repo.myinst.edu/mavenrepo } Dependencies Set this section to reflect project dependencies: Term Definition providedCompile required but NOT built into WAR compile required AND built into WAR Gradle Dependency Management Documentation Blackboard jars should always be providedCompile to exclude them from the war file: providedCompile( \"blackboard.platform:bb-platform:$ext.learnVersion”)  { transitive = false } providedCompile( \"blackboard.platform:bb-cms-admin:$ext.learnVersion\" ) { transitive = false } providedCompile( \"blackboard.platform:bb-taglibs:$ext.learnVersion\" ) { transitive = false } NOTE: ‘transitive’ determines whether to pull all related library dependencies onto the build path. Supporting Libraries which need to be built into the war are added as ‘compile’: compile \"org.springframework:spring-aop:$ext.springVersion\",         \"com.googlecode.json-simple:json-simple:1.1\",         \"org.codehaus.jackson:jackson-mapper-asl:1.8.5\",         \"commons-logging:commons-logging:1.1.1\",         \"junit:junit:4.5\",         \"org.json:json:20090211\"    ~~~   Setting transitive to 'true' specifies a dependency that is reconciled by Gradle and places all libraries required to satisfy the dependencies on the build path. ~~~ java compile( \"org.hibernate:hibernate-core:$ext.hibernateVersion\" ) { transitive = true } bb-manifest.xml and bb-manifest-en_US.properties Set up the bb-manifest to meet the requirements for your project. The basic-b2-template provides the framework of a bb-manifest.xml file which uses internationalization bundles. There are two files that require editing: bb-manifest.xml bundles/bb-manifest-en_US.properties Both these files are located in the project WEB-INF directory. bb-manifest.xml The basic-b2-template bb-manifest minimally requires edits to the following noted areas for use in your cloned project.     &lt;name value=\"b2.name\" /&gt; &lt;--- this is changed in bb-manifest-en_US.properties         &lt;handle value=\"template\" /&gt; &lt;--- this should be changed to reflect the project name - such as my-gradleB2         &lt;description value=\"b2.description\" /&gt; &lt;--- this is changed in bb-manifest-en_US.properties         &lt;default-locale value=\"en_US\" /&gt; &lt;--- this may be left unchanged         &lt;version value=\"1.0\" /&gt; &lt;--- this may be changed to reflect the extension version         &lt;requires&gt;         &lt;bbversion value=\"9.1.110082.0\" /&gt; &lt;--- this should be changed to reflect the minimal target Learn version&lt;/requires&gt;          &lt;vendor&gt;         &lt;id value=\"mnmt\" /&gt; &lt;--- this should be changed to a four character id that reflects the extension origin  &lt;name value=\"Monument University\" /&gt; &lt;--- this should be changed to the vendor name                &lt;url value=\"http://www.monument.edu/\" /&gt; &lt;--- this should be changed to vendor URL               &lt;description value=\"Monument University\" /&gt; &lt;--- this should be a brief description of the vendor         &lt;/vendor&gt; bb-manifest-en_US.properties Bundle *.properties files provide the means to internationalize the bb- manifest sections that are visible in the UI and any text that is displayed as part of the extension’s user interface. b2.name=B2 Template  &lt;--- this should be changed to reflect the name of your extension, such as my-gradleB2 b2.description=Simple B2 template for starting new B2 projects.  &lt;--- this should contain a brief description of the extension's function. Build and Deploy Building and deploying is conveniently done via a terminal by running the gradle deployB2 task from within the top level directory of your project. $ gradle deployB2 :compileJava UP-TO-DATE :processResources UP-TO-DATE :classes UP-TO-DATE :war UP-TO-DATE :deployB2 BUILD SUCCESSFUL Total time: 12.423 secs Note that launching custom tasks may be configurable within your IDE. Adding a custom task enables a build and deploy cycle to be run entirely from within the IDE. Benefits Consistency and Control Use of Gradle, a VM, and a SCM such as GIT provide a consistent environment for development – across all projects, while providing a means of managing your code-base. Speed While average build-times may not significantly decrease, the significant time savings resulting from improved general project management and from the deployment feature of the Learn/Gradle dev environment adds up quickly when compared to a manual deploy cycle.",
    "tags": "Learn b2",
    "url": "/learn/b2/resources/first-project-using-gradle-and-git.html"
  },{
    "title": "First Steps",
    "text": "First Steps Before we start with the whole document and you start developing your own application, We have noticed that sometimes the terminology can end up in a confusion, that is why we want to make sure that all the terminology is clean and ready for everyone to start developing using our API. Please keep in mind that this only applies for Blackboard Collaborate Ultra Need credentials for a sandbox? We got you! If you need credentials in order to start developing (wether you are a client or a partner), please write us an email to developers@blackboard.com letting us know the following: Institution or company you are writing us from Introduce yourself! (Name, what do you do at the company) Let us know what you need! We will respond as soon as possible with the credentials! Please keep in mind that all credentials are reviewed first internally before being provided. Sandbox Limitations This is a test environment, hence, it is completely empty (it is not possible to move information from one environment to another) The environment has specific limitations (due to its nature, however collaborate in production has none of them) There is no GUI available on this environment. About key, secret and url! Please keep in mind that the credentials that you use for the scheduler are not the same to access using REST, they are completely different, when logging in into the scheduler you use username + password on a specific URL, on REST we use a KEY + SECRET on a specific URl. If you need your key + secret + url from your instance to start developing, please create a behind the blackboard ticket in order to receive this information. Basic Concepts This document is based on a presentation that we did to a client and we noticed that they vastly improved their questions and input on their own applications! We will group these concepts on 3 parts: Where Who Optional attributes or characteristics Where Here you will find a couple of terms that may be kind of confusing, but we will try to explain them as easy as possible: We use Sessions, this is defined correctly on this post, however, there is another term, and this is Instances. A Session can have multiple instances, a Session can exist without an instance, but there are no instances without a session, meaning Instances depend on Sessions to exist. The way Sessions and Instances co-exist and depend in one another, is that, When you create a Session, but no one has ever joined to it, there are no instances. Let’s say for example that you are an instructor on the Python 101 course, and you have 3 different groups: Morning group - has class from 8:00 am to 9:00 am Afternoon group - has class from 1:00 pm to 2:00 pm Night group - has class from 6:00 pm to 7:00 pm You have your course on learn with course id CS-PYTHON101 and you use the same course for all students, you also have a course room that is already setup on your course and ready to use. From the course room, you can create new Sessions, this instructor decided to create only one session, open session for all the classes for all 3 groups. When the first student (or the instructor) joins to the session at 8:00 am (or before if early entry is enabled ) an instance of the session is created!, Then, when the last student leaves, there is a 5 minute “grace” period for the instance to be finished, then the instance is completed and stored. Who For this part, we have 3 concepts that need to be reviewed: Enrollment User Attendee Enrollment This happens ONLY when you use the integrated enrollment tool within Blackboard Ultra, when using a course room, all the students within the course are automatically enrolled. User This happens ONLY when you allow Guest Access, meaning that users will see a window asking for their name when using a guest link. Attendee When an Enrolled user or an User join a Collaborate session, they both become attendees. Optional attributes or characteristics There are several attributes or characteristics (OAC) that apply for the Who and the Where. Where OAC Contexts When using collaborate, you may want to organize your Sessions per functional area if you are a company or per course if you are an institution. This is possible by using Context! Contexts allow you to group your sessions by a specific criteria, this is completely optional and when using Blackboard Collaborate integrated with Learn it is automatically populated with the course id data. Recordings The recordings are as easy to create by clicking a simple button when attending a collaborate session (instance), but how are they organized? Well, it is quite simple, a Session can have multiple Instances, an instance can have multiple recordings! Why? well, let’s say you click on the record button on your current instance, but by mistake you clicked the stop recording button, well, the instance recording will be saved and if you hit the record button again, the new recording will be correlated to the current instance + session. Meaning that you will have two recordings on the same instance! Recording is completely optional! Who OAC extUserName When an user is enrolled in a session* it is possible to set a parameter for the user in order to link the user to an external source, for example, learn uses user_id, it is possible to send from learn (or grab from there) the user id and store it on the user enrollment for future queries. *This applies only for REST API / LTI only, not available on the GUI. Video Resources These are some video resources that we have been working on to explain how REST API works: English Spanish (Some of them) Conclusion Rest API in collaborate is quite easy to use once all this concepts are clear!",
    "tags": "Collaborate",
    "url": "/collaborate/first-steps.html"
  },{
    "title": "Getting Started",
    "text": "Getting Started Blackboard Learn offers documentation and sample code for the SOAP-based Web Services directly in the user interface. The sample code gives you the ability to create re-usable libraries in both C# and Java. Once you build this library, you can import it into your IDE of choice and start writing code against them without having to solve the intricacies of Learn’s Web Service implementation or the WS-Security headers needed to interact with them. Also included in the source code is a fully functioning QA Desktop Application, which can be built in C#. Once built, you can test every Web Service Blackboard Learn offers with your mouse. In addition, there is a sample “Hello World” custom Web Service. Part of the Web Services framework allows you to create a customized web service to interact with data not available through the standard web service offering, but taking advantage of the security framework provided therein. To access the sample code and documentation, simply login to your Blackboard Learn instance and navigate to the System Admin Page. In the Building Block module, you will see a link for Web Services. Clicking this link takes you to the management interface for the Web Services. On the right hand side of the action bar, you will see buttons to download the Documentation and the Source Code. Of course, the real benefit of Web Services is that you can choose your development environment, language of choice, and you have full control over the code. You can modify your integration any time, without requiring the Blackboard System Administrator to change or schedule anything. Notes Blackboard’s SOAP Web Services implement WS-Security to authorize incoming messages. The way this works is fairly straight forward. The first step is to call ContextWS.initialize(). In the message payload, you will have a SOAP Header and it must contain a WS-Security tag – in this example -- and in that section, you will need a tag set equal to \"session\", and a tag set equal to \"nosession\". This method will return a session id and for the rest of the session, you will send session and _the session id returned from initialize_. The basic workflow is: ContextWS.intialize(), ContextWS.login(…) or ContextWS.loginTool(…), Initialize the services you need to access, call the methods you need, ContextWS.logout(). To see examples, check the Examples pages. All of the Web Services have their own initialize method. The names vary from service-to-service, but with the exception of ContextWS, they all take a boolean argument called ignore. This argument was added simply because the .NET sample code generator doesn’t work without those methods having at least one argument. Its called ignore, because it is ignored, so you set it to true or false without affecting anything.",
    "tags": "Learn soap",
    "url": "/learn/soap/getting-started/first-steps.html"
  },{
    "title": "First Steps",
    "text": "First Steps Using Building Blocks Developing extensions for Learn requires a development environment. Your development environment refers to (1) the development workstation on which you will be doing your development work - the actual coding, compiling, and debugging - and (2) the development server on which you will deploy and test your extension. This set of tutorials will provide instruction around setting up your development workstation, development server, and how to enable debugging of your code so that you can step through it line-by-line when trying to isolate issues or bugs. It also covers more generally the overall life cycle of the typical Blackboard Building Block development project. Development Workstation Your development workstation will host the software and libraries necessary for writing and building java web applications. This may be any software of your choice that is up to the task though most development is done using one of the more prominent Integrated Development Environments - Eclipse, Netbeans, or IntelliJ. This tutorial will focus on using Eclipse (with some notes re the use of Netbeans). Development Server Your development server will host an instance of Blackboard Learn, Developer Edition - a version of the Blackboard learning platform that we make available for development purposes that has the Content System, Community System, and Learning System all enabled to support up to 150 test users, 100 test courses, and 1000 test enrollment records. In many cases, developers choose to run Blackboard Learn, Developer Edition on their development workstation rather than on separate server hardware. Others choose to share a dedicated development server among multiple developers, each connecting to it from their individual development workstations. Still others have created their own virtual machine images that allow unwanted changes to be “thrown away” and easily restore to a vanilla installation of their development server. Supporting Libraries Blackboard ships Learn with various proprietary or open-source .jar files as resources. Blackboard includes or excludes these resources depending only on the needs of Blackboard Learn. We do not know which ones independent developers might want to use. When you build a Building Block, do not rely on the presence of any particular resource in the Blackboard Learn installation. Instead, include a copy of any necessary resources locally with your development project. Available Tutorials The following tutorials are available to help you get started with Building Block development: Building Block Development Life Cycle Enabling Debugging First Project: Gradle, Git, and basic-b2-template",
    "tags": "Learn b2",
    "url": "/learn/b2/getting-started/first-steps.html"
  },{
    "title": "Getting Started",
    "text": "Getting started with REST Blackboard offers a suite of education technology tools, both software and hardware. REST stands for Representational State Transfer. It is a lightweight, flexible web service architecture that allows HTTP commands to be sent to Web Applications without unnecessary overhead. We provide specific examples and tutorials about using Blackboard REST APIs, particularly when a workflow is more complicated. For more general questions about REST and using REST APIs, see any of the numerous tutorials available online. Most commonly used resources include: Blackboard’s developer portal Blackboard’s Github repos Before You Get Started Blackboard offers lots of tools to help you develop an application, plugin, or other integration for use with Blackboard products like Blackboard Learn and Blackboard Collaborate. The most important ones are your accounts with these sites: Blackboard Developer Portal is where you register applications so they can work with Blackboard products. It’s also where you get your own key and secret that you need to authenticate your application with Blackboard products. Blackboard Developer Community is where you learn to develop with Blackboard products, get the latest news, and discuss with other Blackboard integrators. Note that the Developer Portal and Developer Community require separate accounts. Register as a Blackboard Developer Blackboard Learn REST integrations begin at the Developer Portal. This is where you register REST Applications and get the ID, key, and secrets. In the portal, you can see which client systems are using the integrations. Signing up is free, and you can develop your integration at no cost. There may be cost involved in deploying your integration, but before that happens, you’ll have to speak with us. To discuss deploying your application, please contact us at developers@blackboard.com.Before you can authenticate your project with Blackboard applications, you need to be a registered Blackboard developer.To register as a Blackboard developer: Go to https://developer.blackboard.com/ and select Sign Up. Read and agree to the terms and conditions. Provide your email address, a password, your first name and last, and select the checkbox to prove you are human. Select Create Account and you’re on your way. For more information about the Developer Portal please see this document Note: If you are a Blackboard client, a Blackboard Partner / Vendor / Developer of a REST Application should NEVER tell you to go to the developer portal and create an App ID with the associated key/secret to install their application. They should never tell you to apply for a Rate/Site increase for their application. Blackboard DOES NOT support that model. Every REST Application developer should give you an App ID to install their REST App and tell you how to configure a system role for its use. Period. The REST Application developer needs to request the increases they need to run their application themselves. If they ask you to go to developer.blackboard.com and get an App ID/Key/Secret, please tell them that is wrong. They should have exactly one App ID for their production REST application that they are asking you to install. Contractors are an exception to this policy as they are producing an integration on your, the Blackboard client, behalf. Questions regarding the policy and whether you are impacted may be asked here, or posted to developers@blackboard.com Join the Community The Blackboard developer community is the best place to find more information about integrating your project with Blackboard products. You will benefit from the community most by joining in.To register in the Blackboard developer community: Go to Blackboard Developer Community and select Register. If your organization is a Blackboard client or partner organization and you have a Behind the Blackboard login, select Behind the Blackboard Login. Otherwise, select Community Site Login. Enter your email address to receive a link via email. In your email’s inbox, find the email sent by Blackboard. You might have to check your spam or junk folder. The email’s subject is something like Blackboard Community: Email Validation. Select the link in your email. You will be taken to a registration page. In the registration page, complete all the required fields and select Create Account. What Blackboard Application Do I Need? Your Blackboard-compatible application can work with one or more of Blackboard’s tools. How you build an integration with Blackboard software and hardware depends on which tools you want to integrate with. The tools you’ll want to use depend on what you want to do. I want to programmatically… You’ll need to… Add files, text, and the like to Blackboard Learn Authenticate with Blackboard Learn via REST API Check out our Learn REST API reference Bulk add users to Blackboard Learn Authenticate with Blackboard Learn via REST API Check out our Learn REST API reference Set up video conference sessions Authenticate with Blackboard Collaborate via REST API Check out our Collaborate REST API reference Invite users to video conference sessions Authenticate with Blackboard Collaborate via REST API Check out our Collaborate REST API reference Get a list of users who attended a video conference session Authenticate with Blackboard Collaborate via REST API heck out our Collaborate REST API reference Get Development Instances of Blackboard Applications Blackboard makes available instances of Blackboard applications that you can use to build projects that integrate with Blackboard applications. Among others, we offer these popular developer instances. Blackboard does not charge a fee for entry-level use. AWS instance of Blackboard Learn While Blackboard does not charge for entry-level use, AWS may charge various fees for their services. Developer access to Blackboard Collaborate For more information about developer versions of Blackboard applications, see Developer Versions of Blackboard Applications. Developing with Blackboard Collaborate Things are a little different for developing with Blackboard Collaborate. For more information, see the Collaborate REST API Reference and then email us at at developers@blackboard.com. We’ll set you up with a key and secret for Blackboard Collaborate. Then read about how to use your key and secret to authenticate with Collaborate. The rest of the present topic pertains only to developing with Blackboard Learn. Developing with Blackboard Learn Go to the developer portal and register as a Developer if you haven’t already, and then register your application to get a key and secret. Use your key and secret to authenticate with Learn. Look at the Learn REST Reference Check out the Learn REST API Reference. In particular,look at the range of endpoints available. Check the Since version for endpoint that interest you. This version number indicates the version since which the endpoint has been available. This way, you can make sure that your Blackboard server is is able to use it. Authentication/Authorization Authentication for REST Integrations follows the OAuth 2.0 RFC Standard. Essentially, every developer has a unique key and secret associated with each application they create. They make an HTTP Post to the API requesting client_credentials, which returns an authorization token that grants the application access to the Learn REST API for one hour. This token is then passed in subsequent REST calls until such time that the token expires. This can be done either with Basic Authentication or, as of Blackboard Learn 3200.7 in SaaS or Q4 2017 for self- and managed-hosted clients, using Three-Legged OAuth. Calling Services Once your application acquires an access token, it only needs to pass that token as a Bearer token in the Authorization header of your API calls. Review the authentication documentation in the above section for an overview, or find more specific details on the available API endpoints and APIs on the Developer Portal’s Swagger API document.In its current implementation, Blackboard Learn REST APIs does not support Cross-Origin Resource Sharing (CORS). To learn about this and see an example to workaround this with Angular2, see the blog entitled Cross-Origin Resource Sharing; or Why I Can’t Use AJAX with Learn APIs. Configure an Instance of Learn to Work with Your Application Once you have registered with the developer portal and built an integration, deploying to a Blackboard Learn SaaS instance is a simple step. The Blackboard Learn administrator that wants to use your integration needs the Application ID you got from the developer portal. The administrator will also need to create a Blackboard Learn user account with sufficient entitlements to associate with your integration. This gives the administrator full control over the entitlements used by your application. For more information on how to configure Learn, please see Managing REST Integrations in Learn: The REST Integrations Tool for System Administrators. Glossary Term Definition Application ID Unique identifier for the application used to integrate with theBlackboard Learn REST Services. Each unique integration should have its own Application. Application Key Each application is assigned a unique key. This is used to authorize REST APIcalls against Blackboard Learn. Application Secret Each application is assigned a unique secret. This is used to authorize RESTAPI calls against Blackboard Learn. Access Token A token is a unique string representing an implicit authorization granted byan OAuth 2.0 Service Provider. CRUD Create, Read, Update, Delete More Information We will continue to add new examples, tutorials, and code samples, so make sure to check these links regularly. Developer Portal REST Documentation",
    "tags": "Learn REST",
    "url": "/learn/rest/getting-started/first-steps.html"
  },{
    "title": "Forum Events",
    "text": "Forum Events Blackboard Learn’s Caliper Analytics stream emits a ForumEvent to cover five use cases: User posts a non-gradable thread User posts a gradable thread User posts an assignment conversation comment User posts a non-gradable thread for group discussion User posts a group conversation comment Here is some of the key data that is associated with these events: ForumEvent - Non-Gradable Thread actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user action - Created or Modified or Deleted ForumEvent - Gradable Thread actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user object.forumPointsPossible - number of possible points action - Created or Modified or Deleted ForumEvent - Assignment Conversation Comment actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user object.forumPointsPossible - number of possible points action - Created or Modified or Deleted ForumEvent - Non-Gradable Group Thread actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user group.subOrganizationOf - course information action - Created or Modified or Deleted ForumEvent - Group Conversation Comment actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user object.forumPointsPossible - number of possible points group.subOrganizationOf - course information action - Created or Modified or Deleted Sample Payload { \"sensor\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"sendTime\": \"2021-01-05T14:48:59.462Z\", \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"data\": [ { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/ForumEvent\", \"id\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/9eda44a94869439d8dd77496de1db568\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"action\": \"Created\", \"object\": { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/Forum\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/discussion/_12345_1\", \"name\": \"Placeholder 2\", \"description\": \"\", \"threadPointsPossible\": 20, \"dueDate\": \"2021-01-12T06:59:00.000Z\", \"isDiscussion\": true, \"contentId\": \"_12345_1\", \"extensions\": {} }, \"generated\": { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/ForumPost\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/discussion/_12345_1/post/_12345_1\", \"name\": \"\", \"description\": \"\", \"parentId\": \"_12345_1\", \"threadId\": \"_12345_1\", \"fileAttached\": false, \"length\": 1468, \"anonymous\": false, \"firstPost\": false, \"extensions\": {} }, \"eventTime\": \"2021-01-05T14:48:52.852Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/1b5fe13ea75b4e9f97f23da85600b6f7/members/9eda44a94869439d8dd77496de1db568\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_12345_1\", \"bb:course.externalId\": \"BIO-101\", \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/9eda44a94869439d8dd77496de1db568\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/1b5fe13ea75b4e9f97f23da85600b6f7\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"roles\": [ \"Learner\" ], \"status\": \"Active\" }, \"federatedSession\": { \"startedAtTime\": \"2021-01-05T14:48:52.852Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/85A3CA3571288387778479A527A9D478\", \"type\": \"LtiSession\", \"name\": \"85A3CA3571288387778479A527A9D478\", \"dateCreated\": \"2021-01-05T14:48:52.852Z\", \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/9eda44a94869439d8dd77496de1db568\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } } }, \"extensions\": {}, \"session\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/85A3CA3571288387778479A527A9D478\", \"type\": \"Session\" } }, { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/ForumEvent\", \"id\": \"5c7a2f72-6806-49c3-8bb2-0677df17f7a8\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/9eda44a94869439d8dd77496de1db568\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"action\": \"Modified\", \"object\": { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/Forum\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/discussion/_12345_1\", \"name\": \"Placeholder 2\", \"description\": \"\", \"threadPointsPossible\": 20, \"dueDate\": \"2021-01-12T06:59:00.000Z\", \"isDiscussion\": true, \"contentId\": \"_12345_1\", \"extensions\": {} }, \"generated\": { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/ForumPost\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/discussion/_12345_1/post/_12345_1\", \"name\": \"\", \"description\": \"\", \"parentId\": \"_12345_1\", \"threadId\": \"_12345_1\", \"fileAttached\": false, \"length\": 1474, \"anonymous\": false, \"firstPost\": false, \"extensions\": {} }, \"eventTime\": \"2021-01-05T14:48:52.852Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/1b5fe13ea75b4e9f97f23da85600b6f7/members/9eda44a94869439d8dd77496de1db568\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_12345_1\", \"bb:course.externalId\": \"BIO-101\", \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/9eda44a94869439d8dd77496de1db568\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/1b5fe13ea75b4e9f97f23da85600b6f7\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"roles\": [ \"Learner\" ], \"status\": \"Active\" }, \"federatedSession\": { \"startedAtTime\": \"2021-01-05T14:48:52.852Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/85A3CA3571288387778479A527A9D478\", \"type\": \"LtiSession\", \"name\": \"85A3CA3571288387778479A527A9D478\", \"dateCreated\": \"2021-01-05T14:48:52.852Z\", \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/9eda44a94869439d8dd77496de1db568\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } } }, \"extensions\": {}, \"session\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/85A3CA3571288387778479A527A9D478\", \"type\": \"Session\" } } ] }",
    "tags": "Standards",
    "url": "/standards/caliper/events/forum-events.html"
  },{
    "title": "LTI 1.3/Advantage - 4-Part Webinar",
    "text": "LTI 1.3/Advantage in Learn - 4-Part Webinar Overview This document contains links to a complete demonstration of setting up and using https://github.com/blackboard/BBDN-LTI-Tool-Provider-Node. Shout out to Scott Hurrey &amp; Eric Preston and the team (everyone you see on the commit list at the repo!) for all their work and help with this. Getting Started The most important thing you can do to begin is to read, and understand the specification. We STRONGLY encourage you to join the IMS. There are many members-only resources. Video Part I. Video Part I is a demonstration of setting up and running https://github.com/blackboard/BBDN-LTI-Tool-Provider-Node on your local box to use SSL. Prerequisite: Follow ALL OF THE INSTRUCTIONS in the README of the git repo to clone a local copy and set up Redis. Video Part II. Video Part II demonstrates registration of your local copy of BBDN-LTI-Tool-Provider-Node (BLTPN) on the developer portal and using the values from the registration to configure your local BLTPN. Video Part III. Video Part III demonstrates use of the 1.3 Tool in Learn, creating a deep-linking managed placement, using the link to create content with the BLTPN tool. Near the end of the video we look at how to use LTI 1.3 Names and Roles to get all of the users in the course from which the link was clicked/launched. Video Part IV. Video Part IV is a demonstration of custom parameters from the Deep Link launch request and also a review of Names and Roles in that request. The purpose of Names and Roles is to let the Tool Provider get all of the memberships in the course, and the role of each member with a call to one endpoint using LTI 1.3 security. Comming soon: A screenshot of how this looks from the BLTPN - showing the first two members and their roles that were retrieved from the course.",
    "tags": "Standards",
    "url": "/standards/lti/test-tool/four-part-video-tutorial.html"
  },{
    "title": "Blackboard REST API Framework",
    "text": "The Blackboard REST API Framework Blackboard’s new REST API Framework is a giant step forward for integrating with Blackboard Learn. By moving the integration from in-process code to a separate machine the health of your Blackboard Learn instance is dramatically improved by lowering complexity and reducing the amount of code running in a single location. The new REST API and Developer Portal are a work in progress and will continually grow in functionality as Blackboard Learn, the REST APIs, and the Developer Portal continue to mature. The Actors in REST API Use Cases There are three actors in the REST API use case: Developer:: This is the person who writes an application that uses the new REST APIs. Through the application the developer manages authorization using the registered application’s OAuth Key and Secret, any data sent to or received from Blackboard Learn, and tracks application entitlements required for operation. Developers are limited to non-production testing pursuant to the applicable REST Developer Agreements. Blackboard Learn Administrator: By default, no Applications can access the REST APIs. A Blackboard Learn Administrator must enable each app from the Blackboard Learn Admin Panel before access is granted. This is done by creating an integration using the Blackboard Learn Admin REST API Integrations tool using the developer provided application Id* and a User with the required entitlements as specified by the developer. Important Note: By default NO integrations are enabled and the Blackboard Learn server will not allow integrations without a Blackboard Learn Administrator taking action. Blackboard Learn Administrator: The Developer Portal: This is a new website (https://developer.blackboard.com) where a developer can browse the REST API documentation, register as a REST Developer, and register application references for integrating with Blackboard Learn. The REST API Framework Actors, interactions, and data paths NOTE: We do NOT support a model where the developer of the REST Application requires the Learn Administrator to get the Application ID, key, and secret for installing the developer’s application on the Learn system. The developer will get one APP ID, key and secret for the one application. The developer is responsible for configuring the key and secret on their server. For security reasons, the key and secret should never be shared with the client or any other another party. The REST Application can determine which institution requests are coming from by examining the FQDN in the requests. There is no need for installing a separate Application ID for a given vendors application on each Learn instance. How These Three Actors Work Together to Enable Blackboard Learn REST Integrations A developer (A) - or organization - decides that they want to create a new application which uses the Blackboard Learn REST APIs. She reviews the documentation and signs up inside the developer portal (C). Once she registers, she may create one to many applications. Creating an application provides an OAuth Key and Secret which is used to authorize Blackboard Learn REST API access and an Application ID that is used to approve Blackboard Learn instances. The developer uses the Blackboard Learn Admin REST API Integrations tool on a Developer Virtual Machine (B) or their Test instance of Blackboard Learn (B) to enable access within Blackboard Learn by providing the application ID for the particular application in development. Once the Application has been enabled, the developer may now issue REST requests against the specific Learn server. These HTTPS requests are issued directly against the Learn instance and are secured by OAuth 2.0. Once the application development and testing is completed, the developer shares the application Id and the required entitlements with the Blackboard Learn admin to enable access within Blackboard Learn for the particular application. The admin inputs the application Id provided by the developer and assigns a Blackboard Learn User that the integration will run as. The role for this user must have the entitlements as requested by the developer. This user can be an existing user or a newly created user specific to the application. The application will run as this user in Learn and will thus have all the rights that the user has in the system. If the admin wants to allow the application only READ access, this can be done with the security system already available in Learn by assigning the user role READ only entitlements. Data Exchange between the Actors The request BODY or response is never sent to the developer portal. Personal data is exchanged between the application and Blackboard Learn system only - no personally identifiable data is shared with the portal. Therefore, all data may remain within the Learn server and REST application regions. Primary key identifiers (e.g. Learn PK1 for User or Course) are shared with the portal for purposes of request logging and error messages. Note that in an upcoming release of Learn these PK1s will also be anonymized so no PII information is ever communicated outside the bounds of Learn-to-application exchanges. Data Flow Pre-authorization The developed application first makes an authorization request to their Learn server. This request contains the OAuth Key and Secret provisioned on application creation in the developer portal. Learn receives the request and asks the Developer Portal for a TOKEN if the KEY/SECRET are correct and valid for that Learn instance. The Developer Portal returns a response to Learn containing a TOKEN if validation was successful. If validation is successful Learn caches and returns the TOKEN in the response to the application or returns a 401 Invalid client credentials. Note: Tokens have a lifecycle of one hour and currently are not revocable. Post-authorization Once authorized, the application may then make data oriented requests to Learn by including the issued Token. Developer data oriented requests are processed by Learn which returns response data to the requesting application. a. Learn checks the local cache to validate the TOKEN – if valid it runs and returns the request response. b. In a background thread Learn contacts the developer portal indicating a specified request was used by a TOKEN on a Learn server. c. The developer portal responds to Learn to indicate if the TOKEN is still valid (not revoked) and is still running under the rate limits. If the TOKEN has been revoked or rate limits have been reached, all future requests for that token will fail. Note: Learn sends REST transaction and error log messages to the portal for purposes of API management and usage. The data sent to the portal includes the Learn Instance ID, Developer Application ID, and the REST API used (GET /users/ for instance). Rate Limiting In the background, the Learn instance securely communicates with the Developer Portal to enable rate limiting on the Developer Application. This is done by telling the Portal how many and which type of REST calls are being issued to Learn. For the duration of the technical preview we have set the rate limit on a developers suite of applications to individual institution integrations at 10,000 requests per 24 hour period. As the Technical Preview progresses we will be collecting data on usage which will be analyzed to determine Customer and third party developer production grade rate limits when the Technical Preview is lifted.",
    "tags": "Learn Rest",
    "url": "/learn/rest/getting-started/framework.html"
  },{
    "title": "Retrieve the feedback for a file",
    "text": "Retrieve the feedback for a file Once the file is processed, the feedback can be retrieved Endpoint GET /api/v2/clients/:clientId/content/:contentHash Path Parameters clientId - Path parameter - Your Ally Client ID contentHash - Path parameter - The content hash from the previous endpoint Body Parameters None Query Parameters feedback - Query parameter - Whether feedback information should be returned. Should be true, false or omitted. Expected response For more information on the contents of this JSON, visit the feedback definitions page. feedback=true { \"hash\": \"Mi4gSGVhZGluZ3NfdGFnZ2VkX2luY29ycmVjdGx5LnBkZjo4NkE3NEJGOTUxRDA2NEM4Qzk1ODUyMDI0NEQ0REJBNkM4RDdGRjJCOmFwcGxpY2F0aW9uL3BkZg==\", \"feedback\": { \"score\": 0.4292113158749556, \"visibility\": \"medium\", \"report\": { \"results\": { \"Scanned\": { \"score\": 1 }, \"Tagged\": { \"score\": 1 }, \"AlternativeText\": { \"snippets\": [ { \"page\": 3, \"y0\": 397.45, \"x0\": 72, \"y1\": 720, \"x1\": 526 }, { \"page\": 4, \"y0\": 394.81, \"x0\": 72, \"y1\": 720, \"x1\": 476.8 }, .... ], \"score\": 0 }, \"Contrast\": { \"snippets\": [ { \"page\": 0, \"y0\": 588.6369, \"x0\": 63.583138, \"y1\": 612.7333, \"x1\": 385.0053 }, { \"page\": 1, \"y0\": 688.4769, \"x0\": 63.583138, \"y1\": 712.5733, \"x1\": 473.90308 }, ... ], \"score\": 0.9442992157651318 }, \"HeadingsSequential\": { \"snippets\": [ { \"page\": 2, \"y0\": 583.18, \"x0\": 72.024, \"y1\": 620.98, \"x1\": 233.324 } ], \"score\": 0.9230769230769231 }, \"HeadingsHigherLevel\": { \"snippets\": [], \"score\": 1 }, \"Title\": { \"score\": 0 }, \"TableHeaders\": { \"snippets\": [ { \"page\": 1, \"y0\": 344.09, \"x0\": 77.664, \"y1\": 645.45996, \"x1\": 517.17 } ], \"score\": 0 }, \"LanguagePresence\": { \"score\": 1 }, \"HeadingsPresence\": { \"score\": 1 }, \"LanguageCorrect\": { \"detectedLanguage\": \"en\", \"score\": 1 }, \"HeadingsStartAtOne\": { \"snippets\": [ { \"page\": 0, \"y0\": 586.06, \"x0\": 72.024, \"y1\": 620.26, \"x1\": 376.75403 } ], \"score\": 0 }, \"LibraryReference\": { \"score\": 0 } }, \"suggestions\": { \"HeadingsSequential\": 0.4306552764930626, \"Title\": 0.4471530009744932, \"TableHeaders\": 0.47092573373138025, \"HeadingsStartAtOne\": 0.44798280391034667, \"AlternativeText\": 0.6169261962288668, \"Contrast\": 0.4515796153846155, \"LibraryReference\": 1 } } }, \"formats\": null, \"metadata\": { \"name\": \"2. Headings_tagged_incorrectly.pdf\", \"decorative\": null, \"description\": null, \"fileType\": \"pdf\", \"mimeType\": \"application/pdf\", \"isVersioned\": false, \"isSeizureInducing\": false, \"libraryReference\": null } } feedback=false or omitted { \"hash\": \"RGV2ZWxvcGVyIFJlbGF0aW9ucyBhbmQgU3RhbmRhcmRzIFRlYW0gRGVzaWduLnBwdHg6Qz\", \"feedback\": null, \"formats\": null, \"metadata\": { \"name\": \"Developer Relations and Standards Team Design.pptx\", \"decorative\": null, \"description\": null, \"fileType\": \"presentation\", \"mimeType\": \"application/vnd.openxmlformats-officedocument.presentationml.presentation\", \"isVersioned\": false, \"isSeizureInducing\": false, \"libraryReference\": null } } Testing with cURL curl \\ -H \"Authorization: Bearer myJwtToken\" \\ https://prod.ally.ac/api/v2/clients/:clientId/content/:contentHash",
    "tags": "Ally",
    "url": "/ally/get-feedback.html"
  },{
    "title": "Getting Involved",
    "text": "Be a part of the Community! Getting involved in the Developer community is easy and with options to suit your goals… If you have not already done so, register for a Blackboard Developer Community account to interact. Its free, and gives you the ability to participate in all of the Blackboard Communities. If you are interested in contributing to the blogs here on the Community site, let us know. Build a tutorial If there is an area of the product or a technology that you feel deserves more or better documentation, please consider working with us to build a tutorial so that we can share that information with the community. Host a webinar Please consider hosting a Webinar on any topic that you feel would benefit the developer community. We are able to provide a conference line and Collaborate software to support your webinar. Contact us if you are interested. The Developer Office Hours is interested in hosting your presentation. Contact us if you have a topic on which you would like to present. Contribute an idea for a Building Block or LTI Tool Collaborate on a project Share your solution Link to your blog Present at a conference or user group event Check the Calendar of Events for upcoming deadlines or regularly meeting groups which may benefit from your experience Host an event E-mail BbDN with your event details so that we can add it to our events calendar. Give us feedback Sponsor an event",
    "tags": "Community",
    "url": "/community/getting-involved.html"
  },{
    "title": "Getting Started With Caliper",
    "text": "Getting Started With Caliper Caliper Analytics is an IMS Global standard focused on the delivery of consistent event tracking across campus applications. For more information on the Caliper Analytics specification, visit the IMS site here. Caliper is implemented in Blackboard Learn as the Learn Activity Stream. This data is stored in an external system called the Caliper Event Store. This server lives in the Blackboard Cloud and is not externally accessible at this time. As a result of its location in the Cloud, it is also only currently available on Blackboard Learn SaaS deployments. The data is then used to fuel Activity Reports in the context of Blackboard Learn. These are currently available for Blackboard Assignments, Assessments, and Kaltura Media assignments when using Kaltura’s LTI integration and Blackboard Learn SaaS. For more information on Kaltura integrations, visit the Kaltura web site here. From a Developer standpoint, Caliper is available in two ways: sending events to the Blackboard Learn Activity Stream, and subscribing to the Blackboard Learn Activity Stream as an additional Event Store. This section of the Blackboard standards Developer Community will dive into both of these options, with sample code and supporting documentation.",
    "tags": "Standards Caliper Getting Started",
    "url": "/standards/caliper/getting-started/getting-started-with-caliper.html"
  },{
    "title": "Getting Started With LTI",
    "text": "Getting Started With LTI Overview Learning Tools Interoperability (LTI) is a standard from the IMS Global consortium. This standard focuses on contextual launches and grade return. For more information about the standard, see Learning Tools Interoperability. Note that Blackboard Learn supports two versions of LTI: 1. LTI 1.1 2. LTI 1.3/Advantage This getting started guide is focused on LTI 1.3/Advantage. LTI 1.1 has been deprecated by the IMS Global, and it’s been around for over 10 years. If you are building a new tool, please use LTI 1.3/Advantage. LTI 1.3/Advantage The link above takes you to the IMS Global page for LTI Advantage. LTI Advantage consists of the following four specifications: 1. LTI Core (AKA LTI 1.3) 2. Deep Linking 3. Names and Roles 4. Assignments and Grades Additional companion specs will be released as they are developed. Blackboard Learn supports all of the above LTI Advantage specs, as well as the new Course Group spec which will be published soon. It is imperative that you read the specs from the IMS Global. They refer to other specifications that LTI Advantage is based on, such as the OIDC specification, JWT, and OAuth 2. We highly recommend you familiarize yourself with these specifications. Start with the IMS Security Framework here https://www.imsglobal.org/ims-security-framework Continue with the LTI Advantage specs here https://www.imsglobal.org/activity/learning-tools-interoperability You can test your tool with the IMS LTI Reference Implementation here: https://lti-ri.imsglobal.org/. It is written in Ruby and is open source. We have a sample LTI tool written in React and Node.js which we discuss in a later section. For IMS members there are other LTI resources here: https://github.com/IMSGlobal/ltibootcamp Registering Your Application We will go into detail on how to develop an LTI Advantage application in another section, but there are many resources avaiable on how to build an application in the programming language of your choice. In this section we cover how you register your application with Blackboard and deploy it to a Learn instance. Registration and deployment are not covered in the specification (yet), and each LMS vendor handles it slightly differently. Blackboard Developer Portal The first thing to understand about registering your application is that Blackboard has you register your tool ONCE with our developer portal here https://developer.blackboard.com. This is a central, self-service application, running in AWS where you enter information about your application, and are given the values you need for your application to work with LTI Advantage and Learn. It is also the same place you get the ID, key, and secret if you are going to use our public REST API. NOTE: Do not ask institutions to register your tool with the Blackboard Developer Portal. You register it ONCE with Blackboard and institutions can deploy it with the Client ID you give them. Information you Provide Domain We will use the terms Application and Tool interchangeably throughout this document. What we refer to as an Application may be different than how you see it. For Blackboard Learn, an Application is a web application, accepting GET and POST requests at a URL. That application is defined by its fully-qualified domain name (FQDN). An application can have many FQDNs, but two applications cannot share the same FQDN. The reason has to do with needing to be able to immport course archives, such as from IMS Common Cartridge. If there are LTI links in that archive the only way we have today to map those links to a particular LTI Application is through domain matching. If that seems like a limitation, please read on. LTI 1.3 Fields The LTI 1.3 spec defines the information you must provide to a Platform (LMS) such as Blackbaord Learn. Those values are: 1. OIDC Login initiation URL - this is the URL that Learn makes a GET request to in order to initiate an LTI launch. Without going into too much detail, the OIDC login establishes the identity of the user launching and you validate that you recognize this person. Due to the way that 3rd-party-initiated logins work in OIDC, you are not given the Client ID, so you must determine that by including a unique registration ID on the OIDC Login URL. What you provide is completely up to you, but it must distinguish a Blackboard login request from a request from any other LMS. 2. Tool Redirect URL(s) - This is the URL to which the LTI launch is POSTed. An LTI launch is a FORM POST with a form parameter named `id_token`. That `id_token` is a JWT that you then parse, verify, and handle. You can provide as many Tool Redirect URLs as you like, separated by commas in the UI, but we strongly recommend you provide only **ONE**. There is enough information in the id_token JWT for you to determine what to do with the LTI launch. Think of your web application as a router for LTI. You may have one or you may have hundreds of \"applications\" behind that \"router\", directing LTI launches to their appropriate places. 3. Tool JWKS URL - this is the URL for your public key with which Learn validates that the messages it receives (such as Deep Linking, Names &amp; Roles, Assignment &amp; Grades) are from your application. It must adhere to the JWKS specification. 4. Signing Algorithm - Blackboard currently supports RS256 and RS512. We can support more as we are requested to do so. Custom Parameters The LTI spec supports the notion of custom parameters with a launch. These are arbitrary name=value tuples that you can provide to uniquely identify the launch, or any other piece of information you need from the platform at launch time. See the following two documents on how to use substitution parameters within custom parameters to receive context-specific data on an LTI launch: IMS LTI 1.3 Parameter Substitution Blackboard Learn Template Variables Information you Receive Once you have registered your application with the Blackboard Developer Portal, you will receive [almost] all the information you need to configuration your application to receive LTI 1.3 launches from a Blackboard Learn instance. 1. Application ID - this is the same as the Client ID in the OIDC spec. Because we already had the concept of registering an application for using our public REST API, and we use the same UI to register for both, we call it Application ID in some places, and Client ID in others. We apologize in advance for the confusion this causes. 2. Issuer - is always https://blackboard.com because Blackboard is issuing the credentials 3. Public keyset URL - Blackboard’s public JWKS URL so you can validate the signature of messages a Learn instance sends you 4. Auth token endpoint - the endpoint you use to get an OAuth 2 Bearer Token if you wish to make service calls, such as Assignment &amp; Grades, or Names &amp; Roles back to Learn 5. OIDC auth request endpoint - the endpoint you respond to after you receive an OIDC login initiation request from Learn. NOTE: You will also receive an application key and secret. These are your credentials for using our public REST API. Be sure to save these off as you won’t be able to get back at them later. We do not store the secret on our side. LTI Placements In Blackboard Learn the way an LTI tool is surfaced in the user interface (UI) is through the definition of one or more Placements. An application developer can define these placements so a Learn admin doesn’t have to. There are currently six types of placements you can create: Type Description Options Deep Linking Supports LTI Deep Linking to get content in outline or editor Allow student access Course Content Can be placed in the course outline or editor Can be graded Course Appears in Ultra Books &amp; Tools, Original Tools Allow student access System Appears in Ultra Base Nav Tools, Original Institution module   Admin Appears in Admin Tools module   UEF Special type for extending the Ultra UI; see UEF docs   Placement properties In the table above some placements allow you to control whether students have access or not. Some placements allow you to configure if it can be graded or not. All placements have the following properties in common: Name - up to 50 characters Description - up to 1000 characters; only shows up in the admin area currently Type - see above Target link URI - because target_link_uri is part of the OIDC spec we support it here, however it’s really just property of the placement. It can be anything you want. We don’t launch to it, e.g., no FORM POST to this URL. It can be used for routing within your application. Icon - we currently suggest a 50x50 pixel icon (PNG, GIF, JPEG). I don’t think we support SVG currently. We will resize as needed. Custom parameters - a list of name=value pairs, each on their own line. These override any set on the Tool level. See the section above on using substitution parameters. Make Your LTI Tool Available to Learn Servers Once you have developed and registered an LTI tool, you can share it with Learn administrators so that they can configure their Learn servers to work with it. To deploy your application to a Learn instance share the Application ID with the administrator of that Learn server. At the point they enter the Application (Client) ID they will see the properties of the application you configured through the developer portal. They will also receive a new piece of information which is the Deployment ID. This deployment ID is sent with every LTI launch, and uniquely identifies the Learn instance that launch is coming from. It is likely that you’ll need to use that deployment ID to map which Learn instance a launch is coming from. This is a bit of a chicken and egg problem, in that you have registered your application with the developer portal, but you don’t know what Learn instances are using it yet. You can automatically handle that at launch time, e.g., if you haven’t seen that deployment ID previously then prompt the user to set it up, or you can do the set up out of band. For more information about registering your application, see Register Your Application. At this point your application is connected to a Learn instance. All that remains is for an instructor or other user to create links in a course or use some of the automatically deployed links, such as a course tool placement. LTI Placement to Building Block Link Mapping As new LTI Placement options are added to the Blackboard Learn platform, the naming conventions can be a bit confusing for Building Block Developers. The purpose of this document is to give a high-level mapping of the terminology for Developers. Description LTI Placement B2 Type A tool available to all users in a course Course Tool-&gt;Student tool A tool available only to instructors in a course Course Tool-&gt;Non-Student course_tool A course content tool Course Content Tool content-handler A tool available outside of a course for all users System Tool user_tool A tool available only to system administrators Administrator Tool system_tool Caveat Deleting a registered LTI domain and/or the associated managed placements from the Administrator Panel -&gt; LTI Tool Providers page will invalidate all of the associated LTI launch links in courses. The data will be gone from the database. There is no way to fix this. NEVER delete a registered domain or managed placements without considering these consequences. If you create an LTI 1.3 Tool that uses the same domain as a currently registered LTI 1.1 tool on a Learn system, there is code in Learn that will prompt you to migrate from LTI 1.1 to LTI 1.3. Generally that’s a great option. Finally, only very brave people make changes on a production system without testing first on a test or staging system. We recommend you be more cautious than brave.",
    "tags": "Standards",
    "url": "/standards/lti/getting-started/getting-started-with-lti.html"
  },{
    "title": "Blackboard’s UEF",
    "text": "Blackboard’s Ultra Extension Framework Introducing Blackboard’s Ultra Extension Framework We’re excited to introduce a new means of integration with the Blackboard Learn Ultra Experience, known as the Ultra Extension Framework (UEF). The UEF is a set of Premium APIs that augment the Ultra experience of Blackboard Learn with a robust set of capabilities including telemetry, help provider registration, and UI element rendering - all designed to enable better integrations and richer user experience. What can you do with the UEF? The UEF is a set of Premium APIs that offers several new capabilities for integrations with the Blackboard Learn Ultra Experience. Telemetry: Receiving of detailed user navigation behavior data, including click, route, and hoover events: Here you may find a demo User Interface Elements: Ability to populate UI elements and content, including capabilities for banners, modals, and notifications. Help Provider Registration: Option to override the default behavior of the native help tool in Ultra. We gave several partners early access to the UEF. The following videos are examples of how these partners used the UEF to better deliver their integration in Ultra. EesySoft Video: Eesysoft uses help provider registration, telemetry, notifications and modals to deliver enhanced, context-sensitive help to the user. Screenshots eXplorance Video: eXplorance uses telemetry, notifications, and a modal peek-panel to prompt for Blue Course Evaluations. Screenshots Qwickly Video: Qwickly delivers capabilities to a student in an Ultra Course banner without the need to launch a separate LTI peek-panel. Screenshots If you are a developer and interested in pursuing use of the UEF Premium APIs in your integration with the Blackboard Learn Ultra Experience, what are your next steps? Send an email to BbPartnerTeam bbpartnerteam@blackboard.com with the subject “Interested in Partnership That Includes Premium API Access.” Ask for time to discuss such with a member of our partnership team. Check back here often as this page will be updated frequently with more details.",
    "tags": "Learn UEF",
    "url": "/learn/uef/getting-started.html"
  },{
    "title": "Getting Started",
    "text": "Getting Started Developing for Ally as a Service Ally as a Service provides separatly licensed, stand-alone API access to allow an application to process files for accessibility. Many of you are using this power in your LMS to help instructors improve the accessibility of their content, and to give students, regardless of ability, access to the content that meets their needs and learning style the best. To get started, the first thing you need is a client ID, key, and secret. At this time, the best way to obtain this information is to engage your Account Executive to discuss pricing and request credentials. As the API continues to grow, this process may change, so be sure to check back here often. Once you have your key and secret, the first step in any REST integration framework is typically to learn how to authenticate and authorize your application. Ally as a Service uses JSON Web Tokens (JWT) in order to generate a token, which is then used as a Bearer token in the Authorization header of each request. Click here to learn more about authorization and authentication for Ally as a Service. There are a number of ways to test out the API. The easiest is to use the Ally as a Service API documentation. You can enter your client ID and your secret, and then interact with the available API directly from the documentation. Click here to learn more about using the API documentation in this way. Here are the operations currently available in the API (each page has a sample cURL command at the bottom): Upload a file to Ally Check the processing status for a file Retrieve the feedback for the file This list is ever growing, so be sure to check back often to get the latest list of functionality available. Tutorials and Examples As we create tutorials and sample code, we will list them here. Ally as a Service API documentation - Includes sample cURL Commands Postman Collection Python",
    "tags": "Ally",
    "url": "/ally/getting-started.html"
  },{
    "title": "Getting Started",
    "text": "Getting Started This section is dedicated to getting developers up-to-speed quickly with the new REST APIs available for Blackboard Collaborate with the Ultra Experience. These APIs give the developer the ability to programmatically integrate common Collaborate functionality into a web application using the tried and true framework that is REST APIs. Getting started requires a few key decisions on the developer’s part. Firstly, the Developer should decide what programming language best meets the use cases required for the application to be successful. Every language has strengths and weaknesses, and with a little research, one can balance ease of use, performance, security, and existing frameworks and packages to build the best integration possible. Secondly, the developer should review the API documentation to ensure that the APIs exist to accomplish those goals. Lastly, the Developer must decide if this work is best completed in-house or via an engagement with Blackboard Collaborate’s consulting group. Often times, consulting is a great option for building an integration based on best practices developed over many years of experience integrating with Blackboard Collaborate. Requesting Access If you are interested in getting started with the Development of integrations with Blackboard Collaborate Ultra, send an email to developers@blackboard.com. Please tell us who you are, what institution you represent, and how you intend to use the APIs. Authorization and Authentication Generally speaking, REST API integrations are largely the same. That is the beauty of REST; the developer has a standard set of HTTP Verbs that generally perform the same actions, return the same success and failure codes, and most languages provide software packages and add-ons that make REST calls simple. Usually, the main hurdle is two-fold: What is the business logic behind the APIs, and how does an application authenticate to the services in order to send the REST calls necessary to perform the actions required. Most REST frameworks rely on some facet of the OAuth 2.0 standard and Blackboard Collaborate is no different. Collaborate relies on JSON Web Tokens (JWT) in order to accept the application as a trusted entity. For more detailed information about the JWT Standard and to learn about available libraries for most of today’s popular web application development languages, see https://jwt.io. For more information on Blackboard Collaborate’s implementation see Authorize and Authenticate in Blackboard Collaborate. Examples It is true that REST APIs allow the developer to choose any programming language that supports HTTP calls. That said, there are some languages that are consistently at the top of the list. As part of the effort to assist Developers in getting up and running, Blackboard typically offers sample code and supporting documentation in a number of those popular languages: Postman Collection Java Python Ruby PHP C#/.NET Node.JS As these samples are developed, the language above will be linked. For a demonstration of how to download recordings, check out the open source script we used at DevCon 2020. Tutorials The community site will also provide tutorials for how to perform specific actions necessary to get up and running in the Collaborate integration game. As those assets are developed, they will be listed here.",
    "tags": "Collaborate",
    "url": "/collaborate/getting-started.html"
  },{
    "title": "Golang Demo",
    "text": "Demo using Golang In August 2016, our friends at AllTheDucks presented on their work integrating with the Blackboard Learn REST APIs using Golang. Following DevCon ANZ, the Ducks were kind enough to open source their project and write a blog to help developers learn the Golang REST Application they wrote. The blog can be found here.",
    "tags": "Learn Rest",
    "url": "/learn/rest/examples/golang-demo.html"
  },{
    "title": "Grade Events",
    "text": "Grade Events Blackboard Learn’s Caliper Analytics stream emits a GradeEvent to cover the following use cases: Student submits an assignment, a group assignment, or a test Instructor enters a grade, comments, or feedback Any user updates feedback Instructor posts a manual grade Instructor overrides a grade Instructor clears an overridden grade Instructor deletes an attempt GradeEvents are sent in bulk nightly. Here is some of the key data that is associated with these events: GradeEvent group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.assignable - …/gradableItems/id - the primary key for the content ID action - Graded actor.id - contains a unique ID of the user (the ID is known to Bb) generated.normalScore - score provided extensions - contains a tag called bb:user.externalId with the batch_uid for the user Sample Payload Here is a sample of what a workflow might look like: { \"sensor\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"sendTime\": \"2021-01-05T07:55:48.048Z\", \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"data\": [ { \"@context\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"type\": \"GradeEvent\", \"id\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"action\": \"Graded\", \"object\": { \"startedAtTime\": \"2021-01-04T12:57:55.941Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1/attempts/_12345_1\", \"type\": \"Attempt\", \"assignable\": { \"dateToSubmit\": \"2021-01-04T12:57:55.941Z\", \"maxAttempts\": 0, \"maxSubmits\": 0, \"maxScore\": 160, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1\", \"type\": \"Assessment\", \"dateCreated\": \"2021-01-04T12:57:55.941Z\", \"dateModified\": \"2021-01-04T12:59:47.248Z\", \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"items\": [] }, \"assignee\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/0e9625cdef42403c9c8aed38d7cd80b2\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"count\": 1 }, \"generated\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1/attempts/_12345_1/score\", \"type\": \"Score\", \"dateCreated\": \"2021-01-04T12:59:47.248Z\", \"dateModified\": \"2021-01-04T12:59:47.248Z\", \"extensions\": { \"bb:action.name\": \"instructor.grade.history.event.attempt.grade\", \"bb:content.id\": \"_12345_1\", \"bb:provider.domain\": \"lti.mytool.com\" }, \"attempt\": { \"startedAtTime\": \"2021-01-04T12:57:55.941Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1/attempts/_12345_1\", \"type\": \"Attempt\", \"assignable\": { \"dateToSubmit\": \"2021-01-04T12:57:55.941Z\", \"maxAttempts\": 0, \"maxSubmits\": 0, \"maxScore\": 160, \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1\", \"type\": \"Assessment\", \"dateCreated\": \"2021-01-04T12:57:55.941Z\", \"dateModified\": \"2021-01-04T12:59:47.248Z\", \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"items\": [] }, \"assignee\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/0e9625cdef42403c9c8aed38d7cd80b2\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"count\": 1 }, \"maxScore\": 0, \"scoreGiven\": 39.45205, \"scoredBy\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" } }, \"eventTime\": \"2021-01-04T12:59:47.248Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"group\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/6d0140f42843472da7e3ecd150908fa3\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/6d0140f42843472da7e3ecd150908fa3/members/0e9625cdef42403c9c8aed38d7cd80b2\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_12345_1\", \"bb:course.externalId\": \"BIO-101\", \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/0e9625cdef42403c9c8aed38d7cd80b2\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_12345_1\", \"bb:user.externalId\": \"54b54b42-dd02-42f8-88ed-07bd719bfb7c\" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/6d0140f42843472da7e3ecd150908fa3\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_12345_1\" }, \"members\": [], \"courseNumber\": \"BIO-101\" }, \"roles\": [ \"Learner\" ], \"status\": \"Active\" }, \"extensions\": {} } ] }",
    "tags": "Standards",
    "url": "/standards/caliper/events/grade-events.html"
  },{
    "title": "Groups, Site quotas and rate limits",
    "text": "Developer groups, Site quotas and rate limits Overview With the Blackboard Developer Portal, you can manage use of your Learn instance’s REST APIs and applications that use those APIs. Groups of developers work on one or more applications and each group is subject to a limit on the number of sites that can use their applications and the number of API requests their applications can make daily. Note: If you are a Blackboard client, a Blackboard Partner / Vendor / Developer of a REST Application should NEVER tell you to go to the developer portal and create an App ID with the associated key/secret to install their application. They should never tell you to apply for a Rate/Site increase for their application. Blackboard DOES NOT support that model. Every REST Application developer should give you an App ID to install their REST App and tell you how to configure a system role for its use. Period. The REST Application developer needs to request the increases they need to run their application themselves. If they ask you to go to developer.blackboard.com and get an App ID/Key/Secret, please tell them that is wrong. They should have exactly one App ID for their production REST application that they are asking you to install. Contractors are an exception to this policy as they are producing an integration on your, the Blackboard client, behalf. Questions regarding the policy and whether you are impacted may be asked here, or posted to developers@blackboard.com. Developer Groups You manage control of an application using developer groups. When you create your login on the developer portal, you also create a group of one that includes only yourself and is named after you. You can create more groups on the My Groups page. You can add other registered users to your groups. When you create an application, you assign it to a group, and members of that group can access it. Before moving to production, you must designate one group as the production group. The best practice is to name your production group after your organization. See the Group Naming Requirements in this document for further details. Each developer group is subject to maximum site quotas and to daily limits on the number of API requests made. These limits start relatively low because they are intended for development and testing only. To qualify for production- level site quotas and rate limits, you must designate a production group. To designate one of your groups as a production follow the steps provided at the end of this document. For more information about using, managing, and naming groups, see Developer Portal Development and Production Groups Production Groups To move into production and allow your application to be used more widely, you must create a production group. You create the group then tell Blackboard what that group name is following the process given at the bottom of this document. A developer group is designated as a production group when you name it after your company using initial upper-case camel case, e.g., YourCompanyName. The production group name identifies your REST application to the Learn administrator when they install your application. Site Quotas Each developer group has a quota of the maximum number of Blackboard Learn sites that can access the group’s applications, regardless of number of applications. You are responsible for keeping track of the sites where your Learn REST Application is installed. If a client attempts to install your REST application but the site quota is exceeded for the developer group that manages it, the client will get an error message when they try to install it. The error message typically reads something like Failure: Application developer has exceeded maximum number of client installations. Please contact the developer. Rate Limits A rate limit is the number of API requests that can come each day from applications that are registered to your developer group. For example, if you have a 100K limit and three applications, each application will use a portion of that 100K limit. You can monitor the number of requests used so far at an application level using the http headers provided in each request response. HTTP Header Description X-Rate-Limit-Limit The rate limit ceiling for the given development group X-Rate-Limit-Remaining The number of requests left for the 24-hour period for the development group X-Rate-Limit-Reset The remaining time before the rate limit resets, given in UTC epoch seconds Increasing Site Quota and Rate Limits If you are a Blackboard partner or licensed client when you need to increase the site quota and rate limit for your production group, please open a ticket on Behind the Blackboard. Provide the following in your request: Production group name. Designate one of your groups as a production group if you haven’t. Follow the process described above for creating the group name. This should be your CamelCaseCompanyName. Tell us the name in the ticket. Developer email that owns the production group. One of your developers created the account that is creating REST API apps and groups on developer.blackboard.com. When that developer creates your CamelCaseCompanyName production group, that developer’s email is the “Developer email” referenced here. A description of the application, both what it does and which APIs used. If you are an open-initiative developer please make your request by email to developers@blackboard.com. In your request, provide the same information as indicated above.",
    "tags": "Learn REST",
    "url": "/learn/rest/admin/groups-quotas-rates.html"
  },{
    "title": "Blackboard Dev Docs",
    "text": "Welcome to our New Site! The Blackboard Developer Community is the home for technically-minded developers and system administrators for Blackboard products. This is where we keep all of our official developer documentation. This site is separated by product, as you will see in the menu bar to the left of this text. You will also notice that most pages have the table of contents in a third column on the right hand side of the content. This table of contents moves with you as you move through the content, making it super-easy for you to move around the documentatation and find exactly what you are looking for. We also have a fantastic search option, accessible from anywhere. Simply click the magnifying glass icon at the top right and you will be taken to the search page. This documentation is built dynamically based on the blackboard.github.io repository, and as such, you can contribute documentation and make edits via standard pull requests. You can also report missing documentation or request changes using github issue reporting. We hope this helps you find the documentation you need, and helps us identify gaps and inconsistencies in our documentation. After all, we are here to make your life as a developer easy! As always, if you have any questions, be sure to check out the contact page. We look forward to the continuation of successful integrations for our client, partner, and Community Partner developers! Happy Coding!",
    "tags": "",
    "url": "/"
  },{
    "title": "Introduction to OpenDB",
    "text": "Introduction to OpenDB In the summer of 2010, Blackboard made good on a commitment for platform openness by publishing details about the database structures that power the Blackboard Learn platform. Our Open Database initiative provides your institution with documentation and guidance necessary to access and retrieve critical information stored in the Learn platform about the activities of your users. We can all recognize the potential benefits of this access. Through use of the knowledge the Open Database initiative provides, IT staff can keep track of system activity, model growth and plan for the future. Academic staff can collect data about adoption, use and the efficacy of certain initiatives. Institution leadership can use real data to evaluate return on investment and make data-supported decisions. IMPORTANT NOTE: The Open Database documentation is provided to licensees of Blackboard Learn for the purposes described above. Accessing the documentation is an acceptance of agreement to these terms. Resources and Information Current Release With each recent Service Pack for Learn, Blackboard provides current version schema details and a PDF document that details the changes from the previous Service Pack. Mitigating Risk Having access to your data is exciting, but as with all enterprise software this access comes with a degree of risk; Ill formed queries could result in performance degradation or inadvertent writes, deletes, or drops may cause database corruption. So, explore, but be careful. Here are some practices which will help mitigate this risk: Don’t Modify or Insert Data Directly: Given this documentation is provided to enable discovery, reporting, and analysis the safest activity you can perform is based on simple targeted SELECT statements - do not perform data or database altering (delete/write) activities unless under direction of Blackboard Support, Consulting Services, or through use of the Building Block Persistence APIs. WARNING: Performing database or data altering queries is outside the scope of this document and should be done only under direct guidance of Blackboard Inc. staff – doing otherwise could have dire repercussions for your SLA, LEARN system, and result in extended periods of downtime to repair. Protect Your Data: Best practices set forth that any enterprise system be included in a backup/recovery strategy. Your Blackboard Learn system is no exception. Detailed coverage of the various means for managing backup and recovery for Oracle or Microsoft SQL Server is beyond the scope of this document, but rest assured that there are a variety of available resources at your disposal. Certainly your DBA may already have implemented such a plan; if not both Oracle and Microsoft have substantial documentation which will help determine the best approach for your institution and system architecture. Other sources include the Blackboard System Administrator Community and Blackboard Consulting Services. Protecting your data also includes considerations for access to the information. Whereas the Learn applications protects information from unauthorized access, it is up to you to ensure that access to the data is sufficiently secured. Work With Copies of Your Data: The easiest way to protect your data and not impact system performance is to work with a copy of your database. You may actually have a viable copy depending on your backup and recovery process. This allows you to interact with your “production data” without impacting your production system – which is a very good thing. By using a copy of your database you may test your queries for function as well as system performance. Generally, do not perform queries against production database. Unless you absolutely need access to live data and the queries have been functionally and load tested, we recommend that you devise a method for regular replication of your production data to a “reporting” environment. The frequency of the copy process may be determined by your reporting requirements. If you are only collecting end-of-semester statistics, then replication once a term may be sufficient. If you are using the data for early intervention efforts, then daily copies may be required. Functional and Performance Testing of Your Queries: If your requirements dictate that you need to report against live production data be extra careful. In addition to backing up and working with copies of your data you should always test your queries on a non-production environment to ensure that they are sound and do not result in negative impact on system performance. A malformed query can crash your database.",
    "tags": "Learn b2",
    "url": "/learn/b2/opendb/intro-to-opendb.html"
  },{
    "title": "Introduction to Building Blocks",
    "text": "Introduction to Building Blocks Blackboard Building Blocks, a key component of Blackboard Learn’s open architecture, allow you to enhance the online education experience for your students and faculty. You may assemble a solution of homegrown, commercial and open source software and tools using Blackboard Building Blocks that best meets your needs whether it is a discipline-specific tool, an integration to a homegrown application or other enterprise application, or seamless integration to a subscription database at your library. Through Blackboard Building Blocks, developers can create sharable, re-usable web applications that can be deployed on Blackboard Learn. This open architecture ensures that you can: extend Blackboard Learn and incorporate new functionality provide customizations to meet discipline-specific or pedagogical needs leverage this technology to enhance and aid administration of their systems on campus automate procedures or repetitive tasks integrate with external systems or applications across your learning enterprise for example the Registrar’s office, the Library to name just two customize your implementation by integrating open source or locally-developed applications and tools Data that can be accessed includes: Authentication and authorization information - to ensure seamless authentication and authorization between Blackboard software and other systems User data - name, course of study, contact information Course data and Enrollment records Outcomes - student quiz and test data, scores, grades, participation and activity data Content - the ability to seamlessly integrate rich content from a variety of sources System management - information to help administrators manage and monitor your Blackboard software installations Learn More To learn more about creating Building Blocks, start here. To see examples of Building Blocks that have already been created, take a look at released building blocks on the Blackboard Learn extensions site which highlights Building Blocks produced by Blackboard Partners, or take a look at open source projects contributed by the Learn developer community at OSCELOT’s projects site. Request a Developers License All Blackboard Learn clients receive a Blackboard developers license at no cost. A developers license is a “small footprint” version of Blackboard with the Community and Content Management modules turned on. It can be run on a development server or even a virtual machine image for development purposes. If you require a developer network account visit Behind the Blackboard (as an administrator) or contact your sales representative. Commercial Partnerships If you are interested in becoming a Blackboard partner visit the Blackboard Partnerships™ program site. Partnering with Blackboard provides access to design guidance and support among other benefits.",
    "tags": "Learn b2",
    "url": "/learn/b2/getting-started/intro.html"
  },{
    "title": "Introduction to SOAP Web Services",
    "text": "Introduction to SOAP Web Services Blackboard Learn Web Services are a key component of Blackboard Learn’s open architecture, allowing you to enhance the online education experience for their students and faculty through integration with external services and applications. You may assemble a solution of homegrown, commercial and open source software and tools using Learn Web Services that best meets your needs whether it is an integration to a homegrown application or other enterprise application, or seamless integration to a subscription database at your library. Through Blackboard Learn Web Services developers can integrate with enterprise web applications such as Student Information Systems or custom middle-tier services. The Learn Web Services ensure that you can: provision data to Learn from external systems and vice versa. provide customizations to meet system integration and architecture needs leverage this technology to enhance and aid administration of their systems on campus automate procedures or repetitive tasks integrate with external systems or applications across your learning enterprise for example the Registrar’s office, the Library to name just two customize your implementation by integrating open source or locally-developed applications and tools Data that can be accessed includes: User data - name, course of study, contact information Course data and Enrollment records Outcomes - student quiz and test data, scores, grades, participation and activity data Content - the ability to seamlessly integrate rich content from a variety of sources System management - information to help administrators manage and monitor their Blackboard software installations Learn More To learn more about Learn Web Services, start here. Request a Developers License All Blackboard Learn clients receive a Blackboard developers license at no cost. A developers license is a “small footprint” version of Blackboard with the Community and Content Management modules turned on. It can be run on a development server or even a virtual machine image for development purposes. If you require a developer network account visit Behind the Blackboard (as an administrator) or contact your sales representative. Commercial Partnerships If you are interested in becoming a Blackboard partner visit the Blackboard Partnerships™ program site. Partnering with Blackboard provides access to design guidance and support among other benefits.",
    "tags": "Learn soap",
    "url": "/learn/soap/getting-started/introduction.html"
  },{
    "title": "Build Java Client Library",
    "text": "SOAP Sample code: Build Java Client Library The Blackboard Learn SOAP Web Services come out of the box with sample code that can be downloaded directly from the user interface. This document will describe the process by which a developer can build the java client library contained within that code. Caveat The file that you download from Learn containing all of the sample code is called client.zip, so when you unzip it, it will be called client. This is referred to as the top-level client directory in this document. This document specifically deals with a subfolder of that directory, which is also called client. When top-level client directory is specified, this refers to _/path/client_. When top-level is not specified, it refers to _/path/client/client_. Preparing the Development Environment This sample code was initially built when Blackboard Learn 9.1 was released several years ago. As a result, it is dependent upon some older technology. It is suggested that the technologies installed for this tutorial be segmented for this purpose. Library Download Link Comments Ant 1.6 apache-ant-1.6.0-bin.zip   SED   If building on Windows, you must install sed, either stand-alone, or from cygwin Java   Script tested on Java 7, should work with Java 8 Axis2 1.3 axis2-1.3-bin.zip   Axis2 1.3 Source axis2-1.3-src.zip   Rampart 1.4 rampart-dist-1.4-bin.zip In order to set the development environment up with these technologies without overriding newer versions that may be being used in other projects, it is recommended that a separate directory be set up in the top-level client directory and environment variables be temporarily pointed to them. In this example, a tools directory has been added to the client directory, an Ant, Axis, and Rampart were unzipped here. Now open a terminal or .html window, and navigate to the client directory, by typing: cd &lt;pathtodirectory&gt;/client/client_ and pressing . You should now be in the client directory. We will need three environment variables to be set: JAVA_HOME, AXIS2_HOME, ANT_HOME. JAVA_HOME should be set to point to your JDK installation. This is probably already set. To verify, type: echo $JAVA_HOME and press . AXIS2_HOME, should be set to the path to Axis 2 where you just installed it. In our example, it would be _client/tools/axis2-1.3_. Lastly, ANT_HOME should be set to the Ant directory you just installed. In this example, ANT_HOME would be set equal to _client/tools/apache-ant-1.6.0_. The next step is to configure axis2 for building the sample code. To do this, we must copy a few files from rampart, and modify one file. In our example, we would copy all the jar files in client/tools/rampart-1.4/lib to client/tools/axis2-1.3/lib. Then we must copy client/tools/rampart-1.4/modules/rampart-1.4.mar to client/tools/axis2-1.3/repository/modules directory. In the same directory you copied the mar file to, there is a file called modules.list. You must edit this file and add rampart-1.4.mar to the bottom of the list and save it. The last step is optional, and that is to create a subdirectory to axis2-1.3 called src, and download the axis2 source here. This is not required for the build to work, but if you will be debugging your code in Eclipse, this will allow you to follow the code into Axis2. Now your development environment is all set to generate the code and build the Java Web Services Library. Building the Library The first step is to generate the code. This is done at the command line and in the client/client directory. Simply run _**sampleGenClient.[.html|sh] . There are two caveats here. Firstly, if you are running this on Mac or Linux, the _sampleGenClient.sh_ file contains Windows ctrl-M line endings. This will cause the script to fail. The easiest way to fix this is to use sed `sed -e \"s/^M//\" sampleGenClient.sh &gt; sampleGenClient1.sh)`. Please note that the ^M actually refers to the control character, so to enter, you will need to hold down the ctrl key and press v and then m. The second caveat is that this file will fail if you use `https://` and building against a self-signed certificate like the Developer Virtual Machine. Just use `http://`. You will now end up with a _generated-src_ directory. You can build the library using ant, by simply typing **_$ANT_HOME/bin/ant build_** and pressing . You will now have _client/client/lib/wsc.client.jar_.",
    "tags": "Learn soap",
    "url": "/learn/soap/tutorials/java-client-library.html"
  },{
    "title": "Command line REST Application",
    "text": "Tutorial - Build a Java Command Line REST Application The purpose of this document is to allow a developer to walk through the REST Workshop from DevCon 2016. Please note that this sample code was built and tested on Mac. It is Java code, and therefore, should be operating system agnostic, but it has not been tested on Windows. In order to begin this tutorial, there are a few pre-requisites that are assumed to be in place: User has installed and started the latest Developer AMI. User has installed and configured GIT. User has cloned the repository to their local working directory. User has Java 11 installed and configured to JAVA_HOME. User has registered for an account on the Developer Portal, registered an application, obtained the key and secret, and configured the Developer Virtual Machine to accept it.. To watch a recording of the corresponding Webinar, click here. About the Project This project is built on Java 11, in Spring Tool Suite (an Eclipse derivative), and uses Gradle and Maven to build and install dependencies. In addition, Gradle is using the ‘Application’ plugin, which allows us to build and run the command line java application with one simple Gradle command – gradle run. Architecturally, this sample relies on the RestTemplate object offered by the Spring Framework for all REST communication. The method or library you choose for your application is very much a personal preference. Internally at Blackboard, this is the preferred method, and therefore, the method chosen for this workshop. The project contains a base ‘Hello Developers’ application that contains all of the supporting code to get started. The code can all be found in the src/main/java directory in two base packages, bbdn.unsecurity and bbdn.rest. There are also four top-level folders containing the code we will need to implement each step of the tutorial. Let’s break down the base files: File Package Description RestConstants.java bbdn.rest This class contains Constant values for running the code. RestDemo.java bbdn.rest This class is the main class for the project. We will discuss other classes as we move them into place, but this is the only file we will modify. UnSecurityUtil.java bbdn.unsecurity This class allows us to create a RestTemplate object based on whether we are testing on the DVM or in an environment with a valid SSL certificate. RestConstants The RestConstants.java file takes the Data I/O requirements out of the sample code, allowing the code to focus on the REST API interactions. In a real-world application, this data would be taken from configuration files or tables and UI forms and user input. package bbdn.rest; public abstract class RestConstants { public final static String HOSTNAME = \"http://localhost:9876\"; public final static String KEY = \"\"; public final static String SECRET = \"\"; public final static String AUTH_PATH = \"/learn/api/public/v1/oauth2/token\"; public final static String DATASOURCE_PATH = \"/learn/api/public/v1/dataSources\"; public final static String DATASOURCE_ID = \"BBDN-DSK-JAVA\"; public final static String DATASOURCE_DESCRIPTION = \"Demo Data Source used for REST Java Demo\"; public final static String TERM_PATH = \"/learn/api/public/v1/terms\"; public final static String TERM_ID = \"BBDN-TERM-JAVA\"; public final static String TERM_NAME = \"REST Demo Term - Java\"; public final static String TERM_RAW = \"Term Used For REST Demo - Java\"; public final static String TERM_DISPLAY = \"Term Used For REST Demo - Java\"; public final static String COURSE_PATH = \"/learn/api/public/v1/courses\"; public final static String COURSE_ID = \"BBDN-Java-REST-Demo\"; public final static String COURSE_NAME = \"Course Used For REST Demo - Java\"; public final static String COURSE_DESCRIPTION = \"Course Used For REST Demo - Java\"; public final static String USER_PATH = \"/learn/api/public/v1/users\"; public final static String USER_ID = \"bbdnrestdemojavauser\"; public final static String USER_NAME = \"restjavauser\"; public final static String USER_PASS = \"Bl@ckb0ard!\"; public final static String USER_FIRST = \"Java\"; public final static String USER_LAST = \"Restdemo\"; public final static String USER_EMAIL = \"developers@blackboard.com\"; } RestDemo This is the heart of the application. This contains the main processing loop that performs all of the functions that we want to perform. We will review the other classes as we progress through the tutorial, but the code we will write lives in this file. package bbdn.rest; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class RestDemo { private static final Logger log = LoggerFactory.getLogger(RestDemo.class); public static boolean DEVMODE = false; public static void main(String[] args) { boolean OPER_ALL = false; boolean OPER_DATASOURCE = false; boolean OPER_TERM = false; boolean OPER_COURSE = false; boolean OPER_USER = false; boolean OPER_MEMBERSHIP = false; boolean OPER_CONTENT = false; boolean OPER_GRADES = false; String _hostname = RestConstants.HOSTNAME; int operCount = 0; boolean nextCommand = false; int uriCount = 0; boolean nextUri = false; if(args.length &gt; 0) { for(int i = 0; i &lt; args.length; i++ ) { log.info(\"args[\" + i + \"]: \" + args[i]); if (nextCommand) { switch(args[i]) { case \"datasource\": OPER_DATASOURCE = true; break; case \"term\": OPER_TERM = true; break; case \"course\": OPER_COURSE = true; break; case \"user\": OPER_USER = true; break; case \"membership\": OPER_MEMBERSHIP = true; break; case \"content\": OPER_CONTENT = true; break; case \"grades\": OPER_GRADES = true; break; case \"all\": default: OPER_ALL = true; } nextCommand = false; } if(nextUri) { _hostname = args[i]; nextUri = false; } if (args[i].equalsIgnoreCase(\"-c\")) { nextCommand = true; operCount += 1; } else if (args[i].equalsIgnoreCase(\"-t\")) { nextUri = true; uriCount += 1; } else if (args[i].equalsIgnoreCase(\"-d\")) { DEVMODE = true; } } if(operCount == 0) { OPER_ALL = true; } log.info(\" OPER_ALL: \" + OPER_ALL + \" OPER_DATASOURCE: \" + OPER_DATASOURCE + \" OPER_TERM: \" + OPER_TERM + \" OPER_COURSE: \" + OPER_COURSE + \" OPER_USER: \" + OPER_USER + \" OPER_MEMBERSHIP: \" + OPER_MEMBERSHIP + \" OPER_CONTENT: \" + OPER_CONTENT + \" OPER_GRADES: \" + OPER_GRADES + \" HOSTNAME: \" + _hostname + \" operCount: \" + operCount + \"uriCount: \" + uriCount); } else { OPER_ALL = true; } log.info(\"Hello REST Workshop Participant!!!\"); } } UnSecurityUtil The unSecurityUtil class allows us to bypass SSL Certificate checking when the -d flag is passed at the command line. This is useful in test environments and specifically on the Developer Virtual Machine where the SSL certificate is self-signed and therefore untrusted by Java. package bbdn.unsecurity; import java.security.KeyManagementException; import java.security.KeyStoreException; import java.security.NoSuchAlgorithmException; import java.security.cert.X509Certificate; import javax.net.ssl.SSLContext; import org.apache.http.conn.ssl.SSLConnectionSocketFactory; import org.apache.http.conn.ssl.TrustStrategy; import org.apache.http.impl.client.CloseableHttpClient; import org.apache.http.impl.client.HttpClients; import org.springframework.http.HttpStatus; import org.springframework.http.client.HttpComponentsClientHttpRequestFactory; import org.springframework.web.client.DefaultResponseErrorHandler; import org.springframework.web.client.RestTemplate; import bbdn.rest.RestDemo; public abstract class UnSecurityUtil { public static RestTemplate getRestTemplate() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException { // Workaround to allow for PATCH requests HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(); if(RestDemo.DEVMODE) { TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -&gt; true; SSLContext sslContext = org.apache.http.ssl.SSLContexts.custom() .loadTrustMaterial(null, acceptingTrustStrategy) .build(); SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext); CloseableHttpClient httpClient = HttpClients.custom() .setSSLSocketFactory(csf) .build(); requestFactory.setHttpClient(httpClient); } RestTemplate restTemplate = new RestTemplate(requestFactory); // Workaround for allowing unsuccessful HTTP Errors to still print to the screen restTemplate.setErrorHandler(new DefaultResponseErrorHandler(){ protected boolean hasError(HttpStatus statusCode) { return false; }}); return(restTemplate); } } Usage The first step is to modify the RestConstants.java file to include your shared key and secret, and, if not using the Developer Virtual Machine, modify hostname to your primary test environment. Then simply open the command line, navigate to the directory containing the project, and type gradle run. If you do not have Gradle installed, you can use ./gradlew run instead. This will install gradle in your project directory. In addition, the experience can by customized at the command line by specifying command line arguments to be passed to the java application. The syntax for this is gradle run -Dexec.args=\"\". The arguments would appear just as they would if typing them directly to the java executable, space- delimited. For example, to run in Devmode, you would type gradle run -Dexec.args=\"-d\". The following table lists the available command line arguments. They can be combined. Arg Description Example -t Specify the target URL. This will override the HOSTNAME constant specified in RestConstants. gradle run -Dexec.args=\"-t https://localhost:9877 -d Turn on DevMode. DevMode tells the sample application to ignore certificate errors. Useful when testing on the DVM or against a test/dev server with a self-signed certificate. gradle run -Dexec.args=\"-d\" -c Denote a specific object to exercise. Added for example, but not well implemented as each object relies on the previous object to be created and available. gradle run -Dexec.args=\"-c datasource\" Available commands are: datasource term course user membership content *Not Yet Implemented grades *Not Yet Implemented all Step 0: Run Hello Developer The first step is to simply run the application. You should have already cloned the project to a local directory. Simply open a command line window, navigate to the directory you cloned to and type gradle run. What You Should See What We Did In this step, we simply ran the application to ensure that we had all of our libraries set, that our code ran properly, and that we have gradle installed for our project. Step 1: Authorization The key to any REST client application, and generally the biggest hurdle to adoption, is Authorization. There are a number of flavors out there, and the implementation chosen is often both a personal choice by the developer that built the REST API and also a function of the specific requirements and infrastructure around it. For more information regarding Learn’s implementation of OAuth2, read the Basic Authentication in this section. In the “1-Implement-OAuth” folder, you will find three files: Authorizer.java Authorizer is the service handler class. This does the actual work of requesting the token and retrieving the results. Token.java Token is a JSON Model class. This is what we will use to interact with the token we receive from Blackboard Learn. Authorizer will request the token, and on receipt, will automatically serialize the JSON response into the Token object, allowing the application to simply interact with it as a normal Java object. RestDemo.java The RestDemo class is what our bbdn.rest.RestDemo class will look like when we complete this step in the tutorial. Let’s get started: Move /1-Implement-OAuth/Authorizer.java to the bbdn.rest package. Create a new package called bbdn.rest.objects. Move /1-Implement-OAuth/Token.java to the bbdn.rest.objects package. If you want a shortcut, you can copy the /1-Implement-OAuth/RestDemo.java file to the bbdn.rest package, otherwise open bbdn.rest.RestDemo.java and make the following edits: Add an import to the top of your RestDemo to include bbdn.rest.objects space: import bbdn.rest.objects.*; Now highlight the log statement that prints our hello developer message and replace it with: // Obtain Bearer Token Authorizer auth = new Authorizer(); // Instantiate Authorizer class Token token = auth.authorize(); // Authorize application and grab the Token object. log.debug(\"token: \" + token.toString()); Save the file. At the command line in the project directory, type gradle run and watch as the token is printed to the screen. Review the RestDemo.java in the 1-Implement-OAuth folder to compare to your RestDemo.java if you have issues. What You Should See What We Did So in this step of the tutorial, we took our basic “Hello Developer” application and built out the authorization service and object we need for the rest of our application to work properly. We first put our REST Authorization service in place. So with Basic Authentication and OAuth, there is really a few specific things that we need to do. First, we must hash our key and secret into a base64-encoded string. Once we have the utility in place to generate that hash, the first thing to do is build the header. In this application, we are using HttpHeaders. We add the Authorization Header first, in the form of Authorization: Basic . We then set the content type to form-urlencoded using the HttpHeaders method setContentType. The last thing we need to do is define the applications scope in the form of grant_type. In Blackboard's case, we only accept client_credentials, so this part is easy. Simply add grant_type=client_credentials in the body of our POST message and POST it to the oauth/token endpoint. The next step was to put our Token object in place. This object is configured to allow the Jackson library to automatically serialize and deserialize our JSON payloads. It provides three basic properties that correspond directly to the JSON payload we expect to receive from Blackboard Learn when we request a token: access_token, token_type, and expires_in. Once we have created and populated this object, we can then access this data whenever we need to. Lastly, we updated our main class in order to call the authorize method and retrieve the token. Step 2: Datasources The first – and easiest – object to interact with is the Datasource object. It is a rudimentary object with only a few properties that need to be manipulated. It is also a very important object, as most other objects allow you to specify a datasource, which allows you to associate all of the data you create together and to your application. In the “2-Implement-Datasource” folder, you will find three files: DatasourceHandler.java DatasourceHandler is the service handler class. This does the actual work of building and processing HTTP requests and handling the incoming responses. Datasource.java Datasource is a JSON Model class. This is what we will use to create datasources and to retrieve datasources from the REST responses we receive from Blackboard Learn. DatasourceHandler will automatically handle the serialization and deserialization of the datasource object, allowing the application to simply interact with it as a normal Java object. RestDemo.java. The RestDemo class is what our bbdn.rest.RestDemo class will look like when we complete this step in the tutorial. Let’s get started: Move /2-Implement-Datasource/Datasource.java to the bbdn.rest.objects package. Create a new package called bbdn.rest.services. Move /2-Implement-Datasource/DatasourceHandler.java to the bbdn.rest.services package. If you want a shortcut, you can copy the /2-Implement-Datasource/RestDemo.java file to the bbdn.rest package, otherwise open bbdn.rest.RestDemo.java and make the following edits: Add an import to the top of your RestDemo to include the bbdn.rest.services space: import bbdn.rest.services.*; Directly above the Authorizer instantiation, add the following code: // Declare Datasource Datasource ds = null; // Declare Result to receive Delete response boolean result = false; // Initialize Handlers DatasourceHandler datasourceHandler = new DatasourceHandler(_hostname); Directly below the log statement that writes the token information to the screen, add the following code: // Datasource object if( OPER_ALL || OPER_DATASOURCE) { ds = datasourceHandler.createObject(token.getToken()); log.debug(\"Create DS: \" + ds.toString()); ds = datasourceHandler.readObject(token.getToken()); log.debug(\"Read DS: \" + ds.toString()); ds = datasourceHandler.updateObject(token.getToken()); log.debug(\"Update DS: \" + ds.toString()); } if( OPER_ALL || OPER_DATASOURCE) { result = datasourceHandler.deleteObject(token.getToken()); log.debug(\"Delete DS: \" + result); } Save the file. At the command line in the project directory, type gradle run (or ./gradlew run) and watch as the token is printed to the screen. Review the RestDemo.java in the 2-Implement-Datasource folder to compare to your RestDemo.java if you have issues. What You Should See For Read: For Update: For Delete: What We Did So in this step of the tutorial, we added the code necessary to create, read, update, and delete a datasource. The first step was to put our Datasource object in place. This object is configured to allow the Jackson library to automatically serialize and deserialize our JSON payloads. It provides three basic properties that correspond directly to the JSON payload we expect to receive from Blackboard Learn when we manipulate a datasource: id, name, and description. Once we have created and populated this object, we can then access this data whenever we need to. Next we implemented our DatasourceHandler service class. This class handles the REST calls, all object generation and retrieval, and passing information back to our main class. When the class is initialized, we set up logging and make sure the handler has the correct hostname. Each operation has its own method that generates the appropriate body if necessary, then passes the necessary data to the sendRequest method to send the appropriate message and retrieve the appropriate response. Lastly, we updated our main class in order to call the appropriate methods to interact with the Datasource Service class. Step 3: Terms For the third step in our tutorial we will implement the Term object. As with Datasources, Terms are also complimentary objects to other operations. At the conclusion on this tutorial, we will be setting this Term when we implement both courses and memberships. It is also the first in a more complex set of Model objects in that the base Term object requires a secondary Availability object to properly create and manipulate a Term. In the “3-Implement-Term” folder, you will find four files: TermHandler.java TermHandler is the service handler class. This does the actual work of building and processing HTTP requests and handling the incoming responses. Term.java Term is a JSON Model class. This is what we will use to create terms and to retrieve terms from the REST responses we receive from Blackboard Learn. TermHandler will automatically handle the serialization and deserialization of the term object, allowing the application to simply interact with it as a normal Java object. Availability.java Availability is also a model class. This class contains one field, “available,” which will be set to yes or now. This class is only called from within the Term class, and this is what allows Jackson to handle the serialization and deserialization of complex nested objects. RestDemo.java The RestDemo class is what our bbdn.rest.RestDemo class will look like when we complete this step in the tutorial. Let’s get started: Move /3-Implement-Term/TermHandler.java to the bbdn.rest.services package. Move /3-Implement-Term/Term.java to the bbdn.rest.objects package. Move /3-Implement-Term/Availability.java to the bbdn.rest.objects package. If you want a shortcut, you can copy the /3-Implement-Term/RestDemo.java file to the bbdn.rest package, otherwise open bbdn.rest.RestDemo.java and make the following edits: Directly below Datasource ds = null;, add: Term tm = null; Directly below DatasourceHandler datasourceHandler = new DatasourceHandler(_hostname);, add: TermHandler termHandler = new TermHandler(_hostname); Between the closing curly bracket for the first if( OPER_ALL || OPER_DATASOURCE) { and the start of the second, add: ~~~ java // Term object if( OPER_ALL || OPER_TERM) { tm = termHandler.createObject(token.getToken(), ds.getId()); log.debug(“Create TM: “ + tm.toString()); tm = termHandler.readObject(token.getToken()); log.debug(“Read TM: “ + tm.toString()); tm = termHandler.updateObject(token.getToken(), ds.getId()); log.debug(“Update TM: “ + tm.toString()); } // Delete objects if( OPER_ALL || OPER_TERM) { result = termHandler.deleteObject(token.getToken()); log.debug(“Delete TM: “ + result); } ~~~ Save the file. At the command line in the project directory, type gradle run (or ./gradlew run) and watch as the token is printed to the screen. Review the RestDemo.java in the 3-Implementing-Term folder to compare to your RestDemo.java if you have issues. What You Should See For Create: For Read: For Update: For Delete: What We Did So in this step of the tutorial, we added the code necessary to create, read, update, and delete a term. The first step was to put our Term object in place, along with its companion Availability object. This object is actually re-used by other classes we will implement in the final step. These objects are configured to allow the Jackson library to automatically serialize and deserialize our JSON payloads. It provides the basic properties that correspond directly to the JSON payload we expect to receive from Blackboard Learn when we manipulate a term. Once we have created and populated this object, we can then access this data whenever we need to. Next we implemented our TermHandler service class. This class handles the REST calls, all object generation and retrieval, and passing information back to our main class. When the class is initialized, we set up logging and make sure the handler has the correct hostname. Each operation has its own method that generates the appropriate body if necessary, then passes the necessary data to the sendRequest method to send the appropriate message and retrieve the appropriate response. Lastly, we updated our main class in order to call the appropriate methods to interact with the Term Service class. Step 4: Remaining Objects The remainder of the tutorial is really just about moving the remaining objects and handlers in place and repeating the previously established pattern in the RestDemo class. In the “4-Implement-Remaining-Objects” folder, you will find a plethora of files. You will also notice a familiar pattern: Handler classes are the service handler classes for their respective objects. As before, these do the actual work of manipulating objects and retrieving the results. Classes named after objects are JSON Model classes. These are what we will use to interact with the JSON we receive from Blackboard Learn. The handler classes will handle the REST API interaction, and automatically serialize and deserialize the JSON payloads into the corresponding object, allowing the application to simply interact with it as a normal Java object. Several of these model classes are nested objects for other base classes. The RestDemo class is what our bbdn.rest.RestDemo class will look like when we complete this step in the tutorial. Let’s get started: Move /4-Implement-Remaining-Objects/CourseHandler.java to the bbdn.rest.services package. Move /4-Implement-Remaining-Objects/UserHandler.java to the bbdn.rest.services package. Move /4-Implement-Remaining-Objects/MembershipHandler.java to the bbdn.rest.services package. Move /4-Implement-Remaining-Objects/Course.java to the bbdn.rest.objects package. Move /4-Implement-Remaining-Objects/User.java to the bbdn.rest.objects package. Move /4-Implement-Remaining-Objects/Membership.java to the bbdn.rest.objects package. Move /4-Implement-Remaining-Objects/Contact.java to the bbdn.rest.objects package. Move /4-Implement-Remaining-Objects/Name.java to the bbdn.rest.objects package. Move /4-Implement-Remaining-Objects/RestDemo.java to the bbdn.rest package. At the command line in the project directory, type gradle run (or ./gradlew run) and watch as the token is printed to the screen. Review the RestDemo.java in the 4-Implement-Remaining-Objects folder to compare to your RestDemo.java if you have issues. What You Should See shurreymbp:BBDN-DevCon-REST-Workshop shurrey$ cp 4-Implement-Remaining-Objects/RestDemo.java src/main/java/bbdn/rest/ shurreymbp:BBDN-DevCon-REST-Workshop shurrey$ gradle run :compileJava :processResources UP-TO-DATE :classes :run [main] INFO bbdn.rest.Authorizer - Value to hash: d03caa33-1095-47b9-bc67-f5cd634430b1:QSFClAMu5KmoG8yFbHTi7pjhsseJl4uz [main] INFO bbdn.rest.Authorizer - Hashed Value: ZDAzY2FhMzMtMTA5NS00N2I5LWJjNjctZjVjZDYzNDQzMGIxOlFTRkNsQU11NUttb0c4eUZiSFRpN3BqaHNzZUpsNHV6 [main] INFO bbdn.rest.Authorizer - Request Headers: {Authorization=[Basic ZDAzY2FhMzMtMTA5NS00N2I5LWJjNjctZjVjZDYzNDQzMGIxOlFTRkNsQU11NUttb0c4eUZiSFRpN3BqaHNzZUpsNHV6], Content-Type=[application/x-www-form-urlencoded]} [main] INFO bbdn.rest.Authorizer - Request Body:grant_type=client_credentials [main] INFO bbdn.rest.Authorizer - Response: &lt;200 OK,Token{access_token=uC5G2HvEsI1DWP24xD2lnaG35EQsenZs', token_type=bearer', expires_in=1639},{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:05 GMT], Expires=[Mon, 27 Jul 2015 19:50:05 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=5457EE8C14E1C940EE662CE047A3DF31; Path=/learn/api],X-Blackboard-Context-Version=[3000.1.1-rel.5+7a1d308], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed,27 Jul 2016 19:50:06 GMT]}&gt; [main] INFO bbdn.rest.Authorizer - Access Token: Token{access_token=uC5G2HvEsI1DWP24xD2lnaG35EQsenZs', token_type=bearer', expires_in=1639} [main] INFO bbdn.rest.services.DatasourceHandler - CREATE [main] INFO bbdn.rest.services.DatasourceHandler - URI is http://localhost:9876/learn/api/public/v1/dataSources [main] INFO bbdn.rest.services.DatasourceHandler - Request Headers:{Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.DatasourceHandler - Request Body: Datasource [id=null, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null,extrainfo=null] [main] INFO bbdn.rest.services.DatasourceHandler - Response: &lt;201 Created,Datasource [id=_13_1, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:06 GMT], Expires=[Mon, 27 Jul 2015 19:50:06 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=0BEAD73C4DFFC8C01B037883D467B533; Path=/learn/api], Location=[/learn/api/public/v1/dataSources/_13_1],X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed,27 Jul 2016 19:50:06 GMT]}&gt; [main] INFO bbdn.rest.services.DatasourceHandler - Datasource: Datasource [id=_13_1, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null,extrainfo=null] [main] INFO bbdn.rest.services.DatasourceHandler - READ [main] INFO bbdn.rest.services.DatasourceHandler - URI is http://localhost:9876/learn/api/public/v1/dataSources/externalId:BBDN-DSK-JAVA [main] INFO bbdn.rest.services.DatasourceHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.DatasourceHandler - Request Body: Datasource [id=null, externalId=null, description=null, status=null, code=null,message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.DatasourceHandler - Response: &lt;200 OK,Datasource [id=_13_1, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1],P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache],Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:06 GMT], Expires=[Mon, 27 Jul 2015 19:50:06 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=5DDDADB64296A3E350B157B6D44B7B7F;Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab],Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked],Date=[Wed, 27 Jul 2016 19:50:06 GMT]}&gt; [main] INFO bbdn.rest.services.DatasourceHandler - Datasource: Datasource [id=_13_1, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.DatasourceHandler - UPDATE [main] INFO bbdn.rest.services.DatasourceHandler - URI is http://localhost:9876/learn/api/public/v1/dataSources/externalId:BBDN-DSK-JAVA [main] INFO bbdn.rest.services.DatasourceHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.DatasourceHandler - Request Body: Datasource [id=null, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.DatasourceHandler - Response: &lt;200 OK,Datasource [id=_13_1, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:06 GMT], Expires=[Mon, 27 Jul 2015 19:50:06 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=F8464644EAA806822A7121A3AAEE0531;Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab],Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked],Date=[Wed, 27 Jul 2016 19:50:06 GMT]}&gt; [main] INFO bbdn.rest.services.DatasourceHandler - Datasource: Datasource [id=_13_1, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - CREATE [main] INFO bbdn.rest.services.TermHandler - URI is http://localhost:9876/learn/api/public/v1/terms [main] INFO bbdn.rest.services.TermHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.TermHandler - Request Body: Term [id=null, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - Response: &lt;201 Created,Term [id=_7_1, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=2498E5AC7B7F40B9B4A53BFCC3762029; Path=/learn/api], Location=[/learn/api/public/v1/terms/_7_1], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed,27 Jul 2016 19:50:06 GMT]}&gt; [main] INFO bbdn.rest.services.TermHandler - Term: Term [id=_7_1,externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - READ [main] INFO bbdn.rest.services.TermHandler - URI is [http://localhost:9876/learn/api/public/v1/terms/externalId:BBDN-TERM-JAVA [main] INFO bbdn.rest.services.TermHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.TermHandler - Request Body: Term [id=null, externalId=null, dataSourceId=null, name=null, description=null, availability=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - Response: &lt;200 OK,Term [id=_7_1, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=4341909E1D54C7A129E5883CE21E82E0; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:06 GMT]}&gt; [main] INFO bbdn.rest.services.TermHandler - Term: Term [id=_7_1, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - UPDATE [main] INFO bbdn.rest.services.TermHandler - URI is http://localhost:9876/learn/api/public/v1/terms/externalId:BBDN-TERM-JAVA [main] INFO bbdn.rest.services.TermHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.TermHandler - Request Body: Term [id=null, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - Response: &lt;200 OK,Term [id=_7_1, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=097D9AF4FF4AAE88C29BD42C9AA0526B; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:07 GMT]}&gt; [main] INFO bbdn.rest.services.TermHandler - Term: Term [id=_7_1, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - CREATE [main] INFO bbdn.rest.services.CourseHandler - Course [id=null, uuid=null, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=null, organization=false, ultraStatus=null, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - URI is http://localhost:9876/learn/api/public/v1/courses [main] INFO bbdn.rest.services.CourseHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.CourseHandler - Request Body: Course [id=null, uuid=null, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=null, organization=false, ultraStatus=null, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - Response: &lt;201 Created,Course [id=_7_1, uuid=9ec59f4d3e094cd5b2025858a28a3b39, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=2016-07-27T19:50:07.376Z, organization=false, ultraStatus=Classic, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=54A6544B4CDB9B039EFA56487A85035B; Path=/learn/api], Location=[/learn/api/public/v1/courses/_7_1], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:07 GMT]}&gt; [main] INFO bbdn.rest.services.CourseHandler - Course: Course [id=_7_1, uuid=9ec59f4d3e094cd5b2025858a28a3b39, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=2016-07-27T19:50:07.376Z, organization=false, ultraStatus=Classic, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - READ [main] INFO bbdn.rest.services.CourseHandler - URI is http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo [main] INFO bbdn.rest.services.CourseHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.CourseHandler - Request Body: Course [id=null, uuid=null, externalId=null, dataSourceId=null, courseId=null, name=null, description=null, created=null, organization=false, ultraStatus=null, allowGuests=false, readOnly=false, termId=null, availability=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - Response: &lt;200 OK,Course [id=_7_1, uuid=9ec59f4d3e094cd5b2025858a28a3b39, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=2016-07-27T19:50:07.376Z, organization=false, ultraStatus=Classic, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=DF5C615760A8438DFF112613D84926EF; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:07 GMT]}&gt; [main] INFO bbdn.rest.services.CourseHandler - Course: Course [id=_7_1, uuid=9ec59f4d3e094cd5b2025858a28a3b39, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=2016-07-27T19:50:07.376Z, organization=false, ultraStatus=Classic, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - UPDATE [main] INFO bbdn.rest.services.CourseHandler - Course [id=null, uuid=null, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=null, organization=false, ultraStatus=null, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - URI is http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo [main] INFO bbdn.rest.services.CourseHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.CourseHandler - Request Body: Course [id=null, uuid=null, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=null, organization=false, ultraStatus=null, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - Response: &lt;200 OK,Course [id=_7_1, uuid=9ec59f4d3e094cd5b2025858a28a3b39, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=2016-07-27T19:50:07.376Z, organization=false, ultraStatus=Classic, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=64C50ECFDE762D6C97C5409AB26DF00B; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:07 GMT]}&gt; [main] INFO bbdn.rest.services.CourseHandler - Course: Course [id=_7_1, uuid=9ec59f4d3e094cd5b2025858a28a3b39, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=2016-07-27T19:50:07.376Z, organization=false, ultraStatus=Classic, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - CREATE [main] INFO bbdn.rest.services.UserHandler - User [id=null, uuid=null, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=Bl@ckb0ard!, studentId=null, educationLevel=null, gender=null, birthDate=null, created=null, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@blackboard.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - URI is http://localhost:9876/learn/api/public/v1/users [main] INFO bbdn.rest.services.UserHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.UserHandler - Request Body: User [id=null, uuid=null, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=Bl@ckb0ard!, studentId=null, educationLevel=null, gender=null, birthDate=null, created=null, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [[email=developers@blackboard.com](mailto:email=developers@blackboard.com)], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - Response: &lt;201 Created,User [id=_9_1, uuid=c55303eaa7d541aab75ebd218d1a6e20, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=null, studentId=null, educationLevel=Unknown, gender=Unknown, birthDate=null, created=2016-07-27T19:50:07.970Z, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@blackboard.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=679348D067502E72AD1ECAD13B33322E; Path=/learn/api], Location=[/learn/api/public/v1/users/_9_1], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:07 GMT]}&gt; [main] INFO bbdn.rest.services.UserHandler - User: User [id=_9_1, uuid=c55303eaa7d541aab75ebd218d1a6e20, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=null, studentId=null, educationLevel=Unknown, gender=Unknown, birthDate=null, created=2016-07-27T19:50:07.970Z, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@blackboard.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - READ [main] INFO bbdn.rest.services.UserHandler - URI is http://localhost:9876/learn/api/public/v1/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.UserHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.UserHandler - Request Body: User [id=null, uuid=null, externalId=null, dataSourceId=null, userName=null, password=null, studentId=null, educationLevel=null, gender=null, birthDate=null, created=null, lastLogin=null, availability=null, name=null, contact=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - Response: &lt;200 OK,User [id=_9_1, uuid=c55303eaa7d541aab75ebd218d1a6e20, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=null, studentId=null, educationLevel=Unknown, gender=Unknown, birthDate=null, created=2016-07-27T19:50:07.970Z, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@blackboard.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:08 GMT], Expires=[Mon, 27 Jul 2015 19:50:08 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=6754BF5FA616BB198CC2118EC1E3F5CB; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed,27 Jul 2016 19:50:07 GMT]}&gt; [main] INFO bbdn.rest.services.UserHandler - User: User [id=_9_1, uuid=c55303eaa7d541aab75ebd218d1a6e20, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=null, studentId=null, educationLevel=Unknown, gender=Unknown, birthDate=null, created=2016-07-27T19:50:07.970Z, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@blackboard.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - UPDATE [main] INFO bbdn.rest.services.UserHandler - User [id=null, uuid=null, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=Bl@ckb0ard!, studentId=null, educationLevel=null, gender=null, birthDate=null, created=null, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@blackboard.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - URI is http://localhost:9876/learn/api/public/v1/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.UserHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.UserHandler - Request Body: User [id=null, uuid=null, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=Bl@ckb0ard!, studentId=null, educationLevel=null, gender=null, birthDate=null, created=null, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@blackboard.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - Response: &lt;200 OK,User [id=_9_1, uuid=c55303eaa7d541aab75ebd218d1a6e20, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=null, studentId=null, educationLevel=Unknown, gender=Unknown, birthDate=null, created=2016-07-27T19:50:07.970Z, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@blackboard.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:08 GMT], Expires=[Mon, 27 Jul 2015 19:50:08 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=D8AC51CE6341F1C29832F9B9764C1A74; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:08 GMT]}&gt; [main] INFO bbdn.rest.services.UserHandler - User: User [id=_9_1, uuid=c55303eaa7d541aab75ebd218d1a6e20, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=null, studentId=null, educationLevel=Unknown, gender=Unknown, birthDate=null, created=2016-07-27T19:50:07.970Z, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@blackboard.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - CREATE [main] INFO bbdn.rest.services.MembershipHandler - Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=null, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - URI is [http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.MembershipHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.MembershipHandler - Request Body: Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=null, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - Response: &lt;201 Created,Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=2016-07-27T19:50:08.539Z, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:08 GMT], Expires=[Mon, 27 Jul 2015 19:50:08 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=6BCBBFC919575F4FA108817EF78FFC73; Path=/learn/api], Location=[/learn/api/public/v1/courses/_7_1/users/_9_1], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:08 GMT]}&gt; [main] INFO bbdn.rest.services.MembershipHandler - Membership: Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=2016-07-27T19:50:08.539Z, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - READ [main] INFO bbdn.rest.services.MembershipHandler - URI is http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.MembershipHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.MembershipHandler - Request Body: Membership [userId=null, courseId=null, dataSourceId=null, created=null, courseRoleId=null, availability=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - Response: &lt;200 OK,Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=2016-07-27T19:50:08.539Z, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9],Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:08 GMT], Expires=[Mon, 27 Jul 2015 19:50:08 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=64E622F16D37FF787E3319321D9B3740; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:08 GMT]}&gt; [main] INFO bbdn.rest.services.MembershipHandler - Membership: Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=2016-07-27T19:50:08.539Z, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - UPDATE [main] INFO bbdn.rest.services.MembershipHandler - Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=null, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - URI is http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.MembershipHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.MembershipHandler - Request Body: Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=null,courseRoleId=Instructor, availability=Availability [available=Yes],status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - Response: &lt;200 OK,Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=2016-07-27T19:50:08.539Z, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:08 GMT], Expires=[Mon, 27 Jul 2015 19:50:08 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=C26CD9BF1C6D987BEF83B8BFB2508692; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:08 GMT]}&gt; [main] INFO bbdn.rest.services.MembershipHandler - Membership: Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=2016-07-27T19:50:08.539Z, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - DELETE [main] INFO bbdn.rest.services.MembershipHandler - URI is http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.MembershipHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.MembershipHandler - Request Body: Membership [userId=null, courseId=null, dataSourceId=null, created=null, courseRoleId=null, availability=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - Response: &lt;204 No Content,{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:08 GMT], Expires=[Mon, 27 Jul 2015 19:50:08 GMT], X-Frame-Options=[SAMEORIGIN],Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=614DC8400A97E7A1EE8A5D84FB5C91F9; Path=/learn/api],X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Date=[Wed, 27 Jul 2016 19:50:08 GMT]}&gt; [main] INFO bbdn.rest.services.UserHandler - DELETE [main] INFO bbdn.rest.services.UserHandler - URI is http://localhost:9876/learn/api/public/v1/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.UserHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.UserHandler - Request Body: User [id=null, uuid=null, externalId=null, dataSourceId=null, userName=null, password=null, studentId=null, educationLevel=null, gender=null, birthDate=null, created=null, lastLogin=null, availability=null, name=null, contact=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - Response: &lt;204 No Content,{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482;3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:09 GMT], Expires=[Mon, 27 Jul 2015 19:50:09 GMT], X-Frame-Options=[SAMEORIGIN],Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=7962DE99F72343771643822431BB5EA3; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Date=[Wed, 27 Jul 2016 19:50:09 GMT]}&gt; [main] INFO bbdn.rest.services.CourseHandler - DELETE [main] INFO bbdn.rest.services.CourseHandler - URI is http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo [main] INFO bbdn.rest.services.CourseHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.CourseHandler - Request Body: Course [id=null, uuid=null, externalId=null, dataSourceId=null, courseId=null, name=null, description=null, created=null, organization=false, ultraStatus=null, allowGuests=false, readOnly=false, termId=null, availability=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - Response: &lt;204 No Content,{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482;3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:09 GMT], Expires=[Mon, 27 Jul 2015 19:50:09 GMT], X-Frame-Options=[SAMEORIGIN],Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=D1F4182A949F2FE8FA7CA98C0BF59CB7; Path=/learn/api],X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Date=[Wed, 27 Jul 2016 19:50:09 GMT]}&gt; [main] INFO bbdn.rest.services.TermHandler - DELETE [main] INFO bbdn.rest.services.TermHandler - URI is http://localhost:9876/learn/api/public/v1/terms/externalId:BBDN-TERM-JAVA [main] INFO bbdn.rest.services.TermHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.TermHandler - Request Body: Term [id=null,externalId=null, dataSourceId=null, name=null, description=null,availability=null, status=null, code=null, message=null,developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - Response: &lt;204 No Content,{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482;3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:10 GMT], Expires=[Mon, 27 Jul 2015 19:50:10 GMT], X-Frame-Options=[SAMEORIGIN],Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=FF3871AC05EB0F3B28018DAFA0D7AB1D; Path=/learn/api],X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Date=[Wed, 27 Jul 2016 19:50:09 GMT]}&gt; [main] INFO bbdn.rest.services.DatasourceHandler - DELETE [main] INFO bbdn.rest.services.DatasourceHandler - URI is http://localhost:9876/learn/api/public/v1/dataSources/externalId:BBDN-DSK-JAVA [main] INFO bbdn.rest.services.DatasourceHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.DatasourceHandler - Request Body: Datasource [id=null, externalId=null, description=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.DatasourceHandler - Response: &lt;204 No Content,{Server=[Apache-Coyote/1.1], P3P=[CP=\"CAO PSA OUR\"], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Blackboard Learn &amp;#8482;3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:10 GMT], Expires=[Mon, 27 Jul 2015 19:50:10 GMT], X-Frame-Options=[SAMEORIGIN],Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=E7B5A007C1E329DFF0F8F477E580A4CB; Path=/learn/api],X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Date=[Wed, 27 Jul 2016 19:50:09 GMT]}&gt; BUILD SUCCESSFUL Total time: 7.356 secs What We Did In this tutorial we built a Java command line application that creates, reads, updates, and deletes the five core REST objects: datasources, terms, courses, users, and memberships. Along the way, we learned how to institute OAuth, create HTTP messages and interact with the Blackboard Learn REST APIs, how to use Jackson to serialize and deserialize objects, and how to use Gradle to build and run command line Java applications.",
    "tags": "Learn Rest",
    "url": "/learn/rest/examples/java-command-line.html"
  },{
    "title": "Java Demo",
    "text": "Demo using Java The rest demo script demonstrates authenticating a REST application, management and use of the authorization token, and creating, updating, discovering, and deleting supported Learn objects. For a more complete tutorial, check out this page to walkthrough building a Java command-line application. Prerequisites You must register a developer account and application in the Developer Portal You must register your application in Blackboard Learn You must also configure the script as outlined in the README for the project This webapp allows you to: Authenticate Create, Read, and Update a Data Source Create, Read, and Update a Term Create, Read, and Update a Course Create, Read, and Update a User Create, Read, and Update a Membership Delete created objects in reverse order of create - membership, user, course, term, datasource. All generated output is sent to the browser. This is not meant to be a Java tutorial. It will not teach you to write code in Java. It will, however, give a Developer familiar with Java the knowledge necessary to build a Web Services integration. Assumptions This help topic assumes the Developer: is familiar with Java has Tomcat running somewhere the webapp can be installed has obtained a copy of the source code and built and deployed it to Tomcat in conjunction with the project README.md file. has a REST-enabled Blackboard Learn instance. Code Walkthrough To build an integration with the Blackboard REST Web Services, regardless of the programming language of choice, can really be summed up in two steps: Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the Basic Authentication document. Call the appropriate REST endpoint with the appropriate data to perform the appropriate action. Authorization and Authentication The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A request is made to the token endpoint with a Basic Authorization header containing the base64-encoded key:secret string as its key. The token service returns a JSON object containing the Access Token, the Token Type, and the number of seconds until the token expires. The token is set to expire after one hour, and subsequent calls to retrieve the token will return the same token with an updated expiry time until such time that the token has expired. There is no refresh token and currently no revoke token method. The java code handles this in bbdn.rest.Authorizer:   HttpHeaders headers = new HttpHeaders();   headers.add(\"Authorization\", \"Basic \" + getHash());   headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);      HttpEntity&lt;String&gt; request = new HttpEntity&lt;String&gt;(\"grant_type=client_credentials\",headers);     ResponseEntity&lt;Token&gt; response = restTemplate.exchange(uri, HttpMethod.POST, request, Token.class);           Token token = response.getBody(); The JSON response is serialized into the Token object, and you may then retrieve those values from that object. Calling Services The individual service calls are handled by Java Classes in service specific packages, that all implement the bbdn.rest.RestHandler interface. The interface is used to normalize each service handler to make additional service implementation standardized as new endpoints are added. RestHandler dictates that four methods must be implemented: String createObject(String access_token); String readObject(String access_token); String updateObject(String access_token); String deleteObject(String access_token); Each of these methods creates the JSON body when appropriate and then calls bbdn.rest.RestRequest to generate the appropriate HTTP Request, ship it to Learn, and return the JSON response as a String to be displayed in the browser window. This all happens with the following code: public static String sendRequest(String sUri, HttpMethod method, String access_token, String body) {      try {           RestTemplate restTemplate = new RestTemplate();           // Workaround for allowing unsuccessful HTTP Errors to still print to the screen           restTemplate.setErrorHandler(new DefaultResponseErrorHandler(){               protected boolean hasError(HttpStatus statusCode) {                     return false;           }});           // Workaround to allow for PATCH requests           HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();           restTemplate.setRequestFactory(requestFactory);                    URI uri = null;           try {                uri = new URI(RestConstants.HOSTNAME + sUri);           } catch (URISyntaxException e) {                e.printStackTrace();           }                    HttpHeaders headers = new HttpHeaders();           headers.add(\"Authorization\", \"Bearer \" + access_token);           headers.setContentType(MediaType.APPLICATION_JSON);           HttpEntity&lt;String&gt; request = new HttpEntity&lt;String&gt;(body, headers);                     ResponseEntity&lt;String&gt; response = restTemplate.exchange(uri, method, request, String.class);           return (response.toString());      }      catch (Exception e) {           return(e.getMessage());      } } End points are generally defined as /learn/api/public/v1/&lt;object type&gt;/&lt;objectId&gt;. Object ID can be either the pk1, like _1_1, or as the batchuid. This value should be prepended by externalId:, like externalId:test101. For example, to retrieve a course by the pk1 _1_1, you would call GET /learn/api/public/v1/courses/_1_1. To retrieve by the batchuid test101, you would call GET /learn/api/public/v1/courses/externalId:test101. Create is sent to Learn as a HTTP POST message with a JSON body that defines the object. The endpoint should omit the objectId, as this will be generated on creation. Read is sent to Learn as a HTTP GET message with an empty body. The endpoint should include the objectId being retrieved. Update is sent to Learn as a HTTP PATCH message with a JSON body that defines the object. The endpoint should include the objectId being updated. Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint should include the objectId being deleted. Datasources Datasources are handled in bbdn.rest.datasources.DatasourceHandler. As illustrated above, this Class implements the RestHandler interface and exposes four methods. It also includes a private method to create the JSON payload. Create @Override public String createObject(String access_token) {       return(RestRequest.sendRequest(RestConstants.DATASOURCE_PATH, HttpMethod.POST, access_token, getBody())); } Read @Override public String readObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.DATASOURCE_PATH + \"/externalId:\" + RestConstants.DATASOURCE_ID, HttpMethod.GET, access_token, \"\")); } Update @Override public String updateObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.DATASOURCE_PATH + \"/externalId:\" + RestConstants.DATASOURCE_ID, HttpMethod.PATCH, access_token, getBody())); } Delete @Override public String deleteObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.DATASOURCE_PATH + \"/externalId:\" + RestConstants.DATASOURCE_ID, HttpMethod.DELETE, access_token, \"\")); } Create Body private String getBody() {      ObjectMapper objMapper = new ObjectMapper();      JsonNode datasource = objMapper.createObjectNode();      ((ObjectNode) datasource).put(\"externalId\", RestConstants.DATASOURCE_ID);      ((ObjectNode) datasource).put(\"description\", RestConstants.DATASOURCE_DESCRIPTION);      String body = \"\";      try {           body = objMapper.writeValueAsString(datasource);      } catch (JsonProcessingException e) {           e.printStackTrace();      }      return(body); } Terms Terms are handled in bbdn.rest.terms.TermHandler. As illustrated above, this Class implements the RestHandler interface and exposes four methods. It also includes a private method to create the JSON payload. In this initial release, we are omitting the datasource. This is because the externalId version of the datasource is not accepted in JSON payloads at this time. We could create a CONSTANT and set it to what we think it will be, but the ID isn’t set until the Datasource is created, so we don’t know for sure what it will be. Create @Override public String createObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.TERM_PATH, HttpMethod.POST, access_token, getBody())); } Read @Override public String readObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.TERM_PATH + \"/externalId:\" + RestConstants.TERM_ID, HttpMethod.GET, access_token, \"\")); } Update @Override public String updateObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.TERM_PATH + \"/externalId:\" + RestConstants.TERM_ID, HttpMethod.PATCH, access_token, getBody())); } Delete @Override public String deleteObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.TERM_PATH + \"/externalId:\" + RestConstants.TERM_ID, HttpMethod.DELETE, access_token, \"\")); } Create Body private String getBody() {      ObjectMapper objMapper = new ObjectMapper();      ObjectNode term = objMapper.createObjectNode();      term.put(\"externalId\", RestConstants.TERM_ID);      //term.put(\"dataSourceId\", RestConstants.DATASOURCE_ID);      term.put(\"name\", RestConstants.TERM_NAME);      term.put(\"description\", RestConstants.TERM_DISPLAY);      ObjectNode availability = term.putObject(\"availability\");      availability.put(\"available\", \"Yes\");      ObjectNode duration = availability.putObject(\"duration\");      duration.put(\"type\",  \"Continuous\");      String body = \"\";      try {           body = objMapper.writeValueAsString(term);      } catch (JsonProcessingException e) {           e.printStackTrace();      }      return(body); } Courses Course are handled in bbdn.rest.course.CourseHandler. As illustrated above, this Class implements the RestHandler interface and exposes four methods. It also includes a private method to create the JSON payload. In this initial release, we are omitting the datasource. This is because the externalId version of the datasource is not accepted in JSON payloads at this time. We could create a CONSTANT and set it to what we think it will be, but the ID isn’t set until the Datasource is created, so we don’t know for sure what it will be. Create @Override public String createObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.COURSE_PATH, HttpMethod.POST, access_token, getBody())); } Read @Override public String readObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.COURSE_PATH + \"/externalId:\" + RestConstants.COURSE_ID, HttpMethod.GET, access_token, \"\")); } Update @Override public String updateObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.COURSE_PATH + \"/externalId:\" + RestConstants.COURSE_ID, HttpMethod.PATCH, access_token, getBody())); } Delete @Override public String deleteObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.COURSE_PATH + \"/externalId:\" + RestConstants.COURSE_ID, HttpMethod.DELETE, access_token, \"\")); } Create Body private String getBody() {      ObjectMapper objMapper = new ObjectMapper();      ObjectNode course = objMapper.createObjectNode();      course.put(\"externalId\", RestConstants.COURSE_ID);      //course.put(\"dataSourceId\", RestConstants.DATASOURCE_ID);      course.put(\"courseId\", RestConstants.COURSE_ID);      course.put(\"name\", RestConstants.COURSE_NAME);      course.put(\"description\", RestConstants.COURSE_DESCRIPTION);      course.put(\"allowGuests\", \"true\");      course.put(\"readOnly\", \"false\");      course.put(\"termId\", RestConstants.TERM_ID);      ObjectNode availability = course.putObject(\"availability\");      availability.put(\"duration\", \"continuous\");      String body = \"\";      try {           body = objMapper.writeValueAsString(course);      } catch (JsonProcessingException e) {           e.printStackTrace();      }      return(body); } Users Users are handled in bbdn.rest.users.UserHandler. As illustrated above, this Class implements the RestHandler interface and exposes four methods. It also includes a private method to create the JSON payload. In this initial release, we are omitting the datasource. This is because the externalId version of the datasource is not accepted in JSON payloads at this time. We could create a CONSTANT and set it to what we think it will be, but the ID isn’t set until the Datasource is created, so we don’t know for sure what it will be. Create @Override public String createObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.USER_PATH, HttpMethod.POST, access_token, getBody())); } Read @Override public String readObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.USER_PATH + \"/externalId:\" + RestConstants.USER_ID, HttpMethod.GET, access_token, \"\")); } Update @Override public String updateObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.USER_PATH + \"/externalId:\" + RestConstants.USER_ID, HttpMethod.PATCH, access_token, getBody())); } Delete @Override public String deleteObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.USER_PATH + \"/externalId:\" + RestConstants.USER_ID, HttpMethod.DELETE, access_token, \"\")); } Create Body private String getBody() {      ObjectMapper objMapper = new ObjectMapper();      ObjectNode user = objMapper.createObjectNode();      user.put(\"externalId\", RestConstants.USER_ID);      //user.put(\"dataSourceId\", RestConstants.DATASOURCE_ID);      user.put(\"userName\", RestConstants.USER_NAME);      user.put(\"password\", RestConstants.USER_PASS);      ObjectNode availability = user.putObject(\"availability\");      availability.put(\"available\", \"Yes\");      ObjectNode name = user.putObject(\"name\");      name.put(\"given\", RestConstants.USER_FIRST);      name.put(\"family\", RestConstants.USER_LAST);      ObjectNode contact = user.putObject(\"contact\");      contact.put(\"email\", RestConstants.USER_EMAIL);      String body = \"\";      try {           body = objMapper.writeValueAsString(user);      } catch (JsonProcessingException e) {           e.printStackTrace();      }       return(body); } Memberships Memberships are handled in bbdn.rest.memberships.MemberHandler. As illustrated above, this Class implements the RestHandler interface and exposes four methods. It also includes a private method to create the JSON payload. In this initial release, we are omitting the datasource. This is because the externalId version of the datasource is not accepted in JSON payloads at this time. We could create a CONSTANT and set it to what we think it will be, but the ID isn’t set until the Datasource is created, so we don’t know for sure what it will be. In addition, the endpoint for memberships is a bit different, in that it is a sub-call to courses, so the endpoint would look like /learn/api/public/v1/courses/&lt;courseId&gt;/users/&lt;userId&gt;. Create @Override public String createObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.COURSE_PATH + \"/externalId:\" + RestConstants.COURSE_ID + \"/users/externalId:\"+ RestConstants.USER_ID, HttpMethod.PUT, access_token, getBody())); } Read @Override public String readObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.COURSE_PATH + \"/externalId:\" + RestConstants.COURSE_ID + \"/users/externalId:\"+ RestConstants.USER_ID, HttpMethod.GET, access_token, \"\")); } Update @Override public String updateObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.COURSE_PATH + \"/externalId:\" + RestConstants.COURSE_ID + \"/users/externalId:\"+ RestConstants.USER_ID, HttpMethod.PATCH, access_token, getBody())); } Delete @Override public String deleteObject(String access_token) {      return(RestRequest.sendRequest(RestConstants.COURSE_PATH + \"/externalId:\" + RestConstants.COURSE_ID + \"/users/externalId:\"+ RestConstants.USER_ID, HttpMethod.DELETE, access_token, \"\")); } Create Body private String getBody() {      ObjectMapper objMapper = new ObjectMapper();      ObjectNode membership = objMapper.createObjectNode();      //membership.put(\"dataSourceId\", RestConstants.DATASOURCE_ID);      ObjectNode availability = membership.putObject(\"availability\");      availability.put(\"available\", \"Yes\");      membership.put(\"courseRoleId\", \"Instructor\");      String body = \"\";      try {           body = objMapper.writeValueAsString(membership);      } catch (JsonProcessingException e) {           e.printStackTrace();      }      return(body); } Conclusion All of the code snippets included in this document at included in a sample REST Demo Java Webapp application available on GitHub. There is a README.html included that talks more specifically about building and running the code. Feel free to review the code and run it against a test or development Learn instance to see how it works.",
    "tags": "Learn Rest",
    "url": "/learn/rest/examples/java-demo.html"
  },{
    "title": "B2s and Java Permissions",
    "text": "B2s and Java Permissions Building Blocks are basically web applications which run in the Blackboard Learn web application container. As such they require specific permissions added to their bb-manifest.xml file to properly install, display, retrieve and persist data, and correctly operate within the Learn application and environment. In order to interact with the Learn environment a Building Block must supply the necessary set of java permissions in the permissions element located near the bottom of the bb-manifest file. A basic set of permissions may include: &lt;permission type=\"attribute\" name=\"user.personalinfo\" actions=\"get,set\"/&gt; &lt;permission type=\"blackboard.persist.PersistPermission\" name=\"user\" actions=\"create,modify\"/&gt; &lt;permission type=\"java.net.SocketPermission\" name=\"*\" actions=\"resolve,connect\"/&gt; &lt;permission type=\"java.util.PropertyPermission\" name=\"*\" actions=\"read,write\"/&gt; One permission often seen is: &lt;permission type=\"java.io.FilePermission\" name=\"&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;\" actions=\"read,write\"/&gt; While convenient to use this particular ‘wild card’ notation, it provides access to all system files. Thus it is more secure to specify files and paths directly even if this requires multiple permission entries: &lt;permission type=\"java.io.FilePermission\" name=\"BB_HOME/logs/my_b2.log\" actions=\"read,write\"/&gt; A more comprehensive though not all-inclusive set of permissions is listed at the end of this help topic. How do I know which permissions to include? Unfortunately AccessControlException&lt; are not discoverable at compile- time as they only manifest when a Building Block is running. So beyond the common permissions noted above, exceptions may be determined by coding practices or by log entry identification. When an installed Building Block encounters a permissions gap at runtime it will throw an AccessControlException permission error. You may use this error to determine the exact permission you need to add to the bb-manifest to correct the AccessControlException condition. The main indication of an AccessControlException is receiving error 404 when launching your Building Block. This 404 error indicates that the resource is unavailable. This 404 error is a good indication that the Building Block is missing a required permission. The next step is to identify the missing permission. Using Linux as an example, inspect the /usr/local/blackboard/logs/tomcat/stdout-stderr-xxxxxxxx-log.txt, where xxxxxxxx is the date when the error appeared. Search this log for AccessControlException and you should find something like this: Caused by: java.security.AccessControlException: access denied (java.net.SocketPermission tup6.temple.edu resolve) This is the logged exception and follows the pattern of: Caused by: java.security.**_AccessControlException_**: access denied (&lt;type&gt; &lt;name&gt; [&lt;actions&gt;]) To resolve this error, you simply need to add a new permission element to your bb-manifest.xml file using the logged and if specified []. The format for the permission element is (notice the same terminology in use): &lt;permission type=\"&lt;type&gt;\" name=\"&lt;name&gt;\" actions=\"&lt;actions&gt;\" /&gt; Simply enter the values from the error message into the permission element, add it to your bb-manifest and re-deploy your Building Block. It is important to note that is optional. If your error stack doesn’t have associated with it, simply leave it blank (i.e. actions=\"\"). To illustrate this, we’ll take the above listed error and convert it into a permission element. Thus: Caused by: java.security.**_AccessControlException_**: access denied (java.net.SocketPermission tup6.temple.edu resolve) Becomes: &lt;permission type=”java.net.SocketPermission” name=”tup6.temple.edu” actions=”resolve” /&gt; You will need to re-deploy your Building Block after changing your bb- manifest. Uninstalling and re-deploying your Building Block or changing the version number will update the Building Block with the permissions specified in the bb-manifest. In addition, Blackboard Learn 9.1 October 2014 Release requires a system restart in order to implement the new changes in permissions. More Permissions Below are some additional permissions for formatting reference. Do not include more permissions than are necessary for proper operation of your Building Block as this will impact start times. &lt;permission type=\"blackboard.data.AttributePermission\" name=\"sessionmanager\" actions=\"get\" /&gt; &lt;permission type=\"attribute\" name=\"user.personalinfo\" actions=\"get,set\" /&gt; &lt;permission type=\"persist\" name=\"groupmembership\" actions=\"create\" /&gt; &lt;permission type=\"attribute\" name=\"user.authinfo\" actions=\"get\" /&gt; &lt;permission type=\"java.util.PropertyPermission\" name=\"*\" actions=\"read,write\" /&gt;  &lt;permission type=\"persist\" name=\"content\" actions=\"persist\" /&gt; &lt;permission type=\"persist\" name=\"course\" actions=\"create,modify,delete\" /&gt;  &lt;permission type=\"persist\" name=\"user\" actions=\"create,modify,delete\" /&gt; &lt;permission type=\"persist\" name=\"userrole\" actions=\"create,modify,delete\" /&gt; &lt;permission type=\"persist\" name=\"coursemembership\" actions=\"persist,create,modify,delete\" /&gt;              &lt;permission type=\"persist\" name=\"enrollment\" actions=\"persist,create,modify,delete\" /&gt; &lt;permission type=\"attribute\" name=\"enrollment.rowstatus\" actions=\"get,set\" /&gt;              &lt;!-- Minimum permissions to support Spring --&gt; &lt;permission type=\"java.lang.reflect.ReflectPermission\" name=\"suppressAccessChecks\" /&gt; &lt;permission type=\"java.lang.RuntimePermission\" name=\"accessDeclaredMembers\" /&gt; &lt;permission type=\"java.lang.RuntimePermission\" name=\"createClassLoader\" /&gt; &lt;permission type=\"java.lang.RuntimePermission\" name=\"setContextClassLoader\" /&gt;              &lt;!--  For logback logging --&gt; &lt;permission type=\"java.io.FilePermission\" name=\"${java.home}/lib/*\" actions=\"read\" /&gt; &lt;permission type=\"java.io.FilePermission\" name=\"BB_HOME/logs/-\" actions=\"read,write\" /&gt;",
    "tags": "Learn b2",
    "url": "/learn/b2/advanced/java-permissions.html"
  },{
    "title": "Java 11 for Learn: FAQ",
    "text": "Java 11 for Learn: FAQ To address recent changes in Oracle’s Java support model, Blackboard Learn is transitioning to adopt a more recent version of Java, Java 11 Corretto JDK. To find details regarding the targeted versions and release dates please review the latest announcement details As with prior Java version changes, it is generally expected that Building Blocks will continue to work as-is. However, Java 9 onwards has significant changes to library management and class reflection which has required numerous changes to the Learn application. To assist developers in updates to existing Building Blocks we are provided guidance through these frequently asked questions: Will EVERY Building Block (B2) be required to be recompiled with Java 11? No, not every B2 will need to be recompiled. However, most B2s are highly likely to use one or more libraries that will require an upgrade with Java 11 (Ex. Spring). In that case, a recompile is unavoidable. In scenarios where the libraries are both Java 8 and Java 11 compatible, a B2 compiled with Java 8 will continue to work with Java 11. Aren’t JDK/runtime backward compatible? Why the need to recompile? There is no need to recompile solely for the sake of runtime compatibility. The class files created by Java 8 are still executable in Java 11; however, there have been other changes in the Java runtime (library changes, etc.) that might require modification of the code. These modifications may be made in Java 8 and compiled with Java 8 making it compatible with the Java 11 runtime. Will I have to upgrade any of the jars or libraries bundled with my B2 for Java 11? All jars and libraries will require an upgrade. If the B2 libraries and jars are not compatible with the Java 11 runtime used by Blackboard Learn, an upgrade is required. For example, some parts of Spring 4.5 are not compatible with Java 11. If the B2 is dependent on Spring 4.5, an update will be required to ensure compatibility with Java 11 (Spring 5.1.x). Can I reference the 3rd party libraries or jars that are bundled with the Blackboard Learn for my B2? Blackboard strongly recommends NOT referencing 3rd party libraries and jars, because Blackboard may be required to upgrade libraries or jars bundled within Learn for various reasons including security updates. These upgrades may deprecate or eliminate certain methods or classes breaking B2 dependencies. To prevent this, Blackboard recommends that a B2 includes its own copies of dependent jars. Does installer detect JDK version (i.e. did Blackboard update to detect/require Java 11)? Yes, the Blackboard installer is updated with logic to detect the minimum version of the JDK11 runtime supported by the Blackboard Learn build place. Will B2 developers or Self Hosted system administrators need to make environment changes? Only integrations involving command line invocation will need to make environmental changes. Scenarios invoking Java from a script would need to include the argument “–add-modules=ALL-SYSTEM” to prevent potential module related errors. Depending on the client installation, there could be risk of StackOverflow due to the size of the callstack resolving class files. Tomcat can be modified via bb-config.properties setting “bbconfig.max.stacksize.tomcat”. Default minimum is 1M What is the impact of switching to Corretto 11 distribution of OpenJDK? With our AWS partnership, we have a path to ongoing support for Java that isn’t limited by the OpenJDK support timeframe and is simpler than prior support contract processes.  It will be fully supported by Amazon including distribution of security patches until at least August 2024 whereas the open source OpenJDK will stop receiving security patches after the 6-month release windows from the next major JDK release. It has been fully tested by AWS to ensure compatibility with the Oracle Java platform. It has been designed as a full drop-in replacement for all Java SE distributions. There should be very minimal impact in switching to Corretto distribution beyond installing the Corretto binaries on the server platform and making sure all applications are updated to include the path to the correct binary in their startup or launch scripts. Amazon uses Corretto internally which means added benefits from testing on thousands of Amazon services.  Issues found internally at Amazon should be fixed and released within days. How can I avoid having to do frequent testing and recompiling of Building Blocks? As noted above, including copies of dependent libraries in the Building Block rather than referencing them in the Learn application will help. To avoid the overhead of maintaining Building Blocks through these frequent library changes, we encourage you to also consider our ever-expanding support for LTI and REST APIs to determine when it would appropriate for you to transition your solution to these integration frameworks that aren’t impacted by library changes. The LTI/REST framework has the added benefit of being supported across all Learn deployments and UX options enabling your integration to also be Ultra ready.",
    "tags": "Learn b2",
    "url": "/learn/b2/resources/java11-faq.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/learn.html"
  },{
    "title": "LTI Events",
    "text": "LTI Events Blackboard Learn’s Caliper Analytics stream emits an LTIEvent when any user: Clicks an LTI link Returns from an LTI link Here is some of the key data that is associated with these events: LTIEvent actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user object.launchUrl - URL of the LTI Provider object.launchParameters - name/value pairs passed group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) action - LoggedIn, LoggedOut Sample Payload { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/LTIEvent\", \"id\": \"6b495fe6-cdd9-459a-aa1f-39e4979b87f5\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_1_1\", \"bb:user.externalId\": \"administrator\" } }, \"action\": \"LoggedIn\", \"object\": { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/LTILaunchInfo\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/ltiLaunches/d0b8a363-7484-4ee6-b458-0f0e0ce5f05f\", \"name\": \"\", \"description\": \"\", \"launchUrl\": \"https://ltiah.herokuapp.com/launch_lti\", \"launchParameters\": { \"tool_consumer_instance_contact_email\": \"admin@support-ultra-test.blackboard.com\", \"tool_consumer_info_product_family_code\": \"BlackboardLearn\", \"oauth_signature_method\": \"HMAC-SHA1\", \"tool_consumer_info_version\": \"3900.4.0-rel.14+d8ea606\", \"oauth_signature\": \"PEPikqcsphXcnKe/WQajV2VDNcQ=\", \"launch_presentation_document_target\": \"window\", \"lti_message_type\": \"basic-lti-launch-request\", \"custom_caliper_profile_url\": \"https://support-ultra-test.blackboard.com/learn/api/v1/telemetry/caliper/profile/ultra\", \"ext_launch_id\": \"d0b8a363-7484-4ee6-b458-0f0e0ce5f05f\", \"lis_person_sourcedid\": \"administrator\", \"ext_lms\": \"bb-3900.4.0-rel.14+d8ea606\", \"lis_person_name_family\": \"Administrator\", \"custom_caliper_federated_session_id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/sessions/0356052DAA966AA071787F54DBFEB1B1\", \"lis_person_name_full\": \"Blackboard Administrator\", \"context_label\": \"Ultra Ltiah_herokuapp_placement\", \"oauth_consumer_key\": \"mykeyagain\", \"user_id\": \"ffc08009f0884c059192bac549e117b2\", \"launch_presentation_return_url\": \"https://support-ultra-test.blackboard.com/webapps/blackboard/execute/blti/launchReturn?launch_id=d0b8a363-7484-4ee6-b458-0f0e0ce5f05f&amp;link_id=ultra&amp;launch_time=1608831491592\", \"oauth_version\": \"1.0\", \"resource_link_id\": \"ultra\", \"custom_tc_profile_url\": \"https://support-ultra-test.blackboard.com/learn/api/v1/lti/profile?lti_version=LTI-1p0\", \"oauth_callback\": \"about:blank\", \"lis_person_contact_email_primary\": \"noreply@blackboard.com\", \"roles\": \"urn:lti:sysrole:ims/lis/Administrator\", \"tool_consumer_instance_name\": \"Blackboard, Inc.\", \"launch_presentation_locale\": \"en-US\", \"context_title\": \"Ultra Ltiah_herokuapp_placement\", \"tool_consumer_instance_guid\": \"82ef1947e5974e559156e8a6c8c2ea79\", \"lis_person_name_given\": \"Blackboard\", \"oauth_timestamp\": \"1608831491\", \"lti_version\": \"LTI-1p0\", \"ext_launch_presentation_css_url\": \"https://support-ultra-test.blackboard.com/common/shared.css,https://support-ultra-test.blackboard.com/themes/as_2015/theme.css\", \"context_id\": \"_41_1\", \"oauth_nonce\": \"171815513849839\", \"tool_consumer_instance_description\": \"Blackboard, Inc.\" }, \"customParameters\": {}, \"extensions\": {} }, \"eventTime\": \"2020-12-24T17:38:11.660Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/applications/learn\", \"type\": \"SoftwareApplication\", \"extensions\": { \"bb:request.headers.ipAddress\": \"186.28.208.123\" } }, \"federatedSession\": { \"startedAtTime\": \"2020-12-24T17:38:11.660Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/sessions/0356052DAA966AA071787F54DBFEB1B1\", \"type\": \"LtiSession\", \"name\": \"0356052DAA966AA071787F54DBFEB1B1\", \"dateCreated\": \"2020-12-24T17:38:11.660Z\", \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_1_1\", \"bb:user.externalId\": \"administrator\" } } }, \"extensions\": {}, \"session\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/sessions/0356052DAA966AA071787F54DBFEB1B1\", \"type\": \"Session\" } }",
    "tags": "Standards",
    "url": "/standards/caliper/events/lti-events.html"
  },{
    "title": "Migrate an LTI Tool to UEF",
    "text": "Tutorial: Migrate a Python LTI Tool to Ultra Extension In this tutorial, we will be taking a basic Hello World LTI tool, and through various steps, create an Ultra Extension Framework integration, that opens a panel when a particular content item is clicked, and provides a button that allows the user to communicate back to Ultra to request that the panel be closed. We will be using Python 3 and Flask for this exercise, but most of the work is done in Javascript that can be used with any language. To get started, you will need to have Python installed, and you will need to clone the tutorial repository. git clone https://github.com/blackboard/BBDN-UEF-Python.git There are 5 branches: Master: The base LTI tool 1-LTI-TO-UEF: This is the installation of the plumbing that allows you to begin your UEF integration 2-UEF-MESSAGECHANNEL: In this branch, we implement all of the javascript we need to create a message channel for your application and Ultra to begin talking 3-UEF-PANEL: This code implements the panel functionality 4-UEF-LOCALSTORAGE: Implement localStorage to allow your embedded Javascript to pass information from Ultra to the rest of your application and vice versa We will use Docker and ngrok for this demonstration. This allows us to run an LTI tool from our local desktop without the requirement of deploying to an internet-accessible service. This is also a great way to build and test your own applications. If you prefer to watch videos, each step below has a video. You can also view the entire Ultra Extension Framework - YouTube Tutorial Series. Preparing the development environment This section will help you set up your development environment and ensure that you are ready to participate in this tutorial. Step 1: Install ngrok.io We will need a way to host our UEF integration on our desktop so we don’t have to deploy to a third party server every time. Ngrok makes this extremely easy. You will need to follow these steps. Below is a video to help with the process. Go to https://ngrok.io Sign up for a free account if you don’t already have one and login Download the installer for your system https://ngrok.com/download Visit https://dashboard.ngrok.com/get-started/setup and copy your authtoken If on Mac, expand ngrok into your applications folder and add the application folder to your path. If on Windows, expand, create a folder to put ngrok.exe in, and add that folder to your windows Path system variable. In a terminal cd to your ngrok directory and enter $ ngrok authtoken &lt;your authtoken&gt; Start a tunnel on port (5000): $ ./ngrok http 5000 --hostname uef.ngrok.io NOTE: Do not close your terminal - it must stay open while you are using the TLS connection. Step 2: Register your LTI Application in the Developer Portal The next step is to register our application. Notice that we don’t have any code yet. But we do know what our endpoints will be, and the developer portal doesn’t really care about your code. It is simply a centralized repository that allows you to register your application once and deploy to any Learn instance. We are the only LMS that provides this centralized registration process. Browse to the developer portal If you do not have an account, register for one. The password restrictions are crazy, so be sure to read them before creating your password to save yourself some time and frustration. Login to your account Under My Apps, click the + icon to create a new application. Give your application a name Give your application a description Under domain, simply add uef.ngrok.io. If you are using the shared system, we will provide shared credentials, as the system will not allow you to create multiple providers with the same domain. Click the toggle to expand the LTI 1.3 fields Leave the group as is For the Login Initiation URL, enter https://uef.ngrok.io/login/. Note the trailing slash. This is required by Flask. For the Tool Redirect URL, enter https://uef.ngrok.io/launch/. Note the trailing slash. This is required by Flask. Leave the Tool JWKS URL field blank Leave the signing algorithm as is Click ‘Register application and generate API Key’ NOTE Leave this page open for the duration of this tutorial or save the information in a text file. Once you leave this screen, you will not be able to retrieve the private key or the application secret. Step 3: Clone the repository The next step is to clone the repository. You do not need a github account for this. Navigate to https://github.com/blackboard/BBDN-UEF-Python, click the green code button, and copy the URL. Open a terminal and navigate to the directory you wish to place the project in. At the command-line, type: git clone https://github.com/blackboard/BBDN-UEF-Python.git Open this project in your favorite IDE In the app directory, there is a file called ConfigTemplate.py. Copy this file and paste it into the app directory. Rename it to Config.py. This IS case-sensitive. Replace learnURL with the URL to your Learn instance, without the https:// Replace restKey with your REST application key. Replace restSecret with your REST application secret. Replace myUrl with the https ngrok link created in step 1. Include the https:// Save the file In the app directory, there is a file called lti-template.json. Copy this file and paste it into the app directory. Rename it to lti.json. This IS case-sensitive. Replace both instances of clientId with your application ID. Save the file. In the app directory, create a new file called private.key. This IS case-sensitive. Paste the private key from the developer portal. Create a directory outside of your project, and copy these three files and paste them there to prevent accidental loss of these files so you don’t have to recreate them later. Step 4: Configure your Learn environment Now that we have our registration complete, and our application mostly configured, we need to deploy our application to Learn. Again, if you are using the shared system, we will have already done this for you. That information will be displayed at the bottom of this document. Login to Learn with Admin credentials Open the Admin panel Click on LTI Tool Providers Click on Register LTI 1.3 Tool Paste your application ID and click submit From the resulting screen, change the radio button from Exclude to Approve. Copy your deployment Id. In your IDE, open the lti.json file, and replace deploymentId with this value and save the file Back in Learn, click submit. From the context menu next to your application, select Manage Placements On the Manage Placements screen, click create placement Give the placement a label. This is how your tool will be referenced in the user interface. Provide a handle. This must be unique across this Learn instance. Ensure Availability is set to Yes If you wish, you can add an icon file. This should be 50x50 and a PNG or JPG. In the Tool Provider URL field, enter https://uef.ngrok.io/launch/. Be sure to include the trailing slash. This is required by Flask. Click submit. Return to the System Admin panel. Click REST API Integrations Click Create Integration Paste your application ID in the application ID field Assign a user. Because we are using three-legged oauth, the user you assign does not have to have any specific entitlements. Ensure End User Access is set to Yes. This allows the use of three-legged oauth Set Authorized to Act as User to Yes. In normal circumstances, we would leave this as Service Default. For UEF, the user won’t be able to authorize the application, so we are preemptively disabling this requirement. Click Submit. Step 5: Install Docker Desktop For ease of use, we will be using Docker. This will create the environment for us the same way every time, allowing us to focus on the code. It is Python code, so you can use ngrok and run directly on your machine, or you can push the code to a cloud repository, but in this tutorial, we will assume that you are using Docker. Install Docker Desktop Note: If you are installing Docker Desktop on Windows 10, you will need to be sure Virtualization is configured correctly. This article will help you get things configured correctly. Of note are that virtualization must be enabled in your bios, and with Windows Linux System 2, you must install the linux kernel manually. Step 6: Test the application Get the deployment ID from Learn Add the deployment id to the lti.json file in your project and save it. Open a terminal, cd to the directory where you cloned the application, and type: docker build -t uef-tutorial:0.1 .. Note the period at the end. This creates your image. Now let’s run it. From the terminal, type: docker run -p 5000:5000 --name UEFTutorial uef-tutorial:0.1 Open your Docker Desktop Dashboard to inspect that the UEFTutorial app is running Browse to https URL provided by ngrok and you should see a message that the application is running. Now open Learn, navigate to a course. In the course outline, click the + icon and select content market. Find the placement we created, and click the + icon to add it to your course outline. Click the new content item. You should see your hello world message. Troubleshooting If for some reason you get an error loading the site there are a few things to check: Ensure the tool is properly installed in Learn If you see an error similar to the one below - check your Dockerfile syntax - especially those gnarly double and single quotes: ERROR: yaml.parser.ParserError: while parsing a block mapping in \"./docker-compose.yaml\", line 14, column 1 expected &lt;block end&gt;, but found '&lt;scalar&gt;' in \"./Dockerfile\", line 16, column 34 If you need to re-deploy, open docker desktop’s dashboard, and click the garbage bin icon to delete the image, and then run the build and run docker commands again. Let’s Code Now that we have our development environment set up and configured, its time to get to work! A couple of notes to help you navigate this tutorial. Each step has a branch. You can use git checkout -b to get the code for that branch. Don’t forget to update the contentId in steps 3 and 4 to point to your content item. Step 1: Build a UEF shell In the first step, we will make a few minor changes to our LTI tool the create an Ultra Extension Framework shell running in our Learn instance! Step 2: Set up communication Next we will add to our javascript file to set up a message channel between our iframe and the Ultra UI, authorize the application using our REST Bearer Token, and subscribe to the events we want Ultra to notify us of. Step 3: Create a peek panel Now we have a functioning Ultra Extension running, so let’s do something with it. In this case, we are going to create a content item, and then listen for a user to enter a course and click on that item. When the item loads, we will open a peek panel. Remember our Hello World that we started with in our LTI tool? Well now we are displaying that same hello world in a peek panel inside of Ultra! Don’t forget to change the contentId in the code to point to your content item. Step 4: Implement localStorage Cool, right? But let’s put the finishing touches on this thing. We might need data in the rest of our application that only our javascript file has. We also might need a way for the rest of our application to talk to Ultra. Enter localStorage. Local Storage is a way to store things in memory that is accessible in your browser. Since all of our components are running in the same browser, we can use this to pass information around. In our example, we will take data from the message that Ultra sends us, pass it to our app, and display it in our hello world app. In addition, we will add a button to our hello world page that sends a message to our javascript file, asking Ultra to close the panel for us. Don’t forget to change the contentId in the code to point to your content item. Summary I hope you found that fun and enlightening. As always, if you have questions, comments, or concerns, reach out to us at developers@blackboard.com and let us know! -Happy Coding",
    "tags": "Learn UEF",
    "url": "/learn/uef/lti-to-uef-tutorial.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/lti.html"
  },{
    "title": "Merge and Corsslist courses",
    "text": "Use APIs to Merge and Cross-list Courses Overview Your institution often needs to manage many courses or sections together. The mechanism that Blackboard Learn provides for doing this is referred to as course merging or cross-listing. Merged and cross-listed courses are, under the hood, the same thing: two or more courses in a parent-child relationship. A course set is a parent course together with all its child courses. In physical terms, these students might have different courses listed on their schedules. If their courses are merged in Learn, their schedules show the time and place as determined by the registrar and they receive instruction from the same instructor(s). All students in the child courses have access to the same online content. Blackboard Learn synchronizes enrollments in child courses with their parent course. Users enrolled in a child course thus have access to the content of the parent course. Likewise, when you use management tools in a parent course, you will also affect users enrolled in its children courses. Blackboard Learn preserves user roles from the last time a user is enrolled into any of the courses in the course set. A student can only exist in one course in a course set; Learn ignores duplicate enrollments. Users with administrative entitlements can merge courses. Before you begin You need an authentication token from a user with administrative entitlements to merge courses. For a complete list of specific requirements for any particular method, see the Blackboard Learn API reference. Merge a course To merge one course as a child of another: Find the courseId of the course that you want to be the parent. Find the courseId of the course you want to be the child. Make a PUT request to /learn/api/public/v1/courses/{courseId}/children/{childCourseId}. Get the children of a course To identify the children courses of a course: Find the courseId of the parent course. Make a GET request to /learn/api/public/v1/courses/{courseId}/children. Get the course set that a course belongs to To get a list of all the courses merged with a particular course, regardless of which are children and which is the parent, make a GET request to /learn/api/public/v1/courses/{courseId}/crossListSet.",
    "tags": "Learn Rest",
    "url": "/learn/rest/advanced/merge-and-crosslist-courses.html"
  },{
    "title": "Caliper Metric Profiles",
    "text": "Caliper Metric Profiles Caliper Metric Profiles provide a basic, consistent format for emitting and consuming learning events regardless of the Learning Management System or Educational Tool. These profiles leverage other IMS Global standards like LTI in order to mesh interoperable tools and interoperable event data to allow for the use of common tools across platforms with the added ability to analyze the usage of that tool for all students regardless of the environment that student originates from. We also have documentation on the specific events sent by Blackboard Learn, The metric profiles are realized in the form of JSON for Linked Data (JSON-LD) payloads containing a set of common objects, each with the ability to add application-specific extended data objects. The profile defines a context for the data and establishes the relationships between entities to define the event and all of its supporting data. The specification defines these payloads in such a way to allow for transport-compliant custom events like the Blackboard Learn-specific ForumEvent, allowing any event store to be able to accept and interpret these events, even if they are strictly defined in the specification itself. The overarching goal of these profiles is to encapsulate events and context in a shared semantic model so there is consistency from event to event. Blackboard Learn supports the following defined metric profiles: Session Assessment Assignable Grade The specification defines a number of tool-specific profiles as well. An example of this is the MediaEvent, which Blackboard worked closely with Kaltura to implement in the context of the Kaltura LTI integration. JSON Syntax A Caliper event is essentially a large JSON document, built in a defined format, containing a specific set of data. The top level of this document contains 9 defined objects and two Linked Data elements to illustrate what data is expected. Objects Object Description @context Defines the short-hand names used throughout the Caliper event. type Defines the type of event being sent. actor The entity performing the event. action What the actor actually did. object What the action was performed on. target An entity that represents a particular segment or location within the object. generated The result of the action. eventTime The ISO-compliant date and time that the event happened. edApp The application reporting the event. group The environment that the event took place in, e.g. a course. Can be nested. membership Information about the relationship between the actor and the group. federatedSession A unique identifier used to determine what system/tool is reporting data. If the event occurs within the context of an LTI Tool Launch, the actor’s tool consumer LtiSession may be referenced. session The user’s current session Sample Caliper Event { \"sensor\":\"a118bba8-5378-4533-899b-8862ac59db03\", \"sendTime\":\"2020-12-24T17:38:16.580Z\",\"dataVersion\":\"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"data\":[ { \"@context\":\"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"type\":\"SessionEvent\", \"id\":\"53d8542f-c4ff-4100-b2a4-1f8e035f0439\", \"actor\": { \"id\":\"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2\", \"type\":\"Person\", \"extensions\":{ \"bb:user.id\":\"_1_1\", \"bb:user.externalId\":\"administrator\" } }, \"action\":\"LoggedIn\", \"object\":{ \"id\":\"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/applications/learn\", \"type\":\"SoftwareApplication\", \"extensions\":{ \"bb:request.headers.agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\", \"bb:request.headers.ipAddress\":\"186.28.208.123\" } }, \"target\":{ \"id\":\"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03\", \"type\":\"DigitalResource\", \"creators\":[], \"learningObjectives\":[], \"keywords\":[] }, \"eventTime\":\"2020-12-24T17:38:09.076Z\", \"edApp\":{ \"id\":\"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/applications/learn\", \"type\":\"SoftwareApplication\", \"extensions\":{ \"bb:request.headers.agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\", \"bb:request.headers.ipAddress\":\"186.28.208.123\" } }, \"federatedSession\":{ \"startedAtTime\":\"2020-12-24T17:38:09.076Z\", \"id\":\"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/sessions/0356052DAA966AA071787F54DBFEB1B1\", \"type\":\"LtiSession\", \"name\":\"0356052DAA966AA071787F54DBFEB1B1\", \"dateCreated\":\"2020-12-24T17:38:09.076Z\", \"extensions\":{ \"bb:request.headers.agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\" }, \"user\":{ \"id\":\"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2\", \"type\":\"Person\", \"extensions\":{ \"bb:user.id\":\"_1_1\", \"bb:user.externalId\":\"administrator\" } } }, \"extensions\":{} } ] } Caliper Event Envelopes As one might imagine, there can be a huge amount of events being triggered and reported at any given time, and so the Caliper specification includes the concept of an event envelope. This envelope contains three entities: sensor - The sensor is the library creating and sending the events. sendTime - This is the ISO-compliant date and time the envelope was sent. data - an array containing one or more Caliper events.",
    "tags": "Standards",
    "url": "/standards/caliper/getting-started/metric-profiles.html"
  },{
    "title": "LTI Advantage - Names and Roles",
    "text": "LTI Advantage - Names and Roles Overview This document documents gives updates on Names and Roles as new features become available. For the definitive specifications, always refer to the published IMS documenation. Student Preview User Now Indicated By TestUser Role via Names and Roles Service This new functionality is seen in the Names and Roles service as implemented in Blackboard Learn. When your LTI 1.3 tool reaches back to Blackboard Learn using the Names and Roles service to get a list of memberships, a Student Preview user listed in the course memberships will have a new role listed in the roles claim. Ex \"https://purl.imsglobal.org/spec/lti/claim/roles\": [ \"http://purl.imsglobal.org/vocab/lti/system/person#TestUser\" ], As of this writing, 2020.04.07, this addition to the Names and Roles service has not yet been added to the IMS Names and Role Provisioning Services documentation. It will likely be added as an addendum soon.",
    "tags": "Standards",
    "url": "/standards/lti/tutorials/names-and-roles.html"
  },{
    "title": "PHP Demo",
    "text": "Demo using PHP The rest demo script demonstrates authenticating a REST application, management and use of the authorization token, and creating, updating, discovering, and deleting supported Learn objects. Prerequisites You must register a developer account and application in the Developer Portal You must register your application in Blackboard Learn You must also configure the script as outlined in the README for the project This PHP command line Application allows you to: Authenticate Create, Read, and Update a Data Source Create, Read, and Update a Term Create, Read, and Update a Course Create, Read, and Update a User Create, Read, and Update a Membership Delete created objects in reverse order of create - membership, user, course, term, datasource. All generated output is sent to the terminal. This is not meant to be a PHP tutorial. It will not teach you to write code in PHP. It will, however, give a Developer familiar with PHP the knowledge necessary to build a Web Services integration. Assumptions This help topic assumes the Developer: is familiar with PHP has installed PHP and the HTTP_Request2 PHP Library has obtained a copy of the source code and built it in conjunction with the project README.md file. has a REST-enabled Blackboard Learn instance. Code Walkthrough To build an integration with the Blackboard REST Web Services, regardless of the programming language of choice, can really be summed up in two steps: Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the Basic Authentication document. Call the appropriate REST endpoint with the appropriate data to perform the appropriate action. Authorization and Authentication The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A request is made to the token endpoint with a Basic Authorization header containing the base64-encoded key:secret string as its key. The token service returns a JSON object containing the Access Token, the Token Type, and the number of seconds until the token expires. The token is set to expire after one hour, and subsequent calls to retrieve the token will return the same token with an updated expiry time until such time that the token has expired. There is no refresh token and currently no revoke token method. The PHP code handles this in classes/Rest.class.php: public function authorize() {        $constants = new Constants();        $token = new Token();        $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;AUTH_PATH, HTTP_Request2::METHOD_POST);        $request-&gt;setAuth($constants-&gt;KEY, $constants-&gt;SECRET, HTTP_Request2::AUTH_BASIC);        $request-&gt;setBody('grant_type=client_credentials');        $request-&gt;setHeader('Content-Type', 'application/x-www-form-urlencoded');        try {             $response = $request-&gt;send();             if (200 == $response-&gt;getStatus()) {                  print \" Authorize Application...\\n\";                  $token = json_decode($response-&gt;getBody());             } else {                  print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .                       $response-&gt;getReasonPhrase();                  $BbRestException = json_decode($response-&gt;getBody());                  var_dump($BbRestException);                 }        } catch (HTTP_Request2_Exception $e) {             print 'Error: ' . $e-&gt;getMessage();        }        return $token;   } The JSON response is serialized into the Token object, and you may then retrieve those values from that object. Calling Services The individual service calls are handled by the classes/Rest.class.php file. Each operation and object combination has its own method. Each of these methods creates the JSON body by instantiating the appropriate model from the classes directory when necessary, and then generates the appropriate HTTP Request, ships it to Learn, and serializes the JSON response back into the appropriate model. End points are generally defined as /learn/api/public/v1/&lt;objecttype&gt;/&lt;objectId&gt;. Object ID can be either the pk1, like _1_1, or as the batchuid. This value should be prepended by externalId:, like externalId:test101. For example, to retrieve a course by the pk1 _1_1, you would call GET /learn/api/public/v1/courses/_1_1. To retrieve by the batchuid test101, you would call GET /learn/api/public/v1/courses/externalId:test101. Create is sent to Learn as a HTTP POST message with a JSON body that defines the object. The endpoint should omit the objectId, as this will be generated on creation. Read is sent to Learn as a HTTP GET message with an empty body. The endpoint should include the objectId being retrieved. Update is sent to Learn as a HTTP PATCH message with a JSON body that defines the object. The endpoint should include the objectId being updated. Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint should include the objectId being deleted. Datasources Datasources are handled in classes/Rest.class.php. Create public function createDatasource($access_token) {   $constants = new Constants();   $datasource = new Datasource();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;DSK_PATH, HTTP_Request2::METHOD_POST);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   $request-&gt;setBody(json_encode($datasource));   try {   $response = $request-&gt;send();   if (201 == $response-&gt;getStatus()) {   print \"\\n Create Datasource...\\n\";   $datasource = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $datasource; } Read public function readDatasource($access_token, $dsk_id) {   $constants = new Constants();   $datasource = new Datasource();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;DSK_PATH . '/' . $dsk_id, HTTP_Request2::METHOD_GET);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   try {   $response = $request-&gt;send();   if (200 == $response-&gt;getStatus()) {   print \"\\n Read Datasource...\\n\";   $datasource = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException) }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $datasource; } Update public function updateDatasource($access_token, $dsk_id) {   $constants = new Constants();   $datasource = new Datasource();   $datasource-&gt;id = $dsk_id;   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;DSK_PATH . '/' . $dsk_id, 'PATCH');   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   $request-&gt;setBody(json_encode($datasource));   try {   $response = $request-&gt;send();   if (200 == $response-&gt;getStatus()) {   print \"\\n Update Datasource...\\n\";   $datasource = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $datasource; } Delete public function deleteDatasource($access_token, $dsk_id) {   $constants = new Constants();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;DSK_PATH . '/' . $dsk_id, HTTP_Request2::METHOD_DELETE);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   try {   $response = $request-&gt;send();   if (204 == $response-&gt;getStatus()) {   print \"Datasource Deleted\";   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   return FALSE;   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   return FALSE;   }   return TRUE; } Terms Terms are handled in classes/Rest.class.php. Create public function createTerm($access_token, $dsk_id) {   $constants = new Constants();   $term = new Term();   $term-&gt;dataSourceId = $dsk_id;   $term-&gt;availability = new Availability();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;TERM_PATH, HTTP_Request2::METHOD_POST);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   $request-&gt;setBody(json_encode($term));   try {   $response = $request-&gt;send();   if (201 == $response-&gt;getStatus()) {   print \"\\n Create Term...\\n\";   $term = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $term; } Read public function readTerm($access_token, $term_id) {   $constants = new Constants();   $term = new Term();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;TERM_PATH . '/' . $term_id, HTTP_Request2::METHOD_GET);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   try {   $response = $request-&gt;send();   if (200 == $response-&gt;getStatus()) {   print \"\\n Read Term...\\n\";   $datasource = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $term; } Update public function updateTerm($access_token, $dsk_id, $term_id) {   $constants = new Constants();   $term = new Term();   $term-&gt;id = $term_id;   $term-&gt;dataSourceId = $dsk_id;   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;TERM_PATH . '/' . $term_id, 'PATCH');   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   $request-&gt;setBody(json_encode($term));   try {   $response = $request-&gt;send();   if (200 == $response-&gt;getStatus()) {   print \"\\n Update Term...\\n\";   $datasource = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $term; } Delete public function deleteTerm($access_token, $term_id) {   $constants = new Constants();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;TERM_PATH . '/' . $term_id, HTTP_Request2::METHOD_DELETE);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   try {   $response = $request-&gt;send();   if (204 == $response-&gt;getStatus()) {   print \"Term Deleted\";   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   return FALSE;   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   return FALSE;   }   return TRUE; } Course Courses are handled in classes/Rest.class.php. Create public function createCourse($access_token, $dsk_id, $term_id) {   $constants = new Constants();   $course = new Course();   $course-&gt;dataSourceId = $dsk_id;   $course-&gt;termId = $term_id;   $course-&gt;availability = new Availability();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH, HTTP_Request2::METHOD_POST);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   $request-&gt;setBody(json_encode($course));   try {   $response = $request-&gt;send();   if (201 == $response-&gt;getStatus()) {   print \"\\n Create Course...\\n\";   $course = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $course; } Read public function readCourse($access_token, $course_id) {   $constants = new Constants();   $course = new Course();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id, HTTP_Request2::METHOD_GET);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   try {   $response = $request-&gt;send();   if (200 == $response-&gt;getStatus()) {   print \"\\n Read Course...\\n\";   $course = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $course; } Update public function updateCourse($access_token, $dsk_id, $course_id, $course_uuid, $course_created) {   $constants = new Constants();   $course = new Course();   $course-&gt;id = $course_id;   $course-&gt;uuid = $course_uuid;   $course-&gt;created = $course_created;   $course-&gt;dataSourceId = $dsk_id;   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id, 'PATCH');   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   $request-&gt;setBody(json_encode($course));   try {   $response = $request-&gt;send();   if (200 == $response-&gt;getStatus()) {   print \"\\n Update Course...\\n\";   $course = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $course; } Delete public function deleteCourse($access_token, $course_id) {   $constants = new Constants();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id, HTTP_Request2::METHOD_DELETE);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   try {   $response = $request-&gt;send();   if (204 == $response-&gt;getStatus()) {   print \"Course Deleted\";   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   return FALSE;   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   return FALSE;   }   return TRUE; } Users Users are handled in classes/Rest.class.php. Create public function createUser($access_token, $dsk_id) {   $constants = new Constants();   $user = new User();   $user-&gt;dataSourceId = $dsk_id;   $user-&gt;availability = new Availability();   $user-&gt;name = new Name();   $user-&gt;contact = new Contact();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;USER_PATH, HTTP_Request2::METHOD_POST);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   $request-&gt;setBody(json_encode($user));   try {   $response = $request-&gt;send();   if (201 == $response-&gt;getStatus()) {   print \"\\n Create User...\\n\";   $user = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $user; } Read public function readUser($access_token, $user_id) {   $constants = new Constants();   $user = new User();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;USER_PATH . '/' . $user_id, HTTP_Request2::METHOD_GET);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   try {   $response = $request-&gt;send();   if (200 == $response-&gt;getStatus()) {   print \"\\n Read User...\\n\";   $user = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $user; } Update public function updateUser($access_token, $dsk_id, $user_id, $user_uuid, $user_created) {   $constants = new Constants();   $user = new User();   $user-&gt;id = $user_id;   $user-&gt;uuid = $user_uuid;   $user-&gt;created = $user_created;   $user-&gt;dataSourceId = $dsk_id;   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;USER_PATH . '/' . $user_id, 'PATCH');   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   $request-&gt;setBody(json_encode($user));   try {   $response = $request-&gt;send();   if (200 == $response-&gt;getStatus()) {   print \"\\n Update User...\\n\";   $user = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $user; } Delete public function deleteUser($access_token, $user_id) {   $constants = new Constants();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;USER_PATH . '/' . $user_id, HTTP_Request2::METHOD_DELETE);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   try {   $response = $request-&gt;send();   if (204 == $response-&gt;getStatus()) {   print \"User Deleted\";   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   return FALSE;   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   return FALSE;   }   return TRUE; } Memberships Memberships are handled in classes/Rest.class.php. Create public function createMembership($access_token, $dsk_id, $course_id, $user_id) {   $constants = new Constants();   $membership = new Membership();   $membership-&gt;dataSourceId = $dsk_id;   $membership-&gt;availability = new Availability();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id . '/users/' . $user_id, HTTP_Request2::METHOD_PUT);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   $request-&gt;setBody(json_encode($membership));   try {   $response = $request-&gt;send();   if (201 == $response-&gt;getStatus()) {   print \"\\n Create Membership...\\n\";   $membership = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $membership; } Read public function readMembership($access_token, $course_id, $user_id) {   $constants = new Constants();   $membership = new Membership();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id . '/users/' . $user_id,  HTTP_Request2::METHOD_GET);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   try {   $response = $request-&gt;send();   if (200 == $response-&gt;getStatus()) {   print \"\\n Read Membership...\\n\";   $membership = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $membership; } Update public function updateMembership($access_token, $dsk_id, $course_id, $user_id, $membership_created) {   $constants = new Constants();   $membership = new Membership();   $membership-&gt;dataSourceId = $dsk_id;   $membership-&gt;userId = $user_id;   $membership-&gt;courseId = $course_id;   $membership-&gt;created = $membership_created;   $membership-&gt;availability = new Availability();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id . '/users/' . $user_id, 'PATCH');   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   $request-&gt;setBody(json_encode($membership));   try {   $response = $request-&gt;send();   if (200 == $response-&gt;getStatus()) {   print \"\\n Update Membership...\\n\";   $membership = json_decode($response-&gt;getBody());   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   }   return $membership; } Delete public function deleteMembership($access_token, $course_id, $user_id) {   $constants = new Constants();   $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id . '/users/' . $user_id, HTTP_Request2::METHOD_DELETE);   $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token);   $request-&gt;setHeader('Content-Type', 'application/json');   try {   $response = $request-&gt;send();   if (204 == $response-&gt;getStatus()) {   print \"Membership Deleted\";   } else {   print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' .  $response-&gt;getReasonPhrase();   $BbRestException = json_decode($response-&gt;getBody());   var_dump($BbRestException);   return FALSE;   }   } catch (HTTP_Request2_Exception $e) {   print 'Error: ' . $e-&gt;getMessage();   return FALSE;   }   return TRUE; } Conclusion All of the code snippets included in this document at included in a sample REST Demo PHP application available on GitHub. There is a README.html included that talks more specifically about building and running the code. Feel free to review the code and run it against a test or development Learn instance to see how it works.",
    "tags": "Learn Rest",
    "url": "/learn/rest/examples/php-demo.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/plugins.html"
  },{
    "title": "POST /sessions",
    "text": "POST /sessions Description This is the schema definition for POST /sessions, generated dynamically from the swagger.yml file. Query Parameters None Request NameTypeDescription&nbsp; sessionName string loginGroupName string startTime string &#60;date-time&#62; endTime string &#60;date-time&#62; accessTime string &#60;date-time&#62; reconnectUrl string &#60;url&#62; returnUrl string &#60;url&#62; telephonyEnabled boolean breakoutRoomEnabled boolean courseRoomEnabled boolean sessionCategory string Values: default course master soap occurrenceType string Values: S P nextOccurrence string &#60;date-time&#62; lastOccurrence string &#60;date-time&#62; maxSessionSize integer &#60;int32&#62; largeSessionEnabled boolean launchComponent string Values: sas cla_flexgen cla_cloud cla_testing ops_check cla_flexgen_only bpdsSupported boolean messagingStreamEnabled boolean persistentPinsEnabled boolean Response CodeReturns default default response Examples Click on the buttons inside the tabbed menu: cURL Python C# cURL curl bah blah blah Python if python == True: print(\"Woohoo!\") C# if(C#) { print(\":)\"); }",
    "tags": "Collaborate",
    "url": "/collaborate/api-reference/sessions/post-session.html"
  },{
    "title": "8 Steps to prepare for Java 11",
    "text": "8 Steps to prepare for Java 11 (Updated March 2020 to remove SaaS release references since that is in the past. Updated 23 January 2020: clarification of Building Block updates at time of Learn upgrade; timeline and availability updates.) Throughout 2019 we communicated that we planned to update your Blackboard Learn environment to Java 11. This important update can impact custom and third-party add-on tools leveraging the Building Blocks (B2) integration framework. This update was deployed into SaaS production environments in February 2020. For Self- and Managed Hosting clients, 9.1 Q4 2019 which includes Java 11 support was released December 2019. As you know, Java are the libraries on which the Learn application runs and also the libraries that power Building Blocks, the add-on tools and features you may use in your environment. This update to Java 11 improves security and performance. Staying on recently updated libraries is crucial to staying ahead of those who may try to compromise your learning environment. Our testing shows that numerous Building Blocks in use today will no longer be compatible with Java 11. Without action, these Building Blocks may stop working in your environment. Self- and Managed Hosting clients will need to plan for this change as part of an upgrade to 9.1 Q4 2019 and newer. Learn SaaS: Deployed in February 2020. Learn 9.1 for Self- and Managed Hosting: 9.1 Q4 2019 is available now on Behind the Blackboard. What you should do to prepare for this change: Clean up. You should inactivate or remove Building Blocks (B2s) from your environments you no longer use or support. If the tool contains data you may need to retain for data retention purposes, you should make it inactive; if you know you no longer have any need for the B2 it can be removed. Depending on how long you’ve been using Blackboard Learn, you may have B2s from older versions of Learn that are no longer used nor supported. We encourage removing these B2s. Take inventory and collect updated Building Block installers. Review the non-Blackboard B2s in your environment and take note of version numbers. Plan to collect the latest B2s for third-party extensions. Self- and Managed Hosting admins will follow typical upgrade planning and should plan to apply updated Building Blocks as part of a 9.1 Q4 2019 upgrade process. Admins may be able to update the Building Block prior to the upgrade if the provider indicates the Building Block is compatible with both Java 8 and Java 11 versions of Learn. Otherwise, updates can be applied after the Learn upgrade. When collecting updated Building Blocks, make sure you have the latest version of the B2 from the provider (vendor, open source, or internal). Check vendor websites or contact vendors’ support and get the latest versions of B2s from them. Confirm that the updates have been tested to be Java 11 compatible and validate in your test or stage environment. For open source Building Blocks you use, check community sources such as OSCELOT to see if updates are available. If you have B2s created by Blackboard Consulting and supported under an ICM contract, contact Blackboard Product Support for the latest version that is Java 11 compatible. Transition integrations to different integration types. Some solution providers have transitioned their integrations to other methods, such as leveraging the Learning Tools Interoperability (LTI) standard or REST APIs instead of Building Block APIs. In some cases, they may have completely different B2 integrations than the one you’re using. Working with these vendors, determine whether this is appropriate for you. Examples of these integrations requiring transition include Lynda.com and Turning Technologies. Test and update in-house Building Blocks. If you have B2s created at your institution, you should confirm their functionality in test/stage and prepare to update them. Guidance about updating Building Blocks can be found here. We’ve created an automated tool to assist with identifying potential library incompatibilities. While this tool doesn’t necessarily inform you of the functional behavior of the Building Block with Java 11, it provides guidance around library incompatibilities that could lead to a non-functional B2. See the section about the Building Block Scan Tool in the Resources section below. Test in test/stage environments. For SaaS: It is always best practice to test new Building Blocks in your test/stage environment before applying to production. For 9.1 Q4 2019: Test in your test/stage environments using the 9.1 Q4 2019 installer. Prepare for the production upgrade. Have your collected B2 installers ready to install after your production upgrade. To prevent disruption to users, you might also choose to make affected Building Blocks temporarily inactive so users don’t see error messages until the updated Building Blocks are installed. Please note that updated B2s should only be applied to production environments before the production upgrade if the provider explicitly says that version is compatible with both Java 8 and Java 11. A number of B2s aren’t compatible with both, so an update in production early could disrupt the use of that tool. Conduct post-upgrade testing. Review B2s after upgrade to validate their functionality. Report issues to the provider of the Building Block. Plan for the future. Once this change is over, we encourage you to review your B2 inventory and plan for the future. Transitioning away from library-dependent integration frameworks like Building Blocks toward more change-resilient integration frameworks like LTI and REST can help prevent this type of change management activity. If your institution develops tools and integrations for your Blackboard Learn instance, learn more about LTI and REST in our developer community. Encourage your solution providers to consider integrations based on REST APIs and the latest in standards such as LTI Advantage. Resources: Testing environments. There are numerous ways and locations where you can test the functionality of your Building Blocks. (Available Now, Self- and Managed Hosting) Learn 9.1 Q4 2019 was made available in December. Building Block Scan Tool. We’ve created an automated tool for scanning B2s and help you determine if there are likely incompatible libraries. The results of the scan will highlight potentially incompatible libraries. While this may indicate likelihood of a need to update a Building Block, it doesn’t replace testing—we’ve seen a few cases where a B2 with compatibility alerts appears to function as expected, and other instances where a B2 has a clear scan but isn’t functioning quite as expected. SaaS clients can run the utility themselves. Self- and Managed Hosting clients can access the utility as part of the 9.1 Q4 2019 release. Documentation to run the Building Block Java 11 compatibility scanner yourself Testing status for Partner Building Blocks. As we worked with partners throughout 2019 in preparing for Java 11, we were updating the status of those Building Blocks on Behind the Blackboard. This document can be used as a resource, but please note that it was no longer updated afer February 2020. Be certain to check with Building Block suppliers for the most up-to-date information. Additional background information and FAQ: General updates and answers to frequently asked questions can be found in this Behind the Blackboard article. Building Block developer resources: The developer’s community has many resources for Building Block development. Preparing a Building Block for a newer version of Learn and ensuring it works with Learn SaaS B2 development frequently asked questions",
    "tags": "Learn b2",
    "url": "/learn/b2/resources/prepare-for-java11.html"
  },{
    "title": "Preparing Your B2 for Blackboard Learn 9.1 Q2 2016",
    "text": "Preparing Your B2 for Blackboard Learn 9.1 Q2 2016 Attached is the PowerPoint deck for the 3/16/2016 Webinar recording: Preparing Your Building Block for Blackboard Learn 9.1.Q2 2016. In this Webinar we reviewed the changes in the upcoming Learn 9.1 Q2 2016 release and how to prepare your Building Block for the release. Topics covered include - Java 8, Learn Versioning, B2 Versioning, New Installer, and Development Resources. Another must-read is Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions by Scott Hurrey. The recording for the 3/22/2016 Webinar is here. During the 3/22/2016 presentation one of the participants had questions around setting the minimum and maximum version in the bb-manifest, and setting the B2 version. I’ve updated the slide deck based on that conversation and further internal conversations. The slide on B2 Versioning now states that creating 2 versions of your B2, one for SaaS and one for 9.1 is bad practice, not second-best. If you write a B2 so that it works in SaaS, it will also work in 9.1 Q2 2016 and future releases of Learn. There is no reason to create two versions. Further discussion on B2 versioning and setting the Learn minimum and maximum version # in the bb-manifest follows in the comments section below. How to set Java compatibility settings is discussed in the attached powerpoint slide deck. Regarding setting the minimum and maximum version of Learn in the bb-manifest file, and setting the version of your B2, there are many different possible scenarios. Following are a few, starting with a few simple cases, and becoming more complex. Case 0: You’ve tested v1.0 of your B2 in 9.1, SP8. You’ve set the minimum Learn version in the manifest to 9.1, SP8 accordingly. You have not set a maximum version of your B2 because as each release of Learn comes out you find that your B2 continues to work. With the release of 9.1 Q2 2016 you find that your B2 continues to work without changes, and you find that it meets all of the requirements for deployment in SaaS and works in the current Learn SaaS release. You don’t need to do anything. Case 1: As above except that you find that you need to release a new version, v2 of the B2 for the 9.1 Q2 2016 Release to run with Java 8. You also design the new v2 B2 is to work in the Learn SaaS environment. This is the best practice as it gives you only one version to maintain - and you eliminate any possibility of a B2 that doesn’t work in SaaS getting installed into a SaaS environment. Now you need to end-of-life B2 v1 by setting its maximum Learn version in the bb-mainfest to the most recent version of Learn that v1 was tested on, assume Q4 2015. With the new v2 B2 you will test, then set, the minimum Learn version in the bb-manifest to 3000.x.x (whatever we end up with in the GA release). You do not yet set a maximum because you do not know yet whether the v2 B2 will continue to work on future releases of Learn. Because Learn SaaS and Learn 9.1 will both have the same Learn version numbering scheme rolling forward, starting with this release, the minimum Learn version that you’ve specified in the bb-manifest correctly specifies the minimum SaaS and 9.1 Learn version that the v2 B2 has been tested with. A key point of Case 1 is that by architecting your B2 to work in Learn SaaS, you also guarantee that it will work in the Q2 2016 release, provided of course that if you create and use any custom DB tables you continue to code for MS SQL, and Oracle, as well as Postgres. Case 2: Blackboard releases a newer version of Learn, say Q2 2017. You find that that your B2 continues to work in both 9.1 and SaaS environments. You don’t need to do anything. Case 3: Blackboard releases a newer version of Learn, say Q2 2017. You find that you need to make changes to your v2 B2 so that it will work with this newer version of Learn. You now must set the max version of Learn in the v2 B2 so that it can not be installed in this new version of Learn. You create a new version of your B2, v3, and set the min version of Learn in the bb-manifest. B2 v3 does not yet need to have a max version of Learn set in the manifest.",
    "tags": "Learn b2",
    "url": "/learn/b2/resources/preparing-for-learn-q2-2016.html"
  },{
    "title": "Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions",
    "text": "Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions Blackboard Building Blocks have long been a staple in the Blackboard Learn platform. These Java Web Apps allow you to customize the workflow and experience that you and your faculty use to interact with the system. We realize that this is an important part of the Learn ecosystem, and so Blackboard Learn SaaS with the Original Experience will continue to support your Building Blocks going forward*****. That said, the architecture of the SaaS-delivered platform is dramatically different than that of the self- and managed-hosted servers you are used to. As a result, your Building Block will likely need to be modified to run in the new Blackboard. The following sections list requirements that must be met for a B2 to function in a SaaS environment. For example, your B2 must be compiled with Java 8, the database may be Postgres so the best practice is to use Schema.xml, the shared content must be accessed as described below, etc. Many of these are also requirements for a B2 to function on Learn Q2 2016 (3000.x.x) and Q4 2016 (3100.x.x). The best practice is to code to meet all of these requirements, then your B2 will function on SaaS, Managed Hosted, and Self Hosted systems. *Note: Building Blocks cannot surface content in an Ultra course, ever. B2s meant designed to work with Original Experience courses can continue to work in SaaS, provided they meet the requirements documented here. Ultra Courses surface content from the Content Market - which are built on Partner Cloud, or the LTI standard &amp; Blackboard Learn REST APIs. APIs Only use the published APIs. If it’s not published, it’s private. Our product development team is cleaning up and refactoring a lot of code. If you’re using private APIs, there is a good chance they will stop working. So, remove all use of private APIs. For example we’ve discovered that B2s that depend on DocumentManagerEx now fail in newer versions of Learn. DocumentManagerEx is private. Don’t use it. Eliminate the use of all private APIs. Database In SaaS, the database schema name will no longer be BBLEARN or bb_bb60. Your B2 code must determine the actual schema name if it has any dependency on the value. See Bye Bye BBLEARN &amp; bb_bb60 Also, in SaaS, the database is Postgres. If you’ve been testing your code on the Developer Virtual Machine, this isn’t that big of a deal. Schema.xml will continue to be supported as it is today. If you are providing SQL statements in the form of stored procedures, post_schema_updates, etc, you will just need to be sure to supply those files in postgres form, as well. These files will take the suffix, db-pgsql. If a self or managed-hosted client is migrating your B2 to SaaS via a “full database migration” be certain to read SaaS Migrations - Sequences and Tables. In addition, its important to note that Exceptions encountered during postgres transactions stop all processing. You must code to handle this occurrence. One approach is to create a save point before you start the transaction and roll back to that save point upon exception. Here’s a small sample demonstrating this. // Much of the error handling stripped for space public static T withSavePoint(Callable c, Connection con) throws SQLException { Savepoint savepoint = null; try { if ( null != con &amp;&amp; !con.getAutoCommit() ) { savepoint = con.setSavepoint(); } return c.call(); } catch ( SQLException e ) { if ( con != null &amp;&amp; savepoint != null ) { con.rollback( savepoint ); } throw e; } } Postgres handles timestamps differently. There are two types of timestamps: localtimestamp and clock_timestamp::timestamp. The localtimestamp returns the time at the start of the transaction. The clock_timestamp()::timestamp returns the actual current time. As a result, it is best practice to use clock_timestamp()::timestamp in your Building Block, as this matches the behavior of timestamps in other databases. Avoid the use of data-templates for management of objects that can be managed through the bb-manifest.xml file. This includes rows in tables like application, navigation_item, and entitlements. The use of data-templates both adds risk to live-upgrades and loses customizations (application status, entitlement-to-role mappings, etc.). Shared Content Folder In the Enterprise Blackboard Learn you are accustomed to developing for, the Building Block home lives in the shared content directory. For instance, if I wrote a building block and set my vendor ID to ‘bbdn’ and my plugin handle to ‘my-b2’, my building block and all of its related files would live in blackboard/content/vi/BBLEARN/plugins/bbdn-my-b2, and this directory would exist once, in only one place, so changes were persisted to all application servers. In Learn SaaS, there are two building block homes. There is still the shared file system that is shared among the entire group of application servers, but there is also a local cache on each individual server. As a result, the Building Block would still reside in the shared directory, similar to blackboard/content/vi/BBLEARN/plugins/bbdn-my-b2, however the web app would live in the local cache on each server, in a directory similar to blackboard/cache/vi/BBLEARN/plugins/bbdn-my-b2. As a result of this change, several of the Plugin API methods have been modified to handle the dual-folder deployment. PlugInManager.getPlugInDir() and PlugInManager.getPluginsDirectory() can now only be used to access the read-only files from the exploded war in the cache folder. If you need to access the shared config folder for your Building Block, you can use PlugInUtil.getConfigDirectory(). Calling methods like ServletContent.getRealPath() will point to the cache folder, so be sure that any method you are calling that returns a path or a file is returning what you expect it to. As an example, with prior versions of Learn you could use the following code to write to a file in your plugin’s folder and create a configuration file: PlugInManager manager = PlugInManagerFactory.getInstance(); File myDir = manager.getPlugInDir( manager.getPlugIn( \"myVendorId\",\"myB2Handle\" ) ); File myConfigDir = new File( myDir, \"config\" ); File myConfigFile = new File( myConfigDir, \"config.txt\" ); // read/write myConfigFile You will now need to re-write the above code code to look like the following: File myConfigDir = PlugInUtil.getConfigDirectory( \"myVendorId\", \"myB2Handle\"); File myConfigFile = new File(myConfigDir, “config.txt”); // read/write myConfigFile If you just need to read from a file that is included with in your Building Block, you can use the following code snippet to access the cached copy. PlugInManager manager = PlugInManagerFactory.getInstance(); File myDir = manager.getPlugInDir( manager.getPlugIn( \"myVendorId\",\"myB2Handle\" ) ); File myStaticDirectory = new File (myDir, \"webapp/myStaticStuff\"); // read from myStaticDirectory - files as originally present in war file See the bb-config.properties section in Developer Virtual Machine - DVM for how to configure your DVM to behave like Learn SaaS in regards to the shared content folder. Eventually, all write access to the shared folder will be phased out, and write access for logging will be limited to the log directory returned by PlugInUtil.getLogDirectory(). Prior to this change, a new way will be documented to achieve the same goal without writing directly to the backend of the server. Logging Changes In SaaS, logging is handled a bit differently, as clients will not have back- end access to the system. You can still log to the log directory, but those logs are redirected to Kibana so your Building Block won’t be able to read that log file. There will be access to the logs through the System Admin panel. In order to see your B2s logs in Kibana-Elasticsearch, the only SaaS interface for log files, your B2 must do the following: Write the log files to the directory returned by blackboard.platform.plugin.PlugInUtil.getLogDirectory.PlugInUtil (Building Blocks API 3000.1.0) Typically looks like **/logs/plugins/-/...** Read the API documentation on how to get write permission. Use this format, with four columns that are pipe separated: 2016-03-15 01:00:00 | DEBUG | 41:c.b.c.i.task.UsageReportingTask | Generating Usage Report... 2016-03-15 01:00:00 | ERROR | 68:o.s.s.support.MethodInvokingRunnable | Invocation of method 'doUsageReport' on target class ...failed java.lang.NullPointerException: null at com.blackboard.consulting.internships.task.UsageReportingTask.getFirstTimeActivationDateModified(UsageReportingTask.java:68) The b2 logging configuration in the logback.xml file that produces this log format is: &lt;appender ... &gt; ... &lt;encoder&gt; &lt;pattern&gt;%date{yyyy-MM-dd HH:mm:ss} | %-5level | %-45(%L:%logger{40}) | %m%n%ex{10}&lt;/pattern&gt; &lt;/encoder&gt; ... &lt;/appender&gt; Sample logging code that works in a SaaS environment. Statelessness The Learn SaaS cloud architecture is built to the best practices of cloud computing. As such, in SaaS, Learn is stateless. As a result, you can no longer rely on HttpSession persisting across requests. As a result, Building Blocks that synchronize data on sessions will need to be refactored. You can still use BbSession.setGlobalKey() to store data, but you will need to be cognizant of the size of the data, as this is stored in the database. As an example, if you currently employ code like the following to store an object in the session: request.getSession().setAttribute( \"myKey\", \"myValue\" ); request.getSession().setAttribute( \"myObjectKey\", myObject ); You will need to refactor to look like this: ContextManagerFactory.getInstance().getContext().getSession().setGlobalKey(\"myVendorId.myB2Handle.myKey\", \"myValue\" ); Non-String values need to be serialized to save on the BbSession - refactor to avoid if at all possible. Java 11 Blackboard Learn SaaS runs on Java 11, as of Learn 3800. As a result, Building Block that are to be installed in the cloud, or on 9.1 Q2 2020 or later, need to be built with Java 11. For more information see 8 steps to prepare for Java 11. Tomcat 8 Tomcat 8 introduces a few new complexities to the Building Block development process. This move was an opportunity to re-imagine how the Learn application startup performance could be improved. This work has been extremely successful, but requires some refactoring of your code. JSP Precompilation It is expected that going forward, all Building Blocks will precompile JSPs. This simple step will assure that your JSP files render properly in Blackboard Learn. All bundled Building Blocks are required to take this step, while currently optional, this could become mandatory in the future. This blog post describes one way to precompile you Java Server Pages when using Gradle. bb-context-config.properties Tomcat 8.5 is substantially more configurable in the way that you can implement jar scanning. This file lives in the WEB-INF directory of your Building Block and provides the following options: com.blackboard.tomcat.servletcontainer.jarscanner.tldJars Because you should be precompiling your JSP files, this will normally be left blank. If on-demand JSP compilation is used, this may be set to a Java regular expression of jar file names. You should only include the jar files containing the TLD files needed by the non-compiled JSP files. The patter can include the template variable @CORE_TLD_PATTERN@, which will resolve to a regular expression matching all Blackboard jar files containing TLDs. Here are a few examples: RECOMMENDED: Building Block uses several Blackboard Tag Libraries com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=@CORE_TLD_PATTERN@ Default com.blackboard.tomcat.servletcontainer.jarscanner.tldJars= Building Block uses Struts and the bbNG Tags com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=bb- taglibs.jar|struts-taglib-.*\\\\.jar Building Block uses several Blackboard libraries and Struts com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=@CORE_TLD_PATTERN@|s truts-taglib-.*\\\\.jar com.blackboard.tomcat.servletcontainer.jarscanner.pluggabilityJars Set this to a Java regular expression of jar file names that contain web fragments, ServletContainerInitializers (SCIs), and other classes with annotations defined in the Servlet 3.1 specifications if they are used by the Building Block.The pattern can contain the template variable @CORE_PLUGGABILITY_PATTERN@, which will resolve to a regular expression that matches all Blackboard jar files containing such components. Here is an example: A Building Block contains classes that implement Spring’s WebApplicationInitializer com.blackboard.tomcat.servletcontainer.jarscanner.pluggabilityJars=spring- web-.*\\\\.jar com.blackboard.tomcat.servletcontainer.context.containerSciFilter This Java regular expression should list all SCIs in the CLASSPATH that are not used by the Building Block. The default value is ^.*$, which matches ALL SCIs and assumes that the Building Block does not use any. Examples: Building Block does not use SCIs and does not have any uncompiled jsps com.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*$ If for some reason, your JSP is not compiled, use com.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*(?&lt;!\\\\.JasperInitializer)$ If the JSPs are compiled, but your code relies on classes that implement Spring’s WebAppplicationInitializer com.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*(?&lt;!\\\\.SpringServletContainerInitializer)$ com.blackboard.tomcat.servletcontainer.context.processTldsOnStartup This is not required to be in the bb-context-config.properties file. You would include this and set it to true only if the Building Block or one of the jar files it contains defines a listener in a TLD that the Building Block requires. com.blackboard.tomcat.servletcontainer.context.processTldsOnStartup=true Here is a final example of a typical /WEB-INF/bb-context-config.properties file: com.blackboard.tomcat.servletcontainer.jarscanner.tldJars= com.blackboard.tomcat.servletcontainer.jarscanner.pluggabilityJars= com.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*$ If you see errors like: Unable to compile &lt;myclass&gt; root cause: INFO | jvm 1 | 2018/02/06 00:51:17 | java.lang.NullPointerException INFO | jvm 1 | 2018/02/06 00:51:17 | at org.apache.jasper.JspCompilationContex t.getTldResourcePath(JspCompilationContext.java:566) INFO | jvm 1 | 2018/02/06 00:51:17 | at org.apache.jasper.compiler.Parser.parseTaglibDirective try adding making your bb-config-context.properties file look like this: com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=@CORE_TLD_PATTERN@ com.blackboard.tomcat.servletcontainer.jarscanner.pluggabilityJars= com.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*(?&lt;!\\\\.JasperInitializer)$ web.xml Your Building Block should be using Web App version 3.0, and requires metadata-complete to be set. By default and in most cases, this should be set to true for best performance. Set this to false ONLY if your Building Block uses annotation-based web_xml extensions as defined in the Servlet 3.1 specification or if your jar files should be scanned for web-fragment.xml. These are some of the annotations that require the metadata-complete attribute to be set to false: WebServlet WebFilter WebInitParam WebListener MultipartConfig ServletSecurity HttpConstraint HttpMethodConstraint DeclareRoles EJB EJBs Resource Resources PersistenceContext PersistentContexts PersistenceUnit PersistenceUnits PostConstruct PreDestroy RunAs WebServiceRef WebServiceRefs Some of these annotations, like PostContruct, PreDestroy, and Resource, only require the setting to be false if they are placed in an object whose life- cycle is managed by the container, such as a Servlet or a Listener. Here is an example of what this will look like in your web.xml file: &lt;web-app xmlns=\"[http://java.sun.com/xml/ns/javaee](https://community.blackboa rd.com/external-link.jspa?url=http%3A//java.sun.com/xml/ns/javaee)\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web- app_3_0.xsd\" version=\"3.0\" metadata-complete=\"true\"&gt; In addition to metadata-complete, another new tag should be included at the end of the web.xml file: absolute-ordering. Generally, this should be an empty tag for best performance. If web fragments are used, the ones that are required should be listed explicitly her to to avoid unnecessary initialization of other unused fragments in the class path. For example: The Building Block does NOT use web fragments &lt;absolute-ordering/&gt; The Building block uses web fragments from the spring-web jar &lt;absolute-ordering&gt; &lt;name&gt;spring_web&lt;/name&gt; &lt;/absolute-ordering&gt; Faster Startup When declaring servlets in web.xml, the tag allows you to decide when a servlet is loaded into memory. The default value is to load at first access, but that is not always appropriate for every situation. The following table illustrates the tags and their meanings. Be sure to select the one that is right for your Building Block. Tag Value Description 1 Load the servlet during system initialization. -1 Load the servlet the first time it is accessed. -9876 Load the servlet immediately following the Learn system initialization Be sure to evaluate your individual integration before deferring your startup. If this or another Building Block depends on the servlet code being registered or if this servlet must be live prior to the system starting for user access, deferring startup is not appropriate. Deferring all of your servlets to load immediately following system startup will definitely make the system available to users more quickly, though one should note that those user requests might be a bit slower as all of the servlets are starting. In addition, it is important to note that should a user access a servlet that has been deferred and not yet started, it will load at that time, so there is no risk of a servlet being unavailable should the process still be underway. If you are executing other startup logic inside something such as a ServletContextListener’s contextInitialized method and that logic is not 100% required to be executed before user activity then please defer it by calling ContextInitThreadRunner.startThread(Thread) or .startDaemonThread(Thread). Here is a snippet from the Javadoc explaining this method: /** * This method can be used in place of thread.start() when you are starting a thread typically during system startup * and you do not absolutely NEED that thread to start immediately. Once the system has completed normal startup of * all webapps (b2s) and is ready to accept requests, any threads registered via this method will be started. &lt;br&gt; * &lt;br&gt; * It is safe to call this at any point in time though - if the server has already started then this will merely start * the thread.&lt;br&gt;` * &lt;br&gt; * The reason we are doing this is to make sure all resources can be dedicated to pure startup tasks and not diverted * to 'background' activity, thus getting the system to a ready state a bit faster. */ URL Encoding Tomcat 8.5.12 and later releases of Tomcat 8.5.x by default does not allow curly braces ( { } ) or vertical bars, often referred to as pipes ( | ) in URLs. For backward compatibility, Tomcat provides a way to override this behavior by allowing a system property tomcat.util.http.parser.HttpParser.requestTargetAllow to be defined. Please be advised that this exposes the application to a known security issue. Future versions of Tomcat may not support this override. Therefore, all B2s must url-encode these characters. For example, an URL like http://myuniversity.blackboard.com/webapps/myb2/appController?options={x|y} must be written by the application as http://myuniversity.blackboard.com/webapps/myb2/appController?options=%7bx%7cy%7d. Otherwise, Tomcat will reject the request. Permissions As Blackboard continues to modernize the Blackboard Learn platform and move services out of the Learn code line and into microservices, the need to secure the application from both accidental and malicious actions, the properties granted to Building Block integrations is necessarily tightening. This is being addressed in a phased manner, with the intent of providing third-party developers ample runway for adjusting to the new restrictions. As new restrictions are added, this page will list them, so be sure you are following this page to receive updates. Permission Mitigating Factors Current Action** java.security.AllPermission   Filtered Out java.lang.RuntimePermission createSecurityManager, setSecurityManager Filtered Out java.lang.RuntimePermission action implying createSecurityManager or setSecurityManager Warning Message java.util.PropertyPermission write Warning Message java.io.FilePermission ALL FILES Warning Message Many Building Blocks rely on the ALL FILES permission for writing to the file system. This will be filtered out soon. The Building Block should request explicit file system permissions and utilize the advice in this guide when writing to log files and config directories. To illustrate the change, here is an example of a bad permission and a good permission for writing to a log file from a Building Block. BAD &lt;permission type=\"java.io.FilePermission\"name=\"&amp;lt;&amp;lt;ALLFILES&amp;gt;&amp;gt;\" actions=\"read,write,delete,wxecute\"/&gt; GOOD ( A couple examples. See ALL FILES No More for a full set.) &lt;permission type=\"java.io.FilePermission\" name=\"BB_HOME/-\" actions=\"read,write,delete\"/&gt; &lt;permission type=\"java.io.FilePermission\" name=\"BB_HOME/logs/\" actions=\"read,write,delete\"/&gt; Original UI Original courses run in an iframe on Learn SaaS. This shouldn’t affect your Building Block, except in the two following cases: If you set top.document.location or top.location.href or any other similar settings that change the top page for the browser, your Building Block will not display properly. You can use window.location instead. HTML form tags with target=”_top”, or target=”_blank” will break out of the Ultra Original course peek panel. Change these to target=”_self”. To meet accepted best practices in web design, there is a new maximum browser width of 1920px. Make sure you plan accordingly. B2s using the bbUI and bbData tag libraries should be refactored were at all possible to use bbNG. Ultra UI There are currently no extension points for Building Blocks in the Ultra UI. Continuous Delivery Blackboard strives to deliver updates every two weeks. As a result, you should be using only public APIs whenever possible, as the continuous delivery model, coupled with the possibility of undocumented private API changes without warning, makes using private APIs extremely risky. Installing Building Blocks in Learn SaaS There is no way to install a Building Block in Learn SaaS, regardless of the User Interface you are using. If you have licensed Learn SaaS Plus or Advantage, you do have the ability to install Building Blocks, but you must work with support to schedule the installation Update a Building Block for TinyMCE 5 In Learn 3900.X we intend to implement an updated content editor, TinyMCE 5, in the Original Course View and Original Experience of Learn. (*Forward-looking statement applies.) This editor changes certain patterns of UI with more of them living in an overlay modal rather than pop-up window after pop-up window. This change has led to required changes that are specific to B2s that have a Mashup. Cancel buttons in these mashups that expect to close a window will actually now need to close on overlay modal. The overlay modal will also include a close action button, an “x” in the interface, which will also work to close the window in case the cancel button doesn’t work; but if a cancel button in a mashup B2 is going to continue to work, the code will need to be updated. The code below needs to be added for the cancel button. This code assumes that a B2 is being designed that is compatible with both the new editor and the older one, Learn v 3900.x vs v3800.x and earlier. if ( parent &amp;&amp; parent.tinymce &amp;&amp; parent.tinymce.activeEditor &amp;&amp; parent.tinymce.activeEditor.windowManager ) { parent.tinymce.activeEditor.windowManager.close(); } else { // Call the JavaScript you currently use for Cancel here. } If the B2 will only be compatible with the updated editor and not backwards compatible, the else section isn’t required: if ( parent &amp;&amp; parent.tinymce &amp;&amp; parent.tinymce.activeEditor &amp;&amp; parent.tinymce.activeEditor.windowManager ) { parent.tinymce.activeEditor.windowManager.close(); } *Statements regarding our product development initiatives, including new products and future product upgrades, updates or enhancements represent our current intentions, but may be modified, delayed or abandoned without prior notice and there is no assurance that such offering, upgrades, updates or functionality will become available unless and until they have been made generally available to our customers.",
    "tags": "Learn b2",
    "url": "/learn/b2/resources/preparing-for-saas-and-new-learn-versions.html"
  },{
    "title": "Production groups",
    "text": "Developer Portal, Development and Production Groups What are Groups? The Blackboard Developer Portal provides the means to manage application releases and associated developers through the concept of Groups. You can create groups for individual and team development, as well as target a specific group for a production application release (your Production Group). This allows you to manage your applications and the developer teams behind them, enabling access to application references by team members. Groups always have at least one member - that unique member has admin rights and may not be removed from the group. You may add developers to groups. Developers added to groups may be given administrator privileges on the group. Groups may also have one or more applications associated with the group. Application association allows for granular management of applications and teams access to application information. Groups enable you to manage the developers associated with your projects and the release level of your applications. And finally Groups allow for a higher contracted rate_limit, and site quota, over those set for default developer accounts. These settings are based on your Blackboard license or Business Development contract. If you do not have a Blackboard product license or do not have a Business Development contract your groups will all have default developer account settings. This document explains how to create and manage your groups. Group Naming Requirements This is a very important topic because the name you give the group is the name that shows up in the Blackboard Learn system that is associated with the application ID when the Learn Administrator configures the integration. In general, you want the Group Name to include at minimum one or two items, 1.The name of the company/vendor that owns the application, and optionally 2. the name of the application or product. Below is an example for one application ID: For developers you could use following name. Notice how we include the company name, the product name, and who the group belongs to: SuperSoftware - Sudoku For Learners - Development Team 1 SuperSoftware - Sudoku For Learners - Development Team 2 Then your production group name could be the following: SuperSoftware - Sudoku For Learners; or SuperSoftware, Sudoku For Learners If your company had a different product, say Multinote, it will have a different application ID and you will associate it with different groups, say: SuperSoftware - Multinote - Development Team 1 SuperSoftware - Multinote - Development Team 2 SuperSoftware - Multinote If your company name indicates your product, and your product name is trademarked, then you have several choices for a production group name. For example if your company is Mark’s Software and your Trademarked’ application is Multinote then you can have your production group name be one of the following: Mark’s Software Multinote Mark’s Software - Multinote We ask that you not add other, unnecessary information to a production group name. For example, including text indicating that the group name is associated with Blackboard REST APIs is not necessary, nor is an indication of server type such as ‘-test’, ‘-stage’, or ‘-production’, as given the context, we and the Learn Administrator know that’s where and how the group name is being used. It doesn’t matter if you have a SOAP Web Service proxy of the same name as that shows up on a different page. We will only assign site and rate limits higher than the defaults for development groups to Production Groups that meet these naming requirements. Next, let’s take a look at how you create Groups. Creating Groups in the Developer Portal Management of Groups and Applications requires that you have logged into the Developer Portal. Once logged in you are taken to the Application Management portion of the Developer Portal. It is here that you may manage your groups. Note in the below screen capture that Sterling Silver is a member of the STERLING MOSS group which was created when he created his Developer Portal Account. We already know that Sterling is the Admin of the group so let’s click My Groups and take a look a the STERLING MOSS group. If you created your Developer Portal account before we introduced groups that is not a problem, you will now have a group based on your account information and you may edit this group name. When Sterling clicks on the My Groups link he is taken to the Groups management page (1) where he may view groups in which he is a member (2), view developers in his groups (3), add developers to groups of which he is an administrator (4), and create groups and rename groups he is administering (5). Groups are created by clicking the Create link next to the Group chooser. When Stirling clicks Create, a dialog is displayed where he may enter the name of his group. Clicking the Create button will saves the group. Groups may be used to manage application releases. For example Sterling may have a limited-use alpha group with full developer team access, a beta-group with broader application distribution and a smaller developer team, or a production group with limited admin access. We will discuss Managing Group Applications later in this document. Sterling chooses to add a group. In this case Sterling is creating a group for his company’s production software. Note that on creating a group you are automatically added to the group with administrator privileges. This allows you to add developers or otherwise manage the group and it’s associated applications. Now that Sterling has created a production group he may want to associate one (or more) of his applications with this group, or add developers from his team to this new group to assist with administrating the group. Let’s take a look at managing a group’s applications… Managing Group Applications As the owner of several applications and several groups you can associate applications with different developer groups. Let’s log in as Steve Ranger, owner of RangerSoft. When clicking the My Apps link Steve can now see his applications and the groups with which they are associated. Steve has his personal group “STEVE RANGER” (1), a development group - “RangerSoft - dev” (2), and his production group “RangerSoft” (3). Steve’s groups have specific applications associated with them. Steve has his experimental application - Steve’s Experiment - under his personal group. This application may be deleted by using the Trash can icon. Steve also has an application in development - Multinote Plus. This is under his RangerSoft - dev group. This application also may be deleted by using the Trash can icon. Finally Steve has a production application - Multinote. This is under his production RangerSoft group. This application (extra space was here..) may not be deleted. This is to protect from accidentally deleting applications which have been deployed to production environments. Because Steve has administrative rights he may change the group with which an application is associated at any time. Changing an application’s group from a production group to a non-production group allows for the deleting of that application. Note that deleting an application will break any deployments. Also note that changing an application’s group may change the rate_limit for that application. Managing Group Developers Developers who have been added to groups may see applications that are associated with a group and may also be designated as administrators of a group. Steve has multiple developers. and Steve wants to add a developer to his production RangerSoft group so he clicks the My Groups link and opens his Groups management page. He then clicks the Add Developers icon as indicated by the arrow. Clicking the Add Developer Icon opens a dialog for entering the email address of the developer he wants to add to his group. Note that in order to add developers they must have previously registered for a developer portal account and you must know the email address with which they registered. Steve enters the email address for one of his developers and clicks the Add Developer button. Adding a developer to your group allows that developer to see all your applications. The administrator setting on the developer for a specific group is what enables that developer to manage the associated application The default when adding a developer is that they have no admin privileges. Steve wants Junior to admin the applications associated with the RangerSoft - dev group, so Steve changes to that group and changes Junior’s privileges. The Developer View When Junior Developer logs into the Developer Portal he now sees the two RangerSoft groups that Steve created. Junior may admin the application association for the Multinote Plus application which is associated with the RangerSoft - dev group because Steve made Junior an administrator on that group. Also note that because Steve did not make Junior an admin on the the RangerSoft group Junior has no application admin privileges.",
    "tags": "Learn Rest Admin",
    "url": "/learn/rest/admin/production-groups.html"
  },{
    "title": "Proxy Tools",
    "text": "Proxy Tools Administrators can link to a proxy tool descriptor which registers the tool, places access points according to defined properties, and enables access to the web service through the proxy tool. Before registering a proxy tool, there are three Global Properties to keep in mind: Use the Proxy Tool Registration Password field to restrict access to the registerTool method. Proxy tools that must supply the password entered in this filed to register themselves. The proxy tool cannot login as a tool until a password is specified on the proxy tool configuration page. Proxy tools cannot receive any entitlements until granted by giving the individual proxy tool its own password. Allowing access to Unknown Proxy Tools means that these proxy tools can connect and use user-based authentication to access web services. A password is required and access is restricted based on the users’ entitlements within the system. Access for unknown proxy tools can be accomplished without explicitly granting them the right to use web services. Exposing the Tool Consumer Profile allows proxy tools to auto-discover the capabilities of the system by using the URL /webapps/ws/wsadmin/tcprofile. Disabling this does not disable proxy tools, but it disables their ability to perform pre-registration capability validation. Find the Proxy Tools Page On the Administrator Panel, in the Building Blocks section, click Building Blocks. Click Proxy Tools. Manage Global Properties for Proxy Tools Use the Proxy Tool Registration Password field to restrict access to the registerTool method. Proxy tools that must supply the password entered in this filed to register themselves. The proxy tool cannot login as a tool until a password is specified on the proxy tool configuration page. Proxy tools cannot receive any entitlements until granted by giving the individual proxy tool its own password. Allowing access to Unknown Proxy Tools means that these proxy tools can connect and use user-based authentication to access web services. A password is required and access is restricted based on the users entitlements within the system. Access for unknown proxy tools can be accomplished without explicitly granting them the right to use web services. Exposing the Tool Consumer Profile allows proxy tools to auto-discover the capabilities of the system by using the URL /webapps/ws/wsadmin/tcprofile. Disabling this does not disable proxy tools, but it disables their ability to perform pre-registration capability validation. Click Manage Global Properties. Provide or edit the Proxy Tool Registration Password. Select the Allow Unknown Proxy Tool check box if appropriate. Select the Expose Tool Consumer Profile if appropriate. Click Submit. Register a Proxy Tool without Placements In the Register Proxy Tool list, click Create Proxy Tool without Placements. Provide the Vendor _and _Program information. Determine the Availability _of the proxy tool by clicking _Unavailable or Available. If the proxy tool is not Available, then it cannot log in to any web service using any authentication methods in addition to having any requested placements disabled. Provide a Shared Password. The Shared Password is required only for tool-authenticated web service sessions. Provide individual IP addresses or a range of IP addresses to allow or block in the IP Filters field. Type one address per line. Using IP Filters is optional and all IP addresses are allowed by default (ALLOW). Here are some guidelines for using the IP Filters: * Type BLOCK a.b.c.d to block an IP address or range of addresses. * Type ALLOW a.b.c.d to allow an IP address or range of addresses. * Wildcards () are allowed in any position of the IP address. * IP address ranges are specified using a slash as follows: a.b.c.d/e.f.g.h Click Submit. Register a Proxy Tool with Placements In the Register Proxy Tool list, click Create Proxy Tool with Placements. In the Known Servers list, select a Proxy Server and click Go. Provide the registration URL for the proxy server in the Server Registration URL field. Use the full path for the URL furnished by the proxy tool vendor. Click Submit. Edit a Proxy Tool Access a proxy tool’s contextual menu and click Edit. Make changes to any of the fields. Click Submit. Delete a Proxy Tool Access the proxy tool’s contextual menu and click Delete. -OR- Select the check boxes for the appropriate proxy tools, and then click Delete. Download Sample Tools Click Download Sample Tools. Click _OK _to accept the download of a ZIP file containing sample proxy tools. What’s in the Sample Tools Package The ZIP file contains the following sample tools: .NET-based Proxy Tool Java-based Proxy Tool Java-based Proxy Server Note: Consult the README and the LICENSE_for_samples files before using the sample tools. The most current information is included in these files and may supersede this documentation",
    "tags": "Learn soap",
    "url": "/learn/soap/getting-started/proxy-tools.html"
  },{
    "title": "pyLTI1p3",
    "text": "Using the pyLTI1p3 Library with Blackboard Learn LTI 1.3 is a much better, much more secure option for integrating one application with another in a standard way. Python is an industry-standard language and is in use by many Blackboard institutions for building integrations. The purpose of this document is to demonstrate how to use the pyLTI1p3 library, built by Dmitry Viskov to easily integrate a Python application with Blackboard Learn’s Ultra Experience. For the purposes of this demonstration, we will use Dmitry’s pylti1.3 flask example. About The Project The Flask sample is a simple way to test all of the LTI Advantage capabilities of any platform that supports it. Essentially, the application is a brick breaker type game. It uses a basic launch to load the game. It uses the Names and Roles Provisioning Service to load a leaderboard, it uses the Assignments and Grades Service to save your score, and you can use Deeplinking to create links to the game with varying degrees of difficulty. Best of all, with a few minor configuration changes, this project works with Blackboard Learn out of the box! Getting Started As with any project, the first step is to clone the project to your local desktop. To do this, simply open a terminal, navigate to the directory you wish to clone the application to, and type git clone https://github.com/dmitry-viskov/pylti1.3-flask-example.git. If you are interested in making changes, you should fork the repo to your own account, and clone from there. Setting Up Learn Now that we have the project cloned locally, we need to register the application for use with Learn. We do this via the developer portal. For more information on this process, check out this document. Once you have an account set up, you can simply register a new application. You will be prompted to enter several pieces of information. For this project, here is what we need to enter: Field Description Example Application Name You can enter anything you like, but this name will display in Learn Py LTI 1.3 Game Description This is a free-form field. You can enter anything you like. A brick-breaker-style game written by Dmitry Viskov to demonstrate LTI Advantage in Python Domain(s) This should be the domain you plan to host the tool from. We use heroku, in our example. This requires some additional code changes, documented here pylti1p3-game.herokuapp.com Login Initiation URL This is the URL that Learn will use to launch into your application to begin the OIDCLogin process https:pylti1p3-game.herokuapp.com/login/ Tool Redirect URL(s) The URL to redirect to upon successful completion of the OIDCLogin https:pylti1p3-game.herokuapp.com/launch/ Tool JWKS URL The publicly accessible URL to the tools public key. We do not use this in this project, so we will leave it blank and let the portal generate our private key   Signing Algorithm The cryptographic algorith used to sign the JWT. Leave this as RS256   Group The developer group to associate with the integration. Here is more information on groups   Once you fill out this form, click the Register application and generate API key button and you will be prompted with several pieces of information. You will only see this once, so make sure you save the data somewhere. Now that we have our application registered, we have to tell our Learn instance that we have an application we want to integrate. To do this, you will need adminstrator privileges. Navigate to your Learn server in your browser and login as an appropriate user. Click the Admin link in the Ultra Base Navigation to access the System Administrator panel. In the Integrations module, click the link for LTI Tool Providers. Then in the menu bar, click Register LTI 1.3 Tool. You are prompted for a client_id. In the data you received from the developer portal, there was an application ID. In LTI, this is your client ID, and we will need it here. Paste in your Client ID and click submit. Learn will reach out to the Developer Portal, verify your client ID and then display a form with all of the settings available. Many of these settings are read-only. We need to save the Deployment ID, make sure the tool is marked as ‘Approved’, and be sure to enable memberships and posting of grades. Then click submit. Our game is now installed in Blackboard Learn! We have one more step to go. Once you submit the form, you will be taken to a page that displays your installed LTI Tools. Next to the name of your game, click the triangle icon to launch the context menu and select Manage Placements. You will see a screen similar to your list of LTI Tools. In the menu, click the button to Create Placement. In the label field, give the placement a name that you want to display to the instructor. in the handle field, give it a unique name, such as pylti1p3-deeplinking. Ensure Availability is set to ‘Yes’. Under Type, select Course content tool and be sure to check Supports deep linking. Under Tool Provider URL, enter the launch URL to your tool. In our case it is https://pylti1p3-game.herokuapp.com/launch/. Now click Submit, and we are ready to use the tool in Blackboard Learn. Setting Up The Tool There are three files we need to modify in our tool in order to run it. In the repository you cloned to your desktop, you will see a configs directory. In game.json, you will already see a section for Blackboard. It will look like this: \"https://blackboard.com\": { \"client_id\": \"your client id\", \"auth_login_url\": \"https://developer.blackboard.com/api/v1/gateway/oidcauth\", \"auth_token_url\": \"https://developer.blackboard.com/api/v1/gateway/oauth2/jwttoken\", \"key_set_url\": \"https://developer.blackboard.com/api/v1/management/applications/&lt;your client id&gt;/jwks.json\", \"key_set\": null, \"private_key_file\": \"private.key\", \"deployment_ids\": [\"your deployment id\"] } The Blackboard URL is the Issuer sent in the LTI launch JWT. This is always the value in Blackboard Learn. The value for client_id should be set to your client ID (application ID from the Developer Portal). The auth_login_url and auth_token_url settings are always the same, and do not need to be changed. The key_set_url is always the same, as well, though it contains your client ID, so you will need to replace &lt;your client id&gt; with, you guessed it, your client ID. The deployment ID that you received when you registered your tool in learn goes in the deployment_ids setting. Save this file. The next file we need to modify is the private.key file, also in the configs directory. Delete the current contents, and paste the private key you received when you registered your application in the developer portal. Don’t worry, we don’t store this. It is generated, displayed to you at registration, and then it is gone. Save this file. Now we just have to make a small edit to the game/app.js file. Towards the top, you will see a section that looks like this: config = { \"DEBUG\": True, \"ENV\": \"development\", \"CACHE_TYPE\": \"simple\", \"CACHE_DEFAULT_TIMEOUT\": 600, \"SECRET_KEY\": \"replace-me\", \"SESSION_TYPE\": \"filesystem\", \"SESSION_FILE_DIR\": mkdtemp(), \"SESSION_COOKIE_NAME\": \"flask-session-id\", \"SESSION_COOKIE_HTTPONLY\": True, \"SESSION_COOKIE_SECURE\": False, # should be True in case of HTTPS usage (production) \"SESSION_COOKIE_SAMESITE\": None, # should be 'None' in case of HTTPS usage (production) \"APPEND_TIMEZONE\" : False # Must be set to true if using Blackboard Learn } Blackboard Learn requires the timezone to be set in timestamps through both LTI and REST APIs. As a result, we must set APPEND_TIMEZONE equal to True. Now save the file. We are now ready to run our code! The final step is to deploy the Game application to the server it will run on and run python game/app.js. Using Heroku If you are planning to run this on Heroku, there are a few additional changes that need to be made before you deploy your code. First, Heroku needs to know what to do when your code is committed. Enter Procfile. Simply createa file named Procfile at the root level of the game, and in it place: web: python game/app.py Now save this file. Next, open up game/app.js. At the very bottom of the page, you will see an entry that looks like this: if __name__ == '__main__': app.run(host='0.0.0.0', port=9017) Heroku controls the ports that your application runs on, and setting it incorrectly renders your application useless. Furthermore, it can change from deploy-to-deploy. As such, we need to pull the port number from environment variables. To do so, replace the code above with the code below: if __name__ == '__main__': port = int(os.environ.get('PORT', 33507)) app.run(host='0.0.0.0', port=port) Lastly, app.js is in the game directory rather than the root directory, so we need to make a few small adjustments. Towards the top (around line 27), you will see the Flask app being initialized: app = Flask('pylti1p3-game-example', template_folder='templates', static_folder='static') We need to account for the directory we are running in, and add the path to this declaration: app = Flask('pylti1p3-game-example', template_folder='game/templates', static_folder='game/static') And finally, we need to make sure our application can find the LTI configuration file. Around line 65, you will see a method called get_lti_config_path and it will look like this: def get_lti_config_path(): return os.path.join(app.root_path, '..', 'configs', 'game.json') Make it look like this: def get_lti_config_path(): return os.path.join(app.root_path, 'configs', 'game.json') And that’s it. You can now check in your code to your Heroku dyno - git push -u heroku master - and Heroku will build and run your application. Once its complete, you can run heroku logs --tail to see the communication between Learn and our game. Running The Game From Learn Now that all of the setup is done, we are ready to play our game. As a user in a course with Instructor privileges, login to Blackboard and navigate to your Ultra course. In the left-hand navigation, you will see a link to View course &amp; institution tools. Click this link. In teh corresponding peek panel, click the link to Browse all course tools. Under the Institution Tools header, you will find the placement we created. It will be listed under the label you defined when creating the placement. Click this link, and you will be launched via LTI to a simple form that allows you to select the difficulty of the game you wish to play. Click the button for your selected difficulty, and the tool will automatically create a link to the game with the selected difficulty in your course outline. NOTE: If you selected ‘Launch in a new window’ when you created the placement, you will have to refresh the course outline before you will see the content item. You should now have a content item called Breakout &lt;your selected difficulty&gt; mode!. Click it to play! In the background, the tool uses the Names and Roles Provisioning service to create a leaderboard with the course members. Further, it uses the Assignments and Grades Service to store your latest score. Pretty fancy, right?",
    "tags": "Standards",
    "url": "/standards/lti/tutorials/py-lti-1p3.html"
  },{
    "title": "Python Demo",
    "text": "Demo using Python The rest demo script demonstrates authenticating a REST application, management and use of the authorization token, and creating, updating, discovering, and deleting supported Learn objects. Prerequisites You must register a developer account and application in the Developer Portal You must register your application in Blackboard Learn You must also configure the script as outlined in the README for the project This webapp allows you to: Authenticate Create, Read, and Update a Data Source Create, Read, and Update a Term Create, Read, and Update a Course Create, Read, and Update a User Create, Read, and Update a Membership Delete created objects in reverse order of create - membership, user, course, term, datasource. All generated output is sent to the terminal console. This is not meant to be a Python tutorial. It will not teach you to write code in Python. It will, however, give a Developer familiar with Python the knowledge necessary to build a REST-based Web Services integration. Assumptions This help topic assumes the Developer: Is familiar with Python Has obtained a copy of the source code and run as noted in the project README.md file. Has a REST-enabled Blackboard Learn instance. Code Walkthrough To build an integration with the Blackboard REST Web Services, regardless of the programming language of choice, can really be summed up in two steps: Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the Basic Authentication document. Call the appropriate REST endpoint with the appropriate data to perform the appropriate action. Authorization and Authentication The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A request is made to the token endpoint with a Basic Authorization header containing the base64-encoded key:secret string as its key. The token service returns a JSON object containing the Access Token, the Token Type, and the number of seconds until the token expires. The token is set to expire after one hour, and subsequent calls to retrieve the token will return the same token with an updated expiry time until such time that the token has expired. There is no refresh token and currently no revoke token method. The Python code handles authentication and token management in the auth class in auth.py:     def __init__(self, URL):         self.SECRET = \"insert_your_application_key_here\"         self.KEY = \"insert_your_application_secret_here\"         self.CREDENTIALS = 'client_credentials'         self.PAYLOAD = {             'grant_type':'client_credentials'         }         self.TOKEN = None         self.target_url = URL   ...    def setToken(self):         oauth_path = '/learn/api/public/v1/oauth2/token'         OAUTH_URL = 'https://' + self.target_url + oauth_path         if self.TOKEN is None:             session = requests.session()             session.mount('https://', Tls1Adapter()) # remove for production         # Authenticate             r = session.post(OAUTH_URL, data=self.PAYLOAD, auth=(self.KEY, self.SECRET), verify=False)             print(\"[auth:setToken()] STATUS CODE: \" + str(r.status_code) )             print(\"[auth:setToken()] RESPONSE: \" + r.text)             if r.status_code == 200:                 parsed_json = json.loads(r.text)                 self.TOKEN = parsed_json['access_token'] ... The JSON response is parsed to retrieve the Token which is stored and retrieved for subsequent calls by calling auth.getToken(). Note that the retrieving the stored token invokes a sanity check on token expiration, requesting a fresh token if nearly expired - see auth.getToken() and auth.isExpired(). Calling Services The individual service calls are handled by Python in service specific class files: datasource.py term.py course.py user.py membership.py A sixth file constants.py contains a set of constants used by the application. Each of these classes creates the JSON body when appropriate and then calls the appropriate HTTP Request, and return the JSON response as a String to be displayed in the terminal console window. In the demo restdemo.py, each of the above objects are called using POST to create, PATCH to update, GET to read, and DELETE to delete the target object. Note that memberships use PUT to create a membership. End points are generally defined as /learn/api/public/v1/&lt;objecttype&gt;/&lt;objectId&gt;. Object ID can be either the pk1, like _1_1, or as the batch_uid. This value should be prepended by externalId:, like externalId:test101. For example, to retrieve a course by the pk1 _1_1, you would call GET /learn/api/public/v1/courses/_1_1. To retrieve by the batch_uid test101, you would call GET /learn/api/public/v1/courses/externalId:test101. Create is sent to Learn as a HTTP POST message with a JSON body that defines the object. The endpoint should omit the objectId, as this will be generated on creation. Read is sent to Learn as a HTTP GET message with an empty body. The endpoint should include the objectId being retrieved. Update is sent to Learn as a HTTP PATCH message with a JSON body that defines the object. The endpoint should include the objectId being updated. Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint should include the objectId being deleted. The following shows the key components of the Python code for making REST requests against each of the supported objects. In each case detailed messages are printed to the terminal screen for you to follow the process. Datasources Datasources are handled in datasource.py. Variables and Create Payload self.DATASOURCES_PATH = '/learn/api/public/v1/dataSources' #create(POST)/get(GET) self.DATASOURCE_PATH = '/learn/api/public/v1/dataSources/externalId:' authStr = 'Bearer ' + token ... self.PAYLOAD = {      \"externalId\":DSKEXTERNALID,      \"description\":\"Data Source used for REST demo\" } Create r = session.post(\"https://\" + self.target_url + self.DATASOURCES_PATH, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) Read r = session.get(\"https://\" + self.target_url + self.DATASOURCE_PATH+DSKEXTERNALID, headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) ... print(\"[DataSource:getDataSource()] RESPONSE: \" + r.text) Update r = session.patch(\"https://\" + self.target_url + self.DATASOURCE_PATH+DSKEXTERNALID, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) ... print(\"[DataSource:updateDataSource()] RESPONSE: \" + r.text) Delete r = session.delete(\"https://\" + self.target_url + self.DATASOURCE_PATH+DSKEXTERNALID, headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) Terms Terms are handled in term.py. This Class contains the methods for creating, reading, updating and deleting Term objects. Variables and Create Payload self.terms_Path = '/learn/api/public/v1/terms' #create(POST)/get(GET) self.term_Path = '/learn/api/public/v1/terms/externalId:' self.termExternalId = TERMEXTERNALID #'BBDN-PYTHON-REST-DEMO-TERM' authStr = 'Bearer ' + token self.PAYLOAD = {      \"externalId\":self.termExternalId,      \"dataSourceId\": dsk, #self.dskExternalId, Supported soon.      \"name\":\"REST Demo Term\",      \"description\": \"Term used for REST demo\",      \"availability\": {           \"duration\":\"Continuous\"       } } Create r = session.post(\"https://\" + self.target_url + self.terms_Path, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) Read r = session.get(\"https://\" + self.target_url + self.term_Path+self.termExternalId, headers={'Authorization':authStr},  verify=False) ... print(\"[Term:updateTerm()] RESPONSE: \" + r.text) Update self.PAYLOAD = {        \"externalId\":self.termExternalId,        \"dataSourceId\": dsk, #self.dskExternalId, #Supported soon        \"name\":\"REST Python Demo Term\",        \"description\": \"Term used for REST Python demo\",        \"availability\": {               \"duration\":\"continuous\"        } } ... r = session.patch(\"https://\" + self.target_url + self.term_Path+self.termExternalId, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) Delete r = session.delete(\"https://\" + self.target_url + self.term_Path+self.termExternalId, headers={'Authorization':authStr}, verify=False) Courses Courses are handled in course.py. This class contains the methods for creating, reading, updating and deleting course objects . Variables and Create Payload self.courses_Path = '/learn/api/public/v1/courses' #create(POST)/get(GET) self.course_Path = '/learn/api/public/v1/courses/externalId:' self.termId = None self.PAYLOAD = {        \"externalId\":constants.COURSEEXTERNALID,        \"dataSourceId\": dsk, #self.dskExternalId, Supported soon.        \"courseId\":constants.COURSEEXTERNALID,        \"name\":\"Course used for REST demo\",        \"description\":\"Course used for REST demo\",        \"allowGuests\":\"true\",        \"readOnly\": \"false\",        \"availability\": {               \"duration\":\"continuous\"        } } Create r = session.post(\"https://\" + self.target_url + self.courses_Path, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) Read r = session.get(\"https://\" + self.target_url + self.course_Path+constants.COURSEEXTERNALID, headers={'Authorization':authStr},  verify=False) ... print(\"[Course:getCourse()] RESPONSE: \" + r.text) Update self.PAYLOAD = {        \"externalId\":constants.COURSEEXTERNALID,        \"dataSourceId\": dsk, #self.dskExternalId, Supported soon.        \"courseId\":constants.COURSEEXTERNALID,        \"name\":\"Course used for REST Python demo\",        \"description\":\"Course used for REST Python demo\",        \"allowGuests\":\"true\",        \"readOnly\": \"false\",        \"availability\": {               \"available\":\"Yes\",               \"duration\":\"continuous\"        } } r = session.patch(\"https://\" + self.target_url + self.course_Path+constants.COURSEEXTERNALID, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) Delete r = session.delete(\"https://\" + self.target_url + self.course_Path+constants.COURSEEXTERNALID, headers={'Authorization':authStr}, verify=False) Users Users are handled in user.py. This class contains the methods for creating, reading, updating and deleting user objects . Variables and Create Payload self.users_Path = '/learn/api/public/v1/users' #create(POST)/get(GET) self.user_Path = '/learn/api/public/v1/users/externalId:' self.PAYLOAD = {        \"externalId\":USEREXTERNALID,        \"dataSourceId\": dsk, #self.dskExternalId, Supported soon.        \"userName\":\"python_demo\",        \"password\":\"python61\",        \"availability\": {               \"available\": \"Yes\"        },        \"name\": {        \"given\": \"Python\",        \"family\": \"Demo\",        },        \"contact\": {        \"email\": \"no.one@ereh.won\",         } } Create r = session.post(\"https://\" + self.target_url + self.users_Path, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) Read r = session.get(\"https://\" + self.target_url + self.user_Path+USEREXTERNALID, headers={'Authorization':authStr},  verify=False) ... print(\"[User:getUser()] RESPONSE: \" + r.text) Update self.PAYLOAD = {             \"externalId\": USEREXTERNALID,             \"dataSourceId\": dsk, #self.dskExternalId, Supported soon.             \"userName\":\"python_demo\",             \"password\": \"python16\",             \"availability\": {                 \"available\": \"Yes\"             },             \"name\": {                 \"given\": \"Python\",                 \"family\": \"BbDN\",                 \"middle\": \"Demo\",             },             \"contact\": {                 \"email\": \"no.one@ereh.won\",             }         } ... r = session.patch(\"https://\" + self.target_url + self.user_Path+USEREXTERNALID, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) Delete r = session.delete(\"https://\" + self.target_url + self.user_Path+USEREXTERNALID, headers={'Authorization':authStr}, verify=False) Memberships Memberships (enrollment/staff) are handled in membership.py. This class contains the methods for creating, reading, updating and deleting membership objects . Variables and Create Payload self.PAYLOAD = {        \"dataSourceId\":dsk, #self.dskExternalId, supported soon.        \"availability\": {               \"available\":\"Yes\"        },        \"courseRoleId\":\"Instructor\" } Create r = session.put(\"https://\" + self.target_url + membership_Path, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) Read r = session.get(\"https://\" + self.target_url + memberships_Path, headers={'Authorization':authStr}, verify=False) ... print(\"[Membership:getMemberships()] RESPONSE: \" + r.text) Update self.PAYLOAD = {        \"dataSourceId\":dsk,        \"availability\": {               \"available\":\"No\"        },        \"courseRoleId\":\"Student\" } ... r = session.patch(\"https://\" + self.target_url + membership_Path, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) Delete r = session.delete(\"https://\" + self.target_url + membership_Path, headers={'Authorization':authStr}, verify=False) Conclusion All of the code snippets included in this document are included in a sample REST Demo Python command line application available on GitHub. There is a README.html included that talks more specifically running the code. Feel free to review the code and run it against a test or development Learn instance to see how it works.",
    "tags": "Learn Rest",
    "url": "/learn/rest/examples/python-demo.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/recap.html"
  },{
    "title": "Rest registry",
    "text": "Rest Registry What’s in the Box? The Blackboard developer portal is located at https://developer.blackboard.com There, you can: Sign up for a Developer Account Read API Reference Documentation Register a REST Application or an LTI Tool Delete an application Sign up for a Developer Account Blackboard Learn integrations begin at the Developer Portal. This is where you register applications and get an application ID, key/secrets, and other vital information. In the portal, you can see which client systems are using the integrations. Signing up is free, and you can develop your integration at no cost. There may be cost involved in deploying your integration, but before that happens, you’ll speak with us and we’ll provide further guidance. To discuss deploying your application, please contact the developer experience team at developers@blackboard.com. You don’t have to register right away, but before you can authenticate your project so it works with Blackboard applications, you will need to be registered. To register as a Blackboard developer: Go to https://developer.blackboard.com and select Sign Up. Read and agree to the terms and conditions. Provide your email address, a password, your first name and last, and select the checkbox to prove you are human. Select Create Account and you’re on your way. Note: If you are a Blackboard client - a Blackboard Partner / Vendor / Developer of a REST Application should NEVER tell you to go to the developer portal and create an App ID with the associated key/secret to install their application. They should never tell you to apply for a Rate/Site increase for their application. Blackboard DOES NOT support that model. Every REST Application developer should give you an App ID to install their REST App and tell you how to configure a system role for it’s use. Period. The REST Application developer needs to request the increases they need to run their application themselves. If they ask you to go to developer.blackboard.com and get an App ID/Key/Secret, please tell them that is wrong. They should have exactly one App ID for their production REST application that they are asking you to install. Read API Reference Documentation To view the API reference documentation go to https://developer.blackboard.com and select Explore APIs.You can also browse code examples and participate in the developer community site. Register a REST Application or an LTI Tool Before you can release an application or tool to the Blackboard ecosystem, you must first register as a Blackboard developer by creating a developer account. To register as a blackboard developer, see Sign up for a Developer Account above. To register an application or LTI tool: Select Register below the heading “Register and Manage Your Applications”. If you do not already have any registered applications, you will see a screen like the one shown below. If you do not already have any applications registered, select Register. Otherwise you will see a list of your registered applications. Select the + button to register a new one. By default, the first available development group is named after the user creating the app. You can change this later. The following fields are required. * For REST and LTI 1.1 applications, provide: Name and Description for your application and select a Group to work on the project a comma-separated white list of one or more Domain(s) that can use the app’s key/secret to access Blackboard applications For LTI 1.3 tools, complete all fields. Select Save. Learn displays your application’s name and description to Learn administrators when they connect your application to their system. This helps them make sure they have found the intended application. Write down or copy-and-paste the Application Key and Secret and other information that you are provided. Your application needs this key and secret to authenticate with Blackboard Learn. Blackboard does not keep any record of these properties. If you lose them, Blackboard cannot help you restore them. Select Continue. Delete an application When you login after having created applications, you will see them listed under My Applications.To delete an application: Mouse over the its record in the Your Applications list. A delete icon appears. Confirm your choice by selecting Delete Application. The application is removed from your list of applications and is no longer registered to the Blackboard cloud.",
    "tags": "Learn Rest",
    "url": "/learn/rest/getting-started/registry.html"
  },{
    "title": "Releasing your integration",
    "text": "Releasing your integration You have taken the time to build a great integration now there are a few steps that should be followed to ensure a successful product release. These fall into two categories: Developer Portal Settings Learn REST Integration Configuration Developer Portal Settings Before releasing your integration you want to ensure there are sufficient site and rate limits for smooth operation. This is accomplished by creating a new group named after your company or institution - this new group will receive your production level settings. Please follow group naming conventions as described in our Group Naming Requirements documentation. Once you have created your production group, file a support ticket requesting production settings on your group. If you are participating in our Open Innovation Initiative program please contact developers@blackboard.com Once we have the information required and have updated your group, you will then associate your application with your production group. Your application is now using production settings. Next step is making your application available to your clients. Delivering your REST Integration There are three steps in releasing your integration: Providing your client with your integration’s Application ID. E.G.: 8abvr1e4-2x43-4757-8z63-0063259f234 Provide an integration preferred User Name and Role Name (assists in identification during support resolution). E.G.: User Name: SuperSoftware Sudoku User Role Name: SuperSoftware Sudoku Role. Your documentation: You should provide a list of required Privileges for the Integration User Role. You needed to find the entitlements (from the API documentation) and the Privileges (from Learn) in order to develop and test your application with a non-system admin user. It is good practice to share those privileges with your client. Note that if your application is utilizing Three Legged OAuth - which uses the logged in user’s privileges - this step is not required. It is strongly recommended that you include the above information in your client facing documentation. Some DON’Ts 1. NEVER USE OR REQUIRE SYSTEM ADMINISTRATOR as your REST integration user This places your client at risk. A discerning administrator will not install an integration requiring a Role of System Administrator. 2: NEVER ASK YOUR CLIENT TO INSTALL USING THEIR DEVELOPER PORTAL KEY:SECRET Keys and Secrets should never be shared. Keys and Secrets should never stored in remote systems. FWIW: the Developer Portal does not store them either. Production group settings are global to specific to integrations. Key Takeaways Providing the required Privileges to Learn Admins reduces the risk of a failure in integration installation and operation. Blackboard nor you should want to burden clients with figuring out from the API Docs which Entitlements are needed and look up these Privileges on their own so that your application works as expected. Following secure practices around key:secret management create a safer more secure www.",
    "tags": "Learn Rest",
    "url": "/learn/rest/getting-started/releasing-your-integration.html"
  },{
    "title": "Rest and Learn",
    "text": "Managing REST Integrations in Learn: The REST Integrations Tool for System Administrators Overview of the REST API Integrations Tool For the other tasks related in this document, use the REST API Integrations. To navigate to the REST API Integrations tool: Select System Admin in the main screen of Blackboard Learn. Select the REST API Integrations link is in the Building Blocks section: The main page for the REST API Integrations tool: Lists existing integrations Allows you to manage existing integrations Allows you to create new integrations This list will be empty if you have not created any integrations. Create an Integration An integration, here, refers to an external REST application being registered to work in conjunction with Blackboard Learn. Before you create an integration, the best practice is to create a Learn user with entitlements that match those required by the REST application. To create an integration and thereby allow an application to work with your instance of Blackboard Learn: On the REST API Integrations page, select Create Integration. In the Application ID space, enter the application ID proved by the integration’s developers. Select Browse next to Learn User. Search through the list of Blackboard Learn users to find the user that the integration should act as. Select a user that you specially create for the application and that has only the permissions that the integration needs to function properly. For third-party integration, set End User Access to Yes. End users will sign in with their own Blackboard Learn ID to use the integration. Each user’s access is then limited to his or her own permissions. If you set End User Access to No, the integration always has access as if it were the Blackboard Learn user indicated on the form. Submit to save your settings for the integration. Select the Learn user in whose name the application acts. This user must have the entitlements required by the REST Application. For more information about identifying required entitlements, see Converting Documented Entitlements to GUI Privileges, below. Learn user entitlements are allow a REST application to act in your Learn environment. The best practice is to restrict these except as necessary to allow the REST Application to function. The vendor or developer of the REST application should provide a list of required entitlements. NEVER configure a REST application to act as a System Admin user. Doing so gives the REST application full access to all data and operations of your Learn environment possibly resulting in IRREPARABLE harm. If a vendor requests a System Admin user for their application, do not allow it. In such a case, please provide the vendor’s contact and application information to developers@blackboard.com so that we can help the vendor correct the situation. Note: If you are a Blackboard client, a Blackboard Partner / Vendor / Developer of a REST Application should NEVER tell you to go to the developer portal and create an App ID with the associated key/secret to install their application. They should never tell you to apply for a Rate/Site increase for their application. Blackboard DOES NOT support that model. Every REST Application developer should give you an App ID to install their REST App and tell you how to configure a system role for its use. Period. The REST Application developer needs to request the increases they need to run their application themselves. If they ask you to go to developer.blackboard.com and get an App ID/Key/Secret, please tell them that is wrong. They should have exactly one App ID for their production REST application that they are asking you to install. Contractors are an exception to this policy as they are producing an integration on your, the Blackboard client, behalf. Questions regarding the policy and whether you are impacted may be asked here, or posted to developers@blackboard.com. Managing your REST Integration Once you have created a REST integration, you can manage it: Edit the integration settings Set the integration availability Delete the integration Edit a REST Integration The editor displays information about the integration and allows you to change the Learn user that the integration runs as. This allows you to manage the permissions on the integration. To edit an application’s settings, navigate to the REST API Integrations tool. Select Edit from the context menu of the integration that you want to edit. A screen opens like one below. You may use the standard Learn user and role tools to create an integration- specific user. Running an Integration An REST integration can be run in two ways. In both cases, the application is actually remote to the Learn environment. A user selects a link within Learn which calls the remote application A remote system call from the REST application Converting Entitlements to GUI Privileges There are a number of ways to accomplish this. Check out this blog, Bookmarklet To Help Map Entitlements to Permissions Check out this JSHack contributed by Matthew Deeprose. The EntitlementsToAdminGUI worksheet (updated 08/10/2019 9:57 AM) helps identify the entitlements to a string which may be searched on in the role privilege selection page when creating the role for your REST Application user. Paste the documented entitlement from the REST API documentation to column A and the privilege will appear in column B. Here’s a video demonstration. Should the spreadsheet not have what you’re looking for, here’s the way to find these manually: Dropbox - 2018-10-30_13-39-25.FindingPrivilegeForGivenEntitlement.mp4 Delivering your REST Integration For a more detailed process please see Releasing your REST Integration Step 1: NEVER USE OR REQUIRE SYSTEM ADMINISTRATOR as your REST application user. Step 2: You determine from the API Docs which Entitlements are required for the integration. Step 3: You set up a non-System Administrator User associated with the your REST API integration on your test system. Step 4: You utilize your test system and the API Docs to identify the list of Learn Privileges required for the integration. Step 5: You configure your test system integration user appropriately and validate successful integration operation using your identified Learn Privileges Step 6: You provide the client the REST Application Id, a preferred/suggested user and role name (E.G.: Integration User, Integration Role), and a list of required Privileges for the Integration User Role. Step 7: Include information from Step 6 in your client facing documentation. Key takeaway: Providing the required Privileges to Learn Admins reduces the risk of a failure in integration installation and operation. Blackboard nor you should want to burden clients with figuring out from the API Docs which Entitlements are needed and look up these Privileges on their own so that your application works as expected.",
    "tags": "Learn REST",
    "url": "/learn/rest/getting-started/rest-and-learn.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/rest.html"
  },{
    "title": "Rosetta Stone",
    "text": "Learn release names, Versions &amp; Build numbers Overview This topic comes up often regarding Learn versions, “How do I map the Learn release names to the build numbers?” One of our clients referred to finding the answer as “finding the secret decoder ring, or discovering the location of the Rosetta Stone.” Here’s the answer. Do It Yourself You want to know this because this page is infrequently updated. Just log in to Behind the Blackboard and use the search tool to look for the most recent release. I just entered “Q4 2019.” This link came up https://blackboard.secure.force.com/btbb_articleview?id=kA01O000000xVuX. Now scroll down the page and you will see the Upgrade Paths listed, which also maps the Release Names to the Build Numbers as shown below. And there you have it, your very own Secret Decoder Ring mapping of Learn Release Names to Build Numbers. Rosetta Stone &amp; Secret Decoder Ring Blackboard Learn 9.1 Q4 2019 « EOL December 2021 » 9.1 Q4 2019 Cumulative Update 1 (Build:3800.0.1-rel.42+75c791f) Blackboard Learn 9.1 Q2 2019 « EOL June 2021 » 9.1 Q2 2019 Cumulative Update 7 (Build: 3700.0.7-rel.21+54e64bd) 9.1 Q2 2019 Cumulative Update 6 (Build: 3700.0.6-rel.16+b131895) 9.1 Q2 2019 Cumulative Update 5 (Build: 3700.0.5-rel.21+dfdd268) 9.1 Q2 2019 Cumulative Update 4 (Build: 3700.0.4-rel.20+ded7cc5) 9.1 Q2 2019 Cumulative Update 3 (Build: 3700.0.3-rel.35+ec64a31) 9.1 Q2 2019 Cumulative Update 2 (Build: 3700.0.2-rel.36+fbf2221) 9.1 Q2 2019 Cumulative Update 1 (Build:3700.0.1-rel.29+a963bd8) 9.1 Q2 2019 (Build:3700.0.0) LTI 1.3/Advantage Release to Self/Managed-Hosted (Was first availalbe in SaaS 3500.11) Blackboard Learn 9.1 Q4 2018 « EOL December 2020 » 9.1 Q4 2018 Cumulative Update 10 (Build: 3500.0.10-rel.27+b7718ce) 9.1 Q4 2018 Cumulative Update 9 (Build:3500.0.9-rel.12+78adef1) 9.1 Q4 2018 Cumulative Update 8 (Build: 3500.0.8-rel.13+ba67594) 9.1 Q4 2018 Cumulative Update 7 (Build: 3500.0.7-rel.34+6f3e777) 9.1 Q4 2018 Cumulative Update 6 (Build: 3500.0.6-rel.16+7744aa6) 9.1 Q4 2018 Cumulative Update 5 (Build: 3500.0.5-rel.48+1fc210f) 9.1 Q4 2108 Cumulative Update 4 (Build:3500.0.4-rel.19+9180e36) 9.1 Q4 2018 Cumulative Update 3 (Build:3500.0.3-rel.26+06aa766) 9.1 Q4 2018 Cumulative Update 2 (Build:3500.0.2-rel.32+19c67cc) 9.1 Q4 2018 Cumulative Update 1(Build:3500.0.1-rel.59+219b76) : Admin-&gt;LTI, Content Type []Deep Linking Blackboard Learn 9.1 Q2 2018 « EOL June 2020 » 9.1 Q2 2018 (Build:3400.0.0-rel.44+9fb1e0e) 9.1, Q2 2018 Release (Build: 3400.0.1-rel.90+b74efee) : B2s-&gt;LTI, CIM, No Content Type Dropdown Blackboard Learn 9.1 Q4 2017 « EOL Dec 2019 » FIRST AVAILABILITY OF LTI CIM/Deep-linking 1.0 9.1 Q4 2017 CU2 (Build: 3300.0.2-rel.137+ba130da) 9.1 Q4 2017 Cumulative Update 1 (Build: 3300.0.1-rel.60+a05276c) : B2s-&gt;LTI, +CIM, Content Type Dropdown Blackboard Learn 9.1 Q2 2017 « EOL June 2019 » 9.1 Q2 2017 Cumulative Update 2 (Build: 3200.0.2-rel.37+f07d42b) 9.1 Q2 2017 Cumulative Update 2 (Build: 3200.0.2-rel.34+a87152a) 9.1 Q2 2017 Cumulative Update 1 (Build: 3200.0.1-rel.56+af64d14) 9.1 Q2 2017 (Build: 3200.0.0-rel.52+647f084) : LTI still under B2s, No Deep Linking Blackboard Learn 9.1 Q4 2016 « EOL Dec 2018 » 9.1 Q4 2016 Cumlative Update 3 (Build: 3100.0.3-rel.51+917ccd3) Build: 3100.0.2 released to SaaS FDO only - Article # 43586 9.1 Q4 2016 Cumulative Update 1 (Build: 3100.0.1-rel.117+6ef1843) 9.1 Q4 2016 (Build: 3100.0.0-rel.107+401e) FIRST USE OF Tomcat 8 Blackboard Learn 9.1 Q2 2016 « No longer supported » 9.1 Q2 2016 Cumulative Update 5 (Build: 3000.1.5-rel.106+a770c2a) 9.1 Q2 2016 Cumulative Update 4 (Build: 3000.1.4-rel.183+298455c) 9.1 Q2 2016 Cumulative Update 3 (Build: 3000.1.3-rel.70+214db31) 9.1 Q2 2016 Cumulative Update 2 (Build: 3000.1.2-rel.52+af05c84) 9.1 Q2 2016 Cumulative Update 1 (Build: 3000.1.1-rel.20+6fbf7f6 ) 9.1 Q2 2016 (Build: 3000.1.0-rel.52+991d) FIRST USE OF Java 8 Blackboard Learn 9.1 Q4 2015 « No longer supported » 9.1 Q4 2015 Cumulative Update 3 (Build: 9.1.201510.1176878) 9.1 Q4 2015 Cumulative Update 2 (Build: 9.1.201510.1175205) 9.1 Q4 2015 Cumulative Update 1 (LRNSI-21344) 9.1 Q4 2015 (Build: 9.1.201510.1171621)",
    "tags": "Learn",
    "url": "/learn/b2/getting-started/rosetta-stone.html"
  },{
    "title": "Ruby Demo",
    "text": "Demo using Ruby The rest demo script demonstrates authenticating a REST application, management and use of the authorization token, and creating, updating, discovering, and deleting supported Learn objects. Prerequisites You must register a developer account and application in the Developer Portal You must register your application in Blackboard Learn You must also configure the script as outlined in the README for the project This Ruby command line Application allows you to: Authenticate Create, Read, and Update a Data Source Create, Read, and Update a Term Create, Read, and Update a Course Create, Read, and Update a User Create, Read, and Update a Membership Delete created objects in reverse order of create - membership, user, course, term, datasource. All generated output is sent to the terminal. This is not meant to be a Ruby tutorial. It will not teach you to write code in Ruby. It will, however, give a Developer familiar with Ruby the knowledge necessary to build a Web Services integration. Assumptions This help topic assumes the Developer: is familiar with Ruby has installed Ruby and the Ruby rest-client gem. has obtained a copy of the source code and built it in conjunction with the project README.md file. has a REST-enabled Blackboard Learn instance. Code Walkthrough To build an integration with the Blackboard REST Web Services, regardless of the programming language of choice, can really be summed up in two steps: Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the Basic Authentication document. Call the appropriate REST endpoint with the appropriate data to perform the appropriate action. Authorization and Authentication The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A request is made to the token endpoint with a Basic Authorization header containing the base64-encoded key:secret string as its key. The token service returns a JSON object containing the Access Token, the Token Type, and the number of seconds until the token expires. The token is set to expire after one hour, and subsequent calls to retrieve the token will return the same token with an updated expiry time until such time that the token has expired. There is no refresh token and currently no revoke token method. The Ruby code handles this with the following code: bb_rest = RestClient::Resource.new $AUTH_PATH, $KEY, $SECRET bb_rest.post('grant_type=client_credentials', :accept =&gt; :json){ |response, request, result, &amp;block|           case response.code                when 200                     p \"It worked !\"                     token = JSON.parse(response)                     $access_token = token['access_token']                     $auth = \"Bearer \" + $access_token                     p 'Access_Token: ' + $access_token                else                     p response.to_s                     response.return!(request, result, &amp;block)                end   } The JSON response is serialized into the Token object, and you may then retrieve those values from that object. Calling Services The individual service calls are handled in succession in the restdemo.rb file. Each operation and object combination creates the JSON body by instantiating the appropriate JSON object in the form of a String (required if you need to control the content-type, which you do) when necessary, and then generating the appropriate HTTP Request, shipping it to Learn, and serializing the JSON response back into the appropriate object. End points are generally defined as /learn/api/public/v1/&lt;objecttype&gt;/&lt;objectId&gt;. Object ID can be either the pk1, like _1_1, or as thebatchuid. This value should be prepended by externalId:, like externalId:test101. For example, to retrieve a course by the pk1 _1_1, you would call GET /learn/api/public/v1/courses/_1_1. To retrieve by the batchuid test101, you would call GET /learn/api/public/v1/courses/externalId:test101. Create is sent to Learn as a HTTP POST message with a JSON body that defines the object. The endpoint should omit the objectId, as this will be generated on creation. Read is sent to Learn as a HTTP GET message with an empty body. The endpoint should include the objectId being retrieved. Update is sent to Learn as a HTTP PATCH message with a JSON body that defines the object. The endpoint should include the objectId being updated. Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint should include the objectId being deleted. Datasources Create payload = \"{ \\\"externalId\\\":\\\"BBDN-DSK-RUBY\\\", \\\"description\\\": \\\"Demo Data Source used for REST Ruby Demo\\\" }\" RestClient.post($DSK_PATH, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|        case response.code               when 201                 p \"It worked !\"                 datasource = JSON.parse(response)                 $dsk_id = datasource['id']                 p 'Create Datasource: dsk_id=' + $dsk_id          else                 p response.to_s                 response.return!(request, result, &amp;block)          end } Read RestClient.get($DSK_PATH + $dsk_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|            case response.code              when 200                p \"Got Datasource !\" + response.to_s              else                p response.to_s                response.return!(request, result, &amp;block)              end            } Update payload = \"{ \\\"externalId\\\":\\\"BBDN-DSK-RUBY\\\", \\\"description\\\": \\\"Demo Data Source used for REST Ruby Demo - Updated\\\" }\"       RestClient.patch($DSK_PATH + $dsk_id, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|     case response.code       when 200         p 'Updated Datasource: ' + response.to_s       else         p response.to_s         response.return!(request, result, &amp;block)       end     } Delete RestClient.delete($DSK_PATH + $dsk_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|           case response.code             when 204               p \"Datasource Deleted !\"             else               p response.to_s               response.return!(request, result, &amp;block)             end           } Terms Create payload = \"{ \\\"externalId\\\":\\\"BBDN-TERM-RUBY\\\", \\\"dataSourceId\\\":\\\"\" + $dsk_id + \"\\\", \\\"name\\\" : \\\"REST Demo Term - Ruby\\\", \\\"description\\\": \\\"Term Used For REST Demo - Ruby\\\", \\\"availability\\\" : { \\\"available\\\" : \\\"Yes\\\" } }\" RestClient.post($TERM_PATH, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|      case response.code            when 201                   p \"It worked !\"                   term = JSON.parse(response)                   $term_id = term['id']                   p 'Create Term: term_id=' + $term_id            else                   p response.to_s                   response.return!(request, result, &amp;block)            end } Read RestClient.get($TERM_PATH + $term_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|           case response.code             when 200               p \"Got Term !\" + response.to_s             else               p response.to_s               response.return!(request, result, &amp;block)             end           } Update payload = \"{ \\\"externalId\\\":\\\"BBDN-TERM-RUBY\\\", \\\"dataSourceId\\\":\\\"\" + $dsk_id + \"\\\", \\\"name\\\" : \\\"REST Demo Term - Ruby\\\", \\\"description\\\": \\\"Updated Term Used For REST Demo - Ruby\\\", \\\"availability\\\" : { \\\"available\\\" : \\\"Yes\\\" } }\"     RestClient.patch($TERM_PATH + $term_id, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|     case response.code       when 200         p 'Updated Term: ' + response.to_s       else         p response.to_s         response.return!(request, result, &amp;block)       end     } Delete RestClient.delete($TERM_PATH + $term_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|           case response.code             when 204               p \"Term Deleted !\"             else               p response.to_s               response.return!(request, result, &amp;block)             end           } Course Create payload = \"{ \\\"externalId\\\" : \\\"BBDN-Java-Ruby-Demo\\\", \\\"courseId\\\" : \\\"BBDN-Java-Ruby-Demo\\\", \\\"name\\\" : \\\"Course Used For REST Demo - Ruby\\\", \\\"description\\\" : \\\"Course Used For REST Demo - Ruby\\\", \\\"allowGuests\\\" : \\\"false\\\", \\\"readOnly\\\" : \\\"false\\\", \\\"termId\\\" : \\\"\" + $term_id + \"\\\", \\\"dataSourceId\\\" : \\\"\" + $dsk_id + \"\\\", \\\"availability\\\" : { \\\"available\\\" : \\\"Yes\\\" } }\"     RestClient.post($COURSE_PATH, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|     case response.code       when 201         p \"It worked !\"         course = JSON.parse(response)         $course_id = course['id']         p 'Create Course: course_id=' + $course_id       else         p response.to_s         response.return!(request, result, &amp;block)       end     } Read RestClient.get($COURSE_PATH + $course_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|           case response.code             when 200               p \"Got Course !\" + response.to_s             else               p response.to_s               response.return!(request, result, &amp;block)             end           } Update payload = \"{ \\\"externalId\\\" : \\\"BBDN-Java-Ruby-Demo\\\", \\\"courseId\\\" : \\\"BBDN-Java-Ruby-Demo\\\", \\\"name\\\" : \\\"Course Used For REST Demo - Ruby\\\", \\\"description\\\" : \\\"Updated Course Used For REST Demo - Ruby\\\", \\\"allowGuests\\\" : \\\"false\\\", \\\"readOnly\\\" : \\\"false\\\", \\\"termId\\\" : \\\"\" + $term_id + \"\\\", \\\"dataSourceId\\\" : \\\"\" + $dsk_id + \"\\\", \\\"availability\\\" : { \\\"available\\\" : \\\"Yes\\\" } }\"     RestClient.patch($COURSE_PATH + $course_id, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|     case response.code       when 200       p 'Updated Course: ' + response.to_s       else         p response.to_s         response.return!(request, result, &amp;block)       end     } Delete RestClient.delete($COURSE_PATH + $course_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|           case response.code             when 204               p \"Course Deleted !\"             else               p response.to_s               response.return!(request, result, &amp;block)             end           } Users Create payload = \"{ \\\"externalId\\\" : \\\"bbdnrestdemorubyuser\\\", \\\"userName\\\" : \\\"restrubyuser\\\", \\\"password\\\" : \\\"Bl@ckb0ard!\\\", \\\"studentId\\\" : \\\"restrubyuser\\\", \\\"dataSourceId\\\" : \\\"\" + $dsk_id + \"\\\", \\\"name\\\" : { \\\"given\\\" : \\\"Ruby\\\", \\\"family\\\" : \\\"Rest Demo\\\" }, \\\"contact\\\" : { \\\"email\\\" : \\\"developers@blackboard.com\\\" }, \\\"availability\\\" : { \\\"available\\\" : \\\"Yes\\\" } }\"         RestClient.post($USER_PATH, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|       case response.code         when 201           p \"It worked !\"           user = JSON.parse(response)           $user_id = user['id']           p 'Create User: user_id=' + $user_id         else           p response.to_s           response.return!(request, result, &amp;block)         end       } Read RestClient.get($USER_PATH + $user_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|             case response.code               when 200                 p \"Got User !\" + response.to_s               else                 p response.to_s                 response.return!(request, result, &amp;block)               end             } Update payload = \"{ \\\"externalId\\\" : \\\"bbdnrestdemorubyuser\\\", \\\"userName\\\" : \\\"restrubyuser\\\", \\\"password\\\" : \\\"Bl@ckb0ard!\\\", \\\"studentId\\\" : \\\"restrubyuser\\\", \\\"dataSourceId\\\" : \\\"\" + $dsk_id + \"\\\", \\\"name\\\" : { \\\"given\\\" : \\\"Ruby\\\", \\\"family\\\" : \\\"Rest Demo\\\", \\\"middle\\\" : \\\"updated\\\" }, \\\"contact\\\" : { \\\"email\\\" : \\\"developers@blackboard.com\\\" }, \\\"availability\\\" : { \\\"available\\\" : \\\"Yes\\\" } }\"         RestClient.patch($USER_PATH + $user_id, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|       case response.code         when 200         p 'Updated User: ' + response.to_s         else           p response.to_s           response.return!(request, result, &amp;block)         end       } Delete RestClient.delete($USER_PATH + $user_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|           case response.code             when 204               p \"User Deleted !\"             else               p response.to_s               response.return!(request, result, &amp;block)             end           } Memberships Create payload = \"{ \\\"courseRoleId\\\" : \\\"Student\\\", \\\"dataSourceId\\\" : \\\"\" + $dsk_id + \"\\\", \\\"availability\\\" : { \\\"available\\\" : \\\"Yes\\\" } }\"         RestClient.put($COURSE_PATH + $course_id + '/users/' + $user_id, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|       case response.code         when 201           p \"It worked !\"           membership = JSON.parse(response)           $created = membership['created']           p 'Create Membership: ' + $created         else           p response.to_s           response.return!(request, result, &amp;block)         end       } Read RestClient.get($COURSE_PATH + $course_id + '/users/' + $user_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|           case response.code             when 200               p \"Got Membership !\" + response.to_s             else               p response.to_s               response.return!(request, result, &amp;block)             end           } Update payload = \"{ \\\"userId\\\" : \\\"\" + $user_id + \"\\\", \\\"courseId\\\" : \\\"\" + $course_id + \"\\\", \\\"courseRoleId\\\" : \\\"Instructor\\\", \\\"dataSourceId\\\" : \\\"\" + $dsk_id + \"\\\", \\\"availability\\\" : { \\\"available\\\" : \\\"Yes\\\" } }\"         RestClient.patch($COURSE_PATH + $course_id + '/users/' + $user_id, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|       case response.code         when 200         p 'Updated Membership: ' + response.to_s         else           p response.to_s           response.return!(request, result, &amp;block)         end       } Delete RestClient.delete($COURSE_PATH + $course_id + '/users/' + $user_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block|         case response.code           when 204             p \"Membership Deleted !\"           else             p response.to_s             response.return!(request, result, &amp;block)           end         } Conclusion All of the code snippets included in this document at included in a sample REST Demo Ruby application available on GitHub. There is a README.html included that talks more specifically about building and running the code. Feel free to review the code and run it against a test or development Learn instance to see how it works.",
    "tags": "Learn Rest",
    "url": "/learn/rest/examples/ruby-demo.html"
  },{
    "title": "Scan tool for Learn SaaS",
    "text": "Building Block Scan Tool for Blackboard Learn As of Blackboard Learn SaaS version 3700.11.0, including 9.1 Q4 2019 and higher, you now have the ability to scan any installed Building Block for API changes and readiness for Java 11! You should ONLY run this on your staging environment. It can be resource- intensive The process is really quite simple. The scanning tool can be turned on in a browser by loading the following URL: https://&lt;your Blackboard domain&gt;/webapps/portal/support.jsp?Action=toggleDevOnlyRestEndpoints The resulting screen will look like this: Notice the DevOnly endpoint status at the bottom of the screen shot. This is how you can tell whether you enabled or disabled the scanner. This endpoint is a toggle; calling it twice will turn it off. This endpoint is also only valid in your current browser session. If you close the browser, the scanning tool will be turned off. Once this is completed, you can scan any currently installed Building Block. Here are the details: Endpoint: https://&lt;your Blackboard domain&gt;/learn/api/v1/healthCheck/deepb2s The endpoint takes the following query parameters Parameter Description Example handle The plugin handle for the Building Block handle=myB2 vendor The vendor id for the Building Block vendor=bbdn lookAtEverything Configure the scanner to check for all options lookAtEverything=true onlyReportDependencyProblems Only report issues with libraries in use onlyReportDependencyProblems=true skipReportingB2Overrides Don’t report on methods overridden in the Building Block skipReportingB2Overrides=true groupDependencyIssues Group dependency issues together groupDependencyIssues=true As an example, to test the building block in our example, you would load the following URL: https://&lt;your Blackboard domain&gt;/learn/api/v1/healthCheck/deepb2s?handle=myB2&amp;vendor=bbdn&amp;lookAtEverything=true&amp;onlyReportDependencyProblems=true&amp;skipReportingB2Overrides=true&amp;groupDependencyIssues=true The result of loading this endpoint is a JSON body containing information about the Building Block and any reported discrepancies. Here is an example of the output from running this scanner against the youtube mashup Building Block.",
    "tags": "Learn b2",
    "url": "/learn/b2/resources/scan-tool-learn-saas.html"
  },{
    "title": "Schema Definitions",
    "text": "Schema Definitions This article discusses the configuration and data required to define schema elements in a Building Block. Directory Structure Schema definitions are contained within a simple directory structure with a specific layout including table definitions, SQL scripts for various stages of the update process, views, functions, stored procedures, etc. Schema.xml - A required file that defines the table structure to install in the Learn database. datatemplates - a directory containing delimited files used as seed data for tables defined in schema.xml functions, stored-procedures, triggers, views - user-defined functions, stored procedures, triggers, and views, respectively pre_update_sql - Scripts that are run before DDL updates post_schema_update_sql - Scripts that are run after DDL updates post_update_sql - Scripts that are run after post_schema_update_sql Note that for all objects defined from files (functions, triggers, stored procedures, and views), there are a handful of constraints on the file’s structure - Only a single object may be defined per file The file name must be the same as the object name (with the exception of the SQL and db-type extension) On Oracle, create statements do not need to use the or replace clause, as the installation code automatically drops all objects, based on the file name Manifests Each directory containing raw SQL objects (view definitions, pre- and post- update scripts, etc.) must include a manifest.txt file to specify object creation or script execution order in order to ensure compilation dependencies are met. The manifest is simply a list of newline-separated script names (without the database-specific suffix). Schema.xml Format The main file, schema.xml is in the root of the directory, and is a very straightforward representation of the application’s table structure. Keep in mind it is built to support the set of data definitions that Blackboard supports in its database implementation, so there is not necessarily fine- grained control over the creation of things like indexes. Schema Element The root element is the “schema” - it is a simple container, with no processed attributes. As with all elements, may be commented via attribute or element. Except for comment, the only other element that appears under schema is table Table Element The basic table definition is very simple - a single attribute, “name”. Tables may contain the following elements: column. One or more columns may be defined. index. Any number of indexes may be defined. primary-key. Only a single primary key may be defined for the table. foreign-key. Any number of foreign keys may be defined. Table names MUST be prefixed with the vendor-id from the bb-manifest.xml &lt;table name=\"bb_custom_table\"&gt; &lt;comment&gt;A table to store custom data for the sample&lt;/comment&gt; &lt;!-- additional definitions --&gt; &lt;/table&gt; Column Element Each table must contain one or more columns to define the data that can be stored. name Required. The column name data-type Required. The type to use for the column; the schema file uses a generic syntax based on SQL Server, that gets translated to a database-specific type. nullable Flags whether the column can contain SQL NULL values. Default is ‘true’. default The value to insert in the database if none is supplied from the application tier. If the type is a string, this attribute is a literal AND MUST INCLUDE SINGLE QUOTES. identity Flags whether the column should be treated as an identity column. Default is ‘false’. On SQL Server, the column will get created as an auto-increment identity column. On Oracle, a sequence will be created. Column Constraints The following table shows the data types that may be referenced in the column definitions, and correspond to data types in use by the Blackboard application. Some of the types, such as “int” are used as synonyms for an underlying type commonly used in the Learn application, and don’t support the same specifiers that may be used when creating a similar column using raw DDL. The conventions already in use by the Blackboard database affect many of these specifications - for example, because of difference in the database characterset and the NLS characterset, text fields must be explicitly designed for single- vs. multi-byte data. nvarchar Used for text that may contain multi-byte characters. All user-entered data should use this type. Additionally, a length specifier is required (e.g., nvarchar(50)), just as if the type were being directly defined with DDL. varchar Used for text that will only contain ASCII or ISO-8859-1 characters. This is only recommended for fields that will store known inputs. As with nvarchar, a length specifier is required. int An integer value, mapped to numeric(38) in Oracle and ‘int’ on SQL Server char A fixed length, non-internationalized string. A length specifier must be provided. &lt;column name=\"batch_uid\" data-type=\"nvarchar(256)\" nullable=\"true\" /&gt; &lt;column name=\"user_id\" data-type=\"nvarchar(50)\" nullable=\"false\" /&gt; Some Blackboard Conventions The following represents a sample of data type conventions used by Blackboard- defined schema. Mapping boolean values. Data type char(1), with a constraint limiting the values to Y/N, named with a _ind (for “indicator”) suffix. Primary keys. Data type int, name with _pk1 suffix. Column Constraints Constraints on the columns values are defined with the value-constraint element. A single, required name attribute must be provided to identify the constraint. Each accepted value is defined with a child accepted-value element, with a single, mandatory value attribute. Unlike default values defined on columns, constraint values do not need the quote literals. &lt;column name=\"available_ind\" data-type=\"char(1)\" default=\"'Y'\" nullable=\"false\"&gt; &lt;value-constraint name=\"indicator57\"&gt; &lt;accepted-value value=\"Y\"/&gt; &lt;accepted-value value=\"N\"/&gt; &lt;/value-constraint&gt; &lt;/column&gt; Primary Key name Required. The name of the constraint that will be created in the database. Primary keys must contain one columnref subelement that includes a single attribute, name, that references the column name to include in the primary key. In SQL Server, the key is mapped as an identity field with an auto- incremented value. On Oracle, a sequence is automatically created with the table name plus _seq suffix. Keep that in mind when creating table names, as there is an Oracle limit of 30 characters for object names. So, in practice, names defined in the schema XML must be shorter than 26 characters (because the automatically applied suffixes will extend the object name) &lt;primary-key name=\"domain_pk\" comment=\"[Table:domain][Primary-key:domain_pk] on Column pk1 .\"&gt; &lt;columnref name=\"pk1\" /&gt; &lt;/primary-key&gt; Indexes and Uniqueness Constraints Indexes may be defined via the index element. name An identifier for the index; Blackboard naming conventions typically include the table name with a suffix of ‘if’, ‘ak’, or ‘ie’, followed by a number. unique True/false flag indicating whether a uniqueness constraint should be applied &lt;index name=\"course_users_ak1\" unique=\"true\"&gt; &lt;columnref name=\"users_pk1\" /&gt; &lt;columnref name=\"crsmain_pk1\" /&gt; &lt;/index&gt; &lt;index name=\"course_users_ie1\" unique=\"false\"&gt; &lt;columnref name=\"enrollment_date\" /&gt; &lt;/index&gt; Foreign Keys References to data stored in other tables are defined via the foreign-key element. name Required. An identifier for the referential integrity constraint created by the key. The Blackboard naming convention is table name, followed by ‘fk’, followed by a numeric suffix to distinguish multiple constraints. E.g.,announcements_fk2. reference-table Required. Indicates which table is referenced by columnref. on-delete Indicates what action should be taken if the referenced column is deleted. Valid values are setnull, which means the column should be set to null, and delete, which means the row should be deleted. If setnull is specified, the column specified in columnref must have nullable=”true”. Although on-delete is not a required attribute, it is very important to consider how a core Blackboard table is being referenced. Failure to specify an appropriate on-delete action could result in core functionality breaking (e.g. it could cause deletion of a core object to fail). &lt;foreign-key name=\"course_users_fk2\" reference-table=\"course_main\" comment=\"This is a Foreign Key referencing the primary key of the [AS_CORE].course_main table. \"&gt; &lt;columnref name=\"crsmain_pk1\" /&gt; &lt;/foreign-key&gt; Comments Comments may be included on any element, via a comment element or attribute. The main factor in which kind of comment is used is simply source readability. Longer comments should be created via elements. In either case, HTML must be escaped, as there is no defined namespace. While no validation is used in processing schema XML and HTML tags would not cause a failure, escaping/encoding is considered a best practice in order to avoid potential markup conflicts (“table” for example). Cross-Database Support The Blackboard platform supports both SQL Server and Oracle. While the schema definition framework transparently converts the generic XML syntax to the correct flavor, the same is not true for SQL scripts. That means developers should provide a version for the database versions supported using a simple extension to indicate the target database: db-oracle for Oracle-specific scripts and db-mssql for SQL Server-specific scripts.",
    "tags": "Learn b2",
    "url": "/learn/b2/opendb/schema-definitions.html"
  },{
    "title": "Tutorial - Schema.XML",
    "text": "Tutorial - Schema.XML Building Blocks often require the means to store data specific to their function. This was often accomplished using local flat files stored in the Building Block directory or by utilizing an external database. Neither solution was desirable from a scalability or performance perspective, and certainly limited the sharing of solutions due to additional constrains for hardware or software. Staring with Release 9.1 Service Pack 6, Blackboard provided to Building Blocks the ability to define schema elements in their .war file that would get automatically installed and managed in the Learn database schema. The document used to define the schema is referred to as Schema.xml. Including a schema.xml document in your project means that your Building Block can define and install schema elements via special configuration files referenced from the bb-manifest and managed by included sql. This means you no longer need to establish ‘out-of-band’ communication to external databases or write data to the Building Block directory to save information necessary to the function of your Building Block. Schema.xml Example Project contains a sample project demonstrating the use schema.xml within a building block. Accessing your Building Block Tables contains a sample project demonstrating how to use the Learn Data Access Object model for accessing your Building Block data tables. Preparing Learn for using schema.xml enabled Building Blocks By default Blackboard Learn does not allow installation of schema.xml enabled Building Blocks. Administrators must enable this functionality from the Building Blocks management section of the admin panel. The allowed schema actions are specified from the “Global Settings” screen, including: Prevent any Building Block from creating custom database objects This option is the default - no schema may be installed by any Building Block Prompt each time a Building Block wants to create custom database objects This option prompts the administrator - previewing the tables/objects that would be created. Allow any Building Block to create custom database objects option simply processes the objects, without prompting the admin. That option is only recommended for development to facilitate rapid iteration. Best practice is to choose the “prompt” option, and then only after attempting to install a Building Block and seeing the error message. NOTE: These settings are do not apply to Blackboard-authored, signed Building Blocks as that would disrupt the operation of some key features, such as the Wiki, that are delivered via Building Blocks. A Word of Caution With great power comes great responsibility - there are a few things to keep in mind when designing the schema using this mechanism: Schema.xml object prefixes - Database objects must be prefixed with the vendor-id in the Building Block manifest (the Building Block installer will complain if the prefixes do not match). This will be explained further in the examples section. Minimize your dependency on Blackboard objects - If you do need to link to a Blackboard database object, ensure that the relationship does not interfere with standard Blackboard processing - you must specify an on-delete action (cascade or setnull) for managing the Buidling Block table data on foreign key data removal. The Blackboard schema is not an officially supported integration API, and will change from release to release. Test, test, test - if you do reference a core entity, such as a course or user, make sure you can still delete that entity Cross-Database Support The Blackboard platform supports both SQL Server, Oracle, and for development purposes (as of Learn 9.1SP14) PostgreSQL. While the schema definition framework transparently converts the generic XML syntax to the correct flavor, the same is not true for SQL scripts. That means developers should provide a database specific schema definition for each database version supported. Getting Started: An Overview Use of schema.xml is comprised of three basic concepts which will be covered in the remainder of this article: schema.xml directory structure schema.xml file format sql support Directory Structure The Building Block schema is defined primarily via a file called schema.xml, which is part of a directory structure that also defines various SQL scripts - procedures, functions, views, etc. One or more schema definition directories are referenced via the schema-dirs element in the bb-manifest, as follows (it is recommended practice to specify using a vendor ID prefix): bb-manifest.xml     &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;      &lt;manifest&gt;          &lt;plugin&gt;              &lt;name value= \"Zeta TM a task manager for the rest of us\"/&gt;              &lt;handle value= \"ztm1\"/&gt;                   ...             &lt;vendor&gt;                  &lt;id value=\"zeta\"/&gt;                      ...             &lt;/vendor&gt;              ...             &lt;schema-dirs&gt;                  &lt;schema-dir dir-name=\"zeta-tasks\"/&gt;                  &lt;schema-dir dir-name=\"zeta-stats\"/&gt;              &lt;/schema-dirs&gt;          &lt;/plugin&gt;          ...      &lt;/manifest&gt; The dir-name attribute is evaluated first against the webapp root, then against WEB-INF. The schema.xml should be in the WEB-INF directory in a sub- directory labeled ‘schema’. All other schema related files and scripts are in sub-directories. Below is the start of a WEB-INF directory structure for a Building block based on the above bb-manifest.xml entry:     WEB-INF          web.xml          bb-manifest          schema              zeta-tasks                  schema.xml              zeta-stats                  schema.xml The database attribute, noted as the dir-name in the above entry, indicates which schema the objects should be created in. By default, the objects are created in the transactional schema and require no additional specification. For example: ‘zeta-tasks’. Tables and other objects can also be created in the reporting schema by using the value “-stats”. For example: ‘zeta-stats’. Schema Directory Structure Schema definitions are contained within a directory structure with a specific layout including table definitions, SQL scripts for various stages of the update process, views, functions, stored procedures, etc. Once you have the directory structure and empty schema.xml files for the desired schemas in place you then define the SQL that will set up and manage the tables in the Building Block schema. There are five basic groups of files which may be created under the database directory: datatemplates - a directory containing delimited files used as seed data for tables defined in schema.xml functions, stored-procedures, triggers, views - user-defined functions, stored procedures, triggers, and views, respectively pre_update_sql - Scripts that are run before DDL (Data Definition Language) updates post_schema_update_sql - Scripts that are run after DDL updates post_update_sql - Scripts that are run after post_schema_update_sql Adding these directories for a schema could result in the following directory structure:     WEB-INF          web.xml          bb-manifest          schema              zeta-tasks                  schema.xml                  datatemplates                  pre_update_sql                  post_schema_update_sql                  post_update_sql                  functions                  stored_procedures                  triggers                  views              zeta-stats                  schema.xml                  pre_update_sql                  post_schema_update_sql                  post_update_sql                NOTE: You are not required to specify files for each operation - only those required for proper instantiation of the Building Block schema per it’s functional requirements. File Structure Constraints All objects defined from files (functions, triggers, stored procedures, and views), have a handful of constraints on the file’s structure Only a single object may be defined per file The file name must be the same as the object name (with the exception of the SQL and db-type extension) On Oracle, create statements do not need to use the or replace clause, as the installation code automatically drops all objects, based on the file name Cross-Database SQL As previously noted, schema.xml supports the same databases that Learn supports, but any SQL used in creation, updating, configuration, triggers, etc., must be database specific. This is supported by adding the appropriate extension to the SQL files that you add to the operation directories: Oracle: .db-oracle MSSQL: .db-mssql PostgreSQL: .db-pgsql NOTE: generic SQL may use a .sql extension Processing Order When providing a directory containing raw SQL objects (view definitions, pre- and post-update scripts, etc.) it may be important to specify object creation or script execution order to ensure compilation dependencies are met. This is done by providing an entries in the schema.xml for each operation directory. This is covered in more detail in the below section Schema.xml format. Schema.xml Format The main file, schema.xml is in the root of the directory, and is a very straightforward representation of the application’s table structure. Keep in mind it is built to support the set of data definitions that Blackboard supports in its database implementation, so there is not necessarily fine- grained control over the creation of things like indexes. Schema Element The root element is the “schema” - it is a simple container, with no processed attributes. As with all elements, may be commented via attribute or element. Except for , the only other element that appears under schema is &lt;table&gt; Table Element The basic table definition is very simple - a single attribute - name. Tables may contain the following elements: : One or more columns may be defined. : Any number of indexes may be defined. : Only a single primary key may be defined for the table. : Any number of foreign keys may be defined. Table names MUST be prefixed with the vendor-id from the bb-manifest.xml Schema.xml sample: Click here to review the schema.xml file in the sample schema code on Github. Column Element Each table must contain one or more columns to define the data that can be stored. name: Required. The column name. data-type: Required. The type to use for the column; the schema file uses a generic syntax based on SQL Server, that gets translated to a database-specific type. nullableFlags: whether the column can contain SQL NULL values. Default is ‘true’. default: The value to insert in the database if none is supplied from the application tier. If the type is a string, this attribute is a literal AND MUST INCLUDE SINGLE QUOTES. identityFlags: whether the column should be treated as an identity column. Default is ‘false’. On SQL Server, the column will get created as an auto-increment identity column. On Oracle, a sequence will be created. Supported Column Data Types The following table shows the data types that may be referenced in the column definitions, and correspond to data types in use by the Blackboard application. Some of the types, such as “int” are used as synonyms for an underlying type commonly used in the Learn application, and don’t support the same specifiers that may be used when creating a similar column using raw vendor specific Data Definition Language (DDL). The conventions already in use by the Blackboard database affect many of these specifications - for example, because of difference in the database characterset and the NLS characterset, text fields must be explicitly designed for single- vs. multi-byte data. nvarchar: Used for text that may contain multi-byte characters. All user-entered data should use this type. Additionally, a length specifier is required (for example, nvarchar(50)), just as if the type were being directly defined with DDL. varchar: Used for text that will only contain ASCII or ISO-8859-1 characters. This is only recommended for fields that will store known inputs. As with nvarchar, a length specifier is required. int: An integer value, mapped to numeric(38) in Oracle and ‘int’ on SQL Server char: A fixed length, non-internationalized string. A length specifier must be provided. date clob Some Blackboard Conventions The following represents a sample of data type conventions used by Blackboard- defined schema. Mapping boolean values. Data type char(1), with a constraint limiting the values to Y/N, named with a _ind (for “indicator”) suffix. Primary keys. Data type int, name with _pk1 suffix. Column Constraints Constraints on the columns values are defined with the value-constraint element. A single, required name attribute must be provided to identify the constraint. Each accepted value is defined with a child accepted-value element, with a single, mandatory value attribute. Unlike default values defined on columns, constraint values do not need the quote literals.      &lt;column name=\"available_ind\" data-type=\"char(1)\" default=\"'Y'\" nullable=\"false\"&gt;            &lt;value-constraint name=\"indicator57\"&gt;            &lt;accepted-value value=\"Y\"/&gt;            &lt;accepted-value value=\"N\"/&gt;            &lt;/value-constraint&gt;       &lt;/column&gt; Primary Key name: Required. The name of the constraint that will be created in the database. Primary keys must contain one columnref sub-element that includes a single attribute, name, that references the column name to include in the primary key. In SQL Server, the key is mapped as an identity field with an auto- incremented value. On Oracle, a sequence is automatically created with the table name plus _seq suffix. IMPORTANT: Keep that in mind when creating table names, as there is an Oracle limit of 30 characters for object names. So, in practice, names defined in the schema XML must be shorter than 26 characters (because the automatically applied suffixes will extend the object name)                 Indexes and Uniqueness Constraints Indexes may be defined via the index element. name: An identifier for the index; Blackboard naming conventions typically include the table name with a suffix of ‘if’, ‘ak’, or ‘ie’, followed by a number. unique: True/false flag indicating whether a uniqueness constraint should be applied      &lt;index name=\"course_users_ak1\" unique=\"true\"&gt;            &lt;columnref name=\"users_pk1\" /&gt;            &lt;columnref name=\"crsmain_pk1\" /&gt;       &lt;/index&gt;        &lt;index name=\"course_users_ie1\" unique=\"false\"&gt;            &lt;columnref name=\"enrollment_date\" /&gt;         &lt;/index&gt; Foreign Keys References to data stored in other tables are defined via the foreign-key element. name: Required. An identifier for the referential integrity constraint created by the key. The Blackboard naming convention is table name, followed by ‘fk’, followed by a numeric suffix to distinguish multiple constraints. For example: announcements_fk2. reference-table: Required. Indicates which table is referenced by columnref. on-delete: Indicates what action should be taken if the referenced column is deleted. Valid values are setnull, which means the column should be set to null, and delete, which means the row should be deleted. If setnull is specified, the column specified in columnref must have nullable=”true”. Although on-delete is not a required attribute, it is very important to consider how a core Blackboard table is being referenced. Failure to specify an appropriate on-delete action could result in core functionality breaking (for example, it could cause deletion of a core object to fail).      &lt;foreign-key name=\"course_users_fk2\" reference-table=\"course_main\" comment=\"This is a Foreign Key referencing the primary key of the [AS_CORE].course_main table. \"&gt;            &lt;columnref name=\"crsmain_pk1\" /&gt;      &lt;/foreign-key&gt; Comments Comments may be included on any element, via a comment element or attribute. The main factor in which this kind of comment is used is simply source readability. Longer comments should be created via elements. In either case, HTML must be escaped, as there is no defined namespace. While no validation is used in processing schema XML and HTML tags would not cause a failure, escaping/encoding is considered a best practice to avoid potential markup conflicts (“table” for example). For examples of schema.xml documents, take a look in the /usr/local/blackboard/system/database/vi/* directory. For an example of how a Building Block may create schema tables using schema.xml, see Schema.xml Example Project. Other useful information: Schema.xml validator Bb-manifest validator",
    "tags": "Learn b2",
    "url": "/learn/b2/opendb/schema-xml.html"
  },{
    "title": "Secure Coding Practices",
    "text": "Secure Coding Practices Blackboard takes security seriously and extends that same outlook to developers by enabling them to apply industry standards of best practice to their Building Blocks. Blackboard Learn has integrated with a best practices open source security library from the Open Web Application Project’s (OWASP) Enterprise Security API (ESAPI). This security library ships by default installed on Blackboard Learn through a Building Block called “ESAPI Security Module” and is required for system operation. Blackboard strongly recommends all Building Block developers leverage this new Security API based on OWASP ESAPI for Java and ESAPI for JavaScript. You may read more about the ESAPI library and secure development on Learn at help.blackboard.com. Secure Coding Best Practices As part of secure coding practices, input that may be influenced by users, whether trusted or not, should be validated on the server-side before processing (input validation) as well as prior to display (output validation or escaping). This helps ensure system resiliency and prevents security issues such as cross-site scripting. Input Validation: When receiving input from the request, always validate and always validate server-side. Output Validation / Encoding / Escaping: When displaying any input, always ensure it is displayed in the correct context that it will be embedded in. In addition to input and output validation Learn also affords the ability to encrypt data during context passing.",
    "tags": "Learn b2",
    "url": "/learn/b2/best-practices/secure-coding-practices.html"
  },{
    "title": "Security and Tokens",
    "text": "Security and Tokens Blackboard Collaborate relies on JSON web tokens (JWT) to authenticate and authorize incoming REST API calls. You can read more about the JWT standard here. A JSON web token can be signed with either RSA or HMAC. RSA allows the REST Client to sign the JWT with public and private keys via x.509 certificates. HMAC allows the JWT to be signed with a shared secret. Either way, the data can be trusted because it is digitally signed with mutually known credentials. [Here is a very simple sample Python script] (https://github.com/ryanhaber/Blackboard-REST-SDK-python/blob/master/bb-collab-simple-sample-get-users.py.) that uses a correctly formed JWT assertion to request an access token and then uses the access token to make a single API request JWT Assertion To get API access to Blackboard Collaborate, you must create a JWT assertion. A JWT assertion is a JSON web token request for access. It includes: header payload signature The header and payload are each base64 encoded and the three parts are separated with a dot, resulting in a token in this format: encodedheader.encodedpayload.signature and resembles the following: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJteS1jb2xsYWItcmVzdC1r ZXkiLCJzdWIiOiJteS1jb2xsYWItcmVzdC1rZXkiLCJleHAiOiIxNDgwNDU3NzYzOTg4I n0.7eElTSzDRfWaQlKeVaMDJlN07-_dmNq7nRP82pm47kY JWT Header The header is a JSON object with that identifies the algorithm used to generate the signature and the type of token being created. In this example, the application is signing the data with HMAC-SHA 256 and requesting a JSON Web Token. { \"alg\": \"HS256\", \"typ\": \"JWT\" } To create the encodedheader part of the token, base64 encode this JSON. JWT Payload The payload contains information about the calling application that uniquely identifies the client to the REST server. Blackboard Collaborate REST APIs require these pieces of information: The issuer of the request, which is the Collaborate REST API key The subject of the request, which must be the same as the issuer Expiration time of the assertion, expressed in UNIX epoch time, within 5 minutes of the time of the request For example: { \"iss\": \"my-collab-rest-key\", \"sub\": \"my-collab-rest-key\", \"exp\": \"1480457763988\" } Base64 encode the payload and append it to the based64-encoded header, separated by a dot. JWT Signature The signature is basically the string created above (encodedheader.encodedpayload), signed using the algorithm specified in the header and the REST API secret provided by Blackboard. The resulting string must be appended to encodedheader.encodedpayload, separated with a dot. Building a JWT Request To request an access, you must make a POST request to the Collaborate API /token endpoint, like the following. POST /token?grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&amp;assertion=eyJhbGciOiJIUzI1NiIsIn R5cCI6IkpXVCJ9.eyJpc3MiOiJteS1jb2xsYWItcmVzdC1rZXkiLCJzdWIiOiJteS1jb2xsYWItcmVzdC1rZXkiLCJleHAiOiIx NDgwNDU3NzYzOTg4In0.7eElTSzDRfWaQlKeVaMDJlN0-_7dmNq7nRP82pm47kY Also note: Include a grant_type parameter. The grant_type must always be set to urn:ietf:params:oauth:grant-type:jwt-bearer in Collaborate requests. This grant_type and the assertion are added as query parameters to the Collaborate /token endpoint and requested as a POST. Include a header using for content-Type which is set to form/urlencoded. Using the JWT Token A properly formed POST to /token returns an access token. To authorize a request to Collaborate, add this access token as a Bear token in your request’s authorization header. The authorization header will look like the following. Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0ODAzNzM2ODEsInN1YiI6ImJiQ29sbGFiQXBpIiwiaXNzIj oiYmJDb2xsYWJBcGkiLCJ0eXBlIjoxLCJjb25zdW1lciI6IjkxRjA1RENEODhGQzQzRkMwMUY0NjI5MDEwQzNFQjc3IiwiaWF0Ijo xNDgwMzczMzIxfQ.Vi7jejTo380R_DYWO202q3dvd0XYsQbmpFd3DCgku64 Additional Resources JSON Web Tokens are a widely adopted standard in modern applications, and thus, there are a ton of resources available for developers interested in JWT beyond the scope of Blackboard Collaborate. JWT.io: This site is dedicated to assisting developers trying to build JWT-enabled applications. There is a debugger that allows you to manually input your secret and your header and payload and generate an assertion. There is also an extensive list of available libraries in multiple languages that handle the bulk of the JWT creation. RFC 7519: This is the actual standard specification document.",
    "tags": "Collaborate",
    "url": "/collaborate/security-and-tokens.html"
  },{
    "title": "Security and Tokens",
    "text": "Security and Tokens - Authentication Using the Ultra Extension Framework (UEF) is a powerful way to enhance the way students learn and teachers teach. The framework itself is pretty easy to use. As with most integration types, the biggest hurdle is figuring out the proper method of authenticating your tool and authorizing its use. The purpose of this document is to shed some light on this process in the hopes that it will help you get building your code faster. This document makes a few assumptions. We assume you have: Registered your application on the developer portal Authorized your application (LTI and REST) on the Learn instance in question We won’t go into this too much in this document as this is covered elsewhere. If you need more information, click the links above to read through those processes. There are a couple of things to keep in mind, however. When registering your application in the developer portal, if you plan to use LTI 1.3, you will register that at the same time. In addition, when you authorize your application in your Learn instance, you will need to set End User Access to ‘Yes’ and Allow application to Act as User to ‘Yes’. And when you register your LTI application, you will need to click the context menu next to the domain and click Manage Placements. You will need to create a placement and be sure to select Ultra Extension as the placement type. Before we get started, we also need to keep in mind that your Ultra Extension will run in an iframe. As such, any cookies your application relies on will need to be set with SameSite=None and Secure=True. If you do not do this, most modern browsers will block these cookies, causing your application to fail. You can read more information on SameSite cookies here How Authentication/Authorization Works Ok, now that we have talked through the prerequisites and iframe/cookie connection, we are ready to get started. At its most basic, authenticating and authorizing your Ultra Extension is fairly straightforward. Everything starts when a user logs in to Blackboard Learn. At login, Ultra looks for Ultra Extension placements. When it finds one, a Learning Tools Interoperability (LTI) launch takes place. UEF can support either LTI 1.1 or 1.3 launches. LTI 1.3 is the preferred method. Once the LTI handshake is complete, your app must then initiate a Learn REST token retrieval. Important to note, this must be a done with the Authorization Code workflow. UEF runs at login on behalf of a specific user, and as such, the REST token must also act on behalf of that user. We will talk more about that in a bit. Once the token is obtained, your application will render javascript, which now lives in a hidden iframe in Ultra. You Javascript can then attach to a message channel and being talking with Ultra! LTI Launches LTI is a powerful mechanism for allowing a trusted launch with context from one system to another. LTI 1.3 gives you access to the most secure method possible, and it is for this reason that we consider this a best-practice for UEF. Bear in mind, that because it is more secure, it is also a bit more complicated. The basic workflow can be summed up in a few steps: The user logs in UEF issues a GET to your login URL with query parameters that include information like the issuer and the target link url Your tool redirects the launch to the developer portal to perform the OIDC login Upon success, Learn issues a GET to your launch URL with the JWT containing the contextual information Your application verifies the signature using the public/private key set Your application does what it does best If you want an excellent overview of this process, you can check out this youtube video by Claude Vervoort. Adding OAuth 2.0 Authorization Code Flow Authorization Code token management is a standard way of authenticating against REST APIs across the web. For Blackboard, we have this documented ««link»» here. This is a little tricky when combining with LTI for the purposes of UEF. Let’s look at an updated version of the steps listed above to highlight how this is done with regards to UEF specifically. The user logs in UEF issues a GET to your login URL with query parameters that include information like the issuer and the target link url Your tool redirects the launch to the developer portal to perform the OIDC login Upon success, Learn issues a GET to your launch URL with the JWT containing the contextual information Your application verifies the signature using the public/private key set Your application redirects to the /learn/api/public/v1/oauth2/authorizationcode endpoint (important note below) Learn sends your application an authorization code, which your application must use to request a token from /learn/api/public/v1/oauth2/token endpoint Your application then tells your UEF javascript what this token Id is Your application renders that javascript in the Ultra iframe. Your application does what it does best NOTE: It is important to note that in the next step, we will talk about how to authorize your javascript to talk to UEF’s message channel. This process requires scopes, and these scopes are set when you request your access code. If you do not request the appropriate scopes in this step, the next step WILL NOT WORK. For all scopes, just set scope=”*”. This table lists all of the available scopes and what you might need them for. Scope name Syntax Associated Events ALL_AUTH_TYPE * Gives all scopes ANALYTICS_AUTH_TYPE “ultra:analytics-event” click,hover HELP_PROVIDER_TYPE “ultra:help” help:register PORTAL_AUTH_TYPE “ultra:portal” portal:new,portal:remove PORTAL_MODAL_AUTH_TYPE “ultra:modal” portal:modal PORTAL_NOTIFICATION_AUTH_TYPE “ultra:notification” portal:notification ROUTE_AUTH_TYPE “ultra:route-event” route,route:changing Authorizing Your Javascript Once your javascript is rendered in the UEF, you must connect to a message channel to receive and send events to Ultra. The first step is to set up a window.postMessage listener for the integration handshake and send an integration:hello message: console.log(\"addEventListener\"); window.addEventListener(\"message\", onPostMessageReceived, false); console.log(\"say hello to \" + integrationHost); window.parent.postMessage({\"type\": \"integration:hello\"}, integrationHost + '/*'); In most cases, the integrationHost variable will be set to your Learn domain, for example: integrationHost = ‘https://ultra.myschool.edu’;. At this point, Ultra will respond with an event of type integration:hello back. This message will contain a port number that you then attach to for communication and send an authorization request including your OAuth 2.0 token retrieved above: function onPostMessageReceived(evt) { // Do some basic message validation. const fromTrustedHost = evt.origin === window.__lmsHost || evt.origin === integrationHost; if (!fromTrustedHost || !evt.data || !evt.data.type) { return; } // (2) A majority of the communication between the integration and Learn // Ultra will be over a \"secure\" MessageChannel. // As response to the integration handshake, Learn Ultra will send a // MessageChannel port to the integration. if (evt.data.type === 'integration:hello') { // Store the MessageChannel port for future use messageChannel = new LoggedMessageChannel(evt.ports[0]); messageChannel.onmessage = onMessageFromUltra; // (3) Now, we need to authorize with Learn Ultra using the OAuth2 token // that the server negotiated for us messageChannel.postMessage({ type: 'authorization:authorize', // Your OAuth 2.0 REST token token: token }); } } Remember when we talked about scopes? This is where they come into play. You are passing that REST token and requesting authorization. This step attaches those scope requests to your integration. Ultra will respond and tell you either your are authorized or you are not. Upon receipt of a successful authorization, we will need to subscribe to the event types we want to listen to. function onMessageFromUltra(message) { // (4) If our authorization token was valid, Learn Ultra will send us a // response, notifying us that the authorization // was successful if (message.data.type === 'authorization:authorize') { onAuthorizedWithUltra(); } // All of your other events are processed here } function onAuthorizedWithUltra() { console.log('Authorization was successful'); // (5) Once we are authorized, we can subscribe to events, such as telemetry // events messageChannel.postMessage({ type: 'event:subscribe', subscriptions: ['click','route','route:changing','portal:new','portal:remove'], }); Assuming the scopes provided allow you access to the events you are subscribing to, you are off and running! Tips and Tricks The best tip we can give is that all of the communication happens in the browser, so if you are having trouble with the javascript, using console.log() will print messages to the javascript console in the Chrome or Firefox developer tools. In addition, you can click things in the Ultra UI and see interactions in the Network tab of those same developer tools. This helps you identify the routeName for route events or the analyticsId in click events. These are how your application knows where they user is and what they are doing so you can insert your functionality in the right place.",
    "tags": "Learn UEF",
    "url": "/learn/uef/security-and-tokens.html"
  },{
    "title": "Security",
    "text": "About Security This page describes how to restrict access to a page in your building block. Entitlements The primary means of restricting access to a building block is through the use of entitlements. These intitlements are simply strings with the form functional-area.ACTION For example, The course.enrollment.MODIFY entitlement grants a user rights to modify an enrollment in a course. The course.assessment.results.VIEW entitlement grants a user rights to view results in a course. The course.content.CREATE entitlement grants a user rights to create content in a course. The list of available entitlements can be seen by looking at the bb_bb60.entitlement table. Every role in Blackboard has a set of entitlements attached to it. All the entitlements for particular roles can be viewed and modified on the Privileges page in the System Admin panel. However, for development purposes, it’s easier to look directly in the database. Enforcing entitlements The easiest way to check entitlements is by using the static methods on the SecurityUtil class. For example, to check whether a user has rights to modify an enrollment in a course, you could write. if(SecurityUtil.userHasEntitlement(\"course.enrollment.MODIFY\")) { ... ... } If you wish to check a set of permissions in one go, you can use the method SecurityUtil.userHasAllEntitlements(java.lang.String[]) if (SecurityUtil.userHasAllEntitlements(new String[]{\"course.assessment.results.DELETE\", \"course.assessment.results.MODIFY\", \"course.assessment.results.VIEW\"})) { ... ... } The PlugInUtil class also has several methods you can use to check permissions, such as PlugInUtil.authorizeForCourseControlPanel(request, response). However, these methods will also generate a redirect to the front page if the check fails, which may interfere with your application logic. Ensuring that a user is authenticated To check that a user is authenticated, you can call the isAuthenticated() method on the user’s BbSession object. BbSession bbSession = BbSessionManagerServiceFactory.getInstance().getSession(ctx.getActionBeanContext().getRequest()); if (!bbSession.isAuthenticated()) { .... REDIRECT THE USER TO THE LOGIN PAGE .... } If this code is in a JSP, you can redirect the user by calling: HttpAuthManager.sendLoginRedirect(request,response) JSP example: BbSession bbSession = BbSessionManagerServiceFactory.getInstance().getSession( ctx.getActionBeanContext().getRequest()); if (! bbSession.isAuthenticated()) { HttpAuthManager.sendLoginRedirect(request,response); return; } However, if you are using a framework like Spring or Stripes calling HttpAuthManager.sendLoginRedirect may interfere with your application logic, and you may wish to just redirect to the root of your blackboard install. Stripes example: BbSession bbSession = BbSessionManagerServiceFactory.getInstance().getSession(ctx.getActionBeanContext().getRequest()); if (! bbSession.isAuthenticated()) { return new RedirectResolution(\"/\", false); }",
    "tags": "Learn b2",
    "url": "/learn/b2/best-practices/security.html"
  },{
    "title": "Session Definitions",
    "text": "Session Definitions In Blackbard Collaborate, Sessions are what lies at the center of everything. This is the virtual room that you enroll users to, share content, and host your live course events. The purpose of this document is to define the settings available to you, the developer, when you create a new session through the Collaborate REST API. For illustration, here is a sample session event that would be sent to POST /sessions. { \"name\": \"My Collab Room\", \"description\": \"The room I use for Collab meetings\", \"startTime\": \"2020-03-27T16:00:00.000Z\", \"endTime\": \"2020-03-27T17:00:00.000Z\", \"noEndDate\": true, \"createdTimezone\": \"America/New_York\", \"courseRoomEnabled\": false, \"boundaryTime\": \"15\", \"participantCanUseTools\": true, \"occurrenceType\": \"S\", \"recurrenceRule\": { \"recurrenceEndType\": \"on_date\", \"daysOfTheWeek\": [ \"mo\" ], \"recurrenceType\": \"daily\", \"interval\": \"1\", \"numberOfOccurrences\": 0, \"endDate\": \"2020-03-27T17:00:00.000Z\" }, \"allowInSessionInvitees\": true, \"allowGuest\": true, \"guestRole\": \"participant\", \"canAnnotateWhiteboard\": true, \"canDownloadRecording\": true, \"canPostMessage\": true, \"canShareAudio\": true, \"canShareVideo\": true, \"mustBeSupervised\": true, \"openChair\": true, \"raiseHandOnEnter\": true, \"showProfile\": true, \"sessionExitUrl\": \"https://myeventsurvey.school.edu\" } The following table defines the available settings in the sample JSON package above: Setting Description Example name (required) The name of the session, displayed in the header of the room “My Collab Room” description A description of the room “The room I use for Collab meetings” startTime (required) The ISO-formatted date to start the session as a string “2020-03-27T16:00:00.000Z” endTime The ISO-formatted date to end the session as a string “2020-03-27T17:00:00.000Z” noEndDate Boolean describing whether the room has an end date TRUE createdTimezone The time zone to create the room in “America/New_York” courseRoomEnabled A Boolean specific to Blackboard Learn that describes whether this room is automatically associated with a course FALSE boundaryTime Number of minutes a user can join a session before the start time. Must be 0, 15, 30, 45, or 60. 15 ParticipantCanUseTools A Boolean that describes whether a use can use tools, such as application sharing, screen sharing, timer, and polls TRUE occurrenceType Single-Use or Perpetual session. Must be “S” or “P” “S” recurrenceRule A JSON object describing recurrence rules for a session   recurrenceEndType The method to describe the end of the sessions recurrence. Must be “on_date” or “after_occurence_count” “on_date” daysOfTheWeek The days of the week this session will occur. Must be “mo”, “tu”, “we”, “th”, “fr”, “sa”, or “su” [ “mo”, “we”, “fr” ] recurrenceType How often to repeat your session. Must be “daily”, “weekly”, or “monthly” “daily” interval The number of days, weeks, or months between occurrences, as defined by recurrenceType. “1” numberOfOccurrences If recurrenceEndDate is set to “after_occurence_count,” this is the number of occurrences to have 5 endDate If recurrenceEndDate is set to “on_date,” The ISO-formatted date of the last session. “2020-03-27T17:00:00.000Z” allowInSessionInvitees A Boolean describing whether a presenter can send invitations from within the session TRUE allowGuest A Boolean describing whether guests can attend a session FALSE guestRole The role to assign to guest attendees. Must be “participant”, “presenter”, or “moderator” “participant” canAnnotateWhiteboard A Boolean that describes whether users can annotate the whiteboard TRUE canDownloadRecording A Boolean that describes whether users can download the recording FALSE canPostMessage A Boolean that describes whether users can post chat messages TRUE canShareAudio A Boolean that describes whether users can share their audio TRUE canShareVideo A Boolean that describes whether users can share their webcam TRUE mustBeSupervised A Boolean that describes whether users must be moderated in chat TRUE openChair A Boolean that describes whether users that join should be made moderator FALSE raiseHandOnEnter A Boolean that describes whether users will automatically raise their hands when they enter the session FALSE showProfile A Boolean that describes whether users can share their profiles with other users, including their avatar TRUE sessionExitUrl A url to redirect users to on session exit. This should be a string “https://myeventsurvey.school.edu”",
    "tags": "Collaborate",
    "url": "/collaborate/session-definitions.html"
  },{
    "title": "Session Events",
    "text": "Session Events Blackboard Learn’s Caliper Analytics stream emits a SessionEvent to cover three use cases: User logs in User logs out User’s session times out Here is some of the key data that is associated with these events: SessionEvent - Login/Logout actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user action - LoggedIn or …/action#LoggedOut SessionEvent -Timeout actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user object.actor.@id - contains a unique ID of the user (the ID is known to Bb) action - TimedOut Sample Payload ~~~ json { “@context”: “http://purl.imsglobal.org/ctx/caliper/v1p1”, “type”: “SessionEvent”, “id”: “f8c984e2-de73-4c0b-8183-779ab4149422”, “actor”: { “id”: “https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2”, “type”: “Person”, “extensions”: { “bb:user.id”: “_1_1”, “bb:user.externalId”: “administrator” } }, “action”: “LoggedIn”, “object”: { “id”: “https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/applications/learn”, “type”: “SoftwareApplication”, “extensions”: { “bb:request.headers.agent”: “Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36”, “bb:request.headers.ipAddress”: “98.10.178.27” } }, “target”: { “id”: “https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03”, “type”: “DigitalResource”, “creators”: [], “learningObjectives”: [], “keywords”: [] }, “eventTime”: “2020-12-24T21:38:05.645Z”, “edApp”: { “id”: “https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/applications/learn”, “type”: “SoftwareApplication”, “extensions”: { “bb:request.headers.agent”: “Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36”, “bb:request.headers.ipAddress”: “98.10.178.27” } }, “federatedSession”: { “startedAtTime”: “2020-12-24T21:38:05.645Z”, “id”: “https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/sessions/B287CEC440C99337012096F677684697”, “type”: “LtiSession”, “name”: “B287CEC440C99337012096F677684697”, “dateCreated”: “2020-12-24T21:38:05.645Z”, “extensions”: { “bb:request.headers.agent”: “Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36” }, “user”: { “id”: “https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2”, “type”: “Person”, “extensions”: { “bb:user.id”: “_1_1”, “bb:user.externalId”: “administrator” } } }, “extensions”: {} }",
    "tags": "Standards",
    "url": "/standards/caliper/events/session-events.html"
  },{
    "title": "SOAP to REST",
    "text": "SOAP to REST migration: Mapping The purpose of this document is to provide a mapping from SOAP Web Service calls to REST API Endpoints. This is meant to be a quick-start guide to the migration process. With SOAP being deprecated in the near term future and removed from Blackboard Learn following the public API Deprecation Policy, it is our intention to provide you the information you need in order to migrate as painlessly as possible. This is a living document and will up updated as the last few remaining gaps in functionality are closed. New REST APIs are rolled out in new versions of Blackboard Learn, but never back-ported to previous releases. To be sure the endpoint you require is available, be sure to visit the Developer Portal and check the individual endpoints you need. Announcements Use Case SOAP WS Call REST Endpoint Create Course Announcement AnnouncementWS.createCourseAnnouncements() POST /learn/api/public/v1/courses/{courseId}/announcements Read Course Announcement AnnouncementWS.getCourseAnnouncements() GET /learn/api/public/v1/courses/{courseId}/announcements/{announcementId} Read All Course Announcements AnnouncementWS.getCourseAnnouncements() GET /learn/api/public/v1/courses/{courseId}/announcements Update Course Announcement AnnouncementWS.updateCourseAnnouncements() PATCH /learn/api/public/v1/courses/{courseId}/announcements/{announcementId} Delete Course Announcement AnnouncementWS.deleteCourseAnnouncements() DELETE /learn/api/public/v1/courses/{courseId}/announcements/{announcementId} Create Organization Announcement AnnouncementWS.createOrgAnnouncements() POST /learn/api/public/v1/courses/{courseId}/announcements Read Organization Announcement AnnouncementWS.getOrgAnnouncements() GET /learn/api/public/v1/courses/{courseId}/announcements/{announcementId} Read All Organization Announcements AnnouncementWS.getOrgAnnouncements() GET /learn/api/public/v1/courses/{courseId}/announcements Update Organization Announcement AnnouncementWS.updateOrgAnnouncements() PATCH /learn/api/public/v1/courses/{courseId}/announcements/{announcementId} Delete Organization Announcement AnnouncementWS.deleteOrgAnnouncements() DELETE /learn/api/public/v1/courses/{courseId}/announcements/{announcementId} Create System Announcement AnnouncementWS.createSystemAnnouncements() POST /learn/api/public/v1/announcements Read System Announcement AnnouncementWS.getSystemAnnouncements() GET /learn/api/public/v1/announcements/{announcementId} Read All System Announcements AnnouncementWS.getSystemAnnouncements() GET /learn/api/public/v1/announcements Update System Announcement AnnouncementWS.updateSystemAnnouncements() PATCH /learn/api/public/v1/announcements/{announcementId} Delete System Announcement AnnouncementWS.deleteSystemAnnouncements() DELETE /learn/api/public/v1/announcements/{announcementId} Calendar Use Case SOAP WS Call REST Endpoint Create a Course Calendar Item CalendarWS.createCourseCalendarItem()CalendarWS.saveCourseCalendarItem() POST /learn/api/public/v1/calendars/items Read a Course Calendar Item CalendarWS.getCalendarItem() GET /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Read all Course Calendar Items CalendarWS.getCalendarItem() GET /learn/api/public/v1/calendarsGET /learn/api/public/v1/calendars/items Update a Course Calendar Item CalendarWS.updateCourseCalendarItem()CalendarWS.saveCourseCalendarItem() PATCH /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Delete a Course Calendar Item CalendarWS.deleteCourseCalendarItem() DELETE /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Create an Institutional Calendar Item CalendarWS.createInstitutionalCalendarItem()CalendarWS.saveInstitutionalCalendarItem() POST /learn/api/public/v1/calendars/items Read an Institutional Calendar Item CalendarWS.getCalendarItem() GET /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Read all Institutional Calendar Items CalendarWS.getCalendarItem() GET /learn/api/public/v1/calendarsGET /learn/api/public/v1/calendars/items Update an Institutional Calendar Item CalendarWS.updateInstitutionalCalendarItem()CalendarWS.saveInstitutionalCalendarItem() PATCH /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Delete an Institutional Calendar Item CalendarWS.deleteInstitutionalCalendarItem() DELETE /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Create a Personal Calendar Item CalendarWS.createPersonalCalendarItem()CalendarWS.savePersonalCalendarItem() POST /learn/api/public/v1/calendars/items Read a Personal Calendar Item CalendarWS.getCalendarItem() GET /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Read all Personal Calendar Items CalendarWS.getCalendarItem() GET /learn/api/public/v1/calendarsGET /learn/api/public/v1/calendars/items Update a Personal Calendar Item CalendarWS.updatePersonalCalendarItem()CalendarWS.savePersonalCalendarItem() PATCH /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Delete a Personal Calendar Item CalendarWS.deletePersonalCalendarItem() DELETE /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Content Use Case SOAP WS Call REST Endpoint Create Course TOC ContentWS.saveCourseTOC() POST /learn/api/public/v1/courses/{courseId}/contents Read Course TOC ContentWS.getTOCsByCourseId() GET /learn/api/public/v1/courses/{courseId}/contents/{content ID} Read All Course TOC ContentWS.getTOCsByCourseId() GET /learn/api/public/v1/courses/{courseId}/contents Update Course TOC ContentWS.saveCourseTOC() PATCH /learn/api/public/v1/courses/{courseId}/contents Delete Course TOC ContentWS.deleteCourseTOCs() DELETE /learn/api/public/v1/courses/{courseId}/contents Create Content Item ContentWS.saveContent() POST /learn/api/public/v1/courses/{courseId}/contents/{content ID)/children Read Content Item ContentWS.getFilteredContent() GET /learn/api/public/v1/courses/{courseId}/contents/{content ID} Read All Content Items ContentWS.getFilteredContent() GET /learn/api/public/v1/courses/{courseId}/contents/{content ID)/children Update Content Item ContentWS.saveContent() PATCH /learn/api/public/v1/courses/{courseId}/contents Delete Content Item ContentWS.deleteContents() DELETE /learn/api/public/v1/courses/{courseId}/contents Attach File ContentWS.addContentFile() POST /learn/api/public/v1/courses/{courseId}/contents/{content ID}/attachment Remove File ContentWS.deleteContentFiles() DELETE /learn/api/public/v1/courses/{courseId}/contents/{contentID}/attachment/{attachment ID} Update File ContentWS.updateContentFileLinkName() DELETE /learn/api/public/v1/courses/{courseId}/contents/{contentID}/attachment/{attachment ID}POST /learn/api/public/v1/courses/{courseId}/contents/{content ID}/attachment Read Content File ContentWS.getContentFiles() GET /learn/api/public/v1/courses/{courseId}/contents/{contentID}/attachment/{attachment ID} Read All Content Files ContentWS.getContentFiles() GET /learn/api/public/v1/courses/{courseId}/contents/{content ID}/attachment Download Content File ContentWS.getContentFiles() GET /learn/api/public/v1/courses/{courseId}/contents/{contentID}/attachment/{attachment ID}/downloads Create Link ContentWS.saveLink() POST /learn/api/public/v1/courses/{courseId}/contents/{content ID}/children Read Link ContentWS.getLinksByReferredToType()ContentWS.getLinksByReferrerType() GET /learn/api/public/v1/courses/{courseId}/contents/{content ID} Read All Links ContentWS.getLinksByReferredToType()ContentWS.getLinksByReferrerType() GET /learn/api/public/v1/courses/{courseId}/contents Update Link ContentWS.saveLink() PATCH /learn/api/public/v1/courses/{courseId}/contents/{content ID} Delete Link ContentWS.deleteLink() DELETE /learn/api/public/v1/courses/{courseId}/contents/{content ID} Get Reviewed Status ContentWS.getReviewStatusByCourseId() GET /learn/api/public/v1/courses/{courseId}/contents/{contentId}/users/{userId}/reviewStatus Set Reviewed Status ContentWS.setContentReviewed() PATCH /learn/api/public/v1/courses/{courseId}/contents/{contentId}/users/{userId}/reviewStatus Context Use Case SOAP WS Call REST Endpoint Register Tool ContextWS.registerTool() N/A Emulate a User ContextWS.emulateUser() GET /learn/api/public/v1/oauth2/authorizationcodePOST /learn/api/public/v1/oauth2/token Extend Session Life ContextWS.extendSessionLife() POST /learn/api/public/v1/oauth2/token Get Memberships By UserID ContextWS.getMemberships() GET /learn/api/public/v1/users/{user id}/courses Get Current User’s Memberships ContextWS.getMyMemberships() GET /learn/api/public/v1/users/me/courses Get System Installation ID ContextWS.getSystemInstallationId() Use LTI Login as User ContextWS.login() GET /learn/api/public/v1/oauth2/authorizationcodePOST /learn/api/public/v1/oauth2/token Login with Access Ticket ContextWS.loginTicket() N/A Login as Tool ContextWS.loginTool() POST /learn/api/public/v1/oauth2/token Logout ContextWS.logout() N/A Courses Use Case SOAP WS Call REST Endpoint Create Course CourseWS.createCourse()CourseWS.saveCourse() POST /learn/api/public/v2/courses Read Course CourseWS.getCourse() GET /learn/api/public/v2/courses/{courseId} Read All Courses CourseWS.getCourse() GET /learn/api/public/v2/courses Update Course CourseWS.saveCourse() PATCH /learn/api/public/v2/courses/{courseId} Update Course BatchUID CourseWS.changeCourseBatchUid() PATCH /learn/api/public/v2/courses/{courseId} Update Course Category CourseWS.changeCourseCategoryBatchUid() PATCH /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Update Course Datasource CourseWS.changeCourseDataSourceId() PATCH /learn/api/public/v2/courses/{courseId} Delete Course CourseWS.deleteCourse() DELETE /learn/api/public/v2/courses/{courseId} Create Organization CourseWS.createOrg() POST /learn/api/public/v2/courses Read Organization CourseWS.getOrg() GET /learn/api/public/v2/courses/{courseId} Read All Organizations CourseWS.getOrg() GET /learn/api/public/v2/courses Update Organization CourseWS.saveCourse() PATCH /learn/api/public/v2/courses/{courseId} Update Organization BatchUID CourseWS.changeOrgBatchUid() PATCH /learn/api/public/v2/courses/{courseId} Update Organization Category CourseWS.changeOrgCategoryBatchUid() PATCH /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Update Organization Datasource CourseWS.changeOrgDataSourceId() PATCH /learn/api/public/v2/courses/{courseId} Delete Organization CourseWS.deleteOrg() DELETE /learn/api/public/v2/courses/{courseId} Create Group CourseWS.saveGroup() POST /learn/api/public/v1/courses/{courseId}/groups Read Group CourseWS.getGroup() GET /learn/api/public/v1/courses/{courseId}/groups/{group Id} Read All Groups CourseWS.getGroup() GET /learn/api/public/v1/courses/{courseId}/groups Update Group CourseWS.saveGroup() PATCH /learn/api/public/v1/courses/{courseId}/groups/{group Id} Delete Group CourseWS.deleteGroup() DELETE /learn/api/public/v1/courses/{courseId}/groups/{group Id} Create Term CourseWS.saveTerm() POST /learn/api/public/v1/terms Read Term CourseWS.loadTerm()CourseWS.loadTermByCourseId() GET /learn/api/public/v1/terms/{term id} Read All Terms CourseWS.loadTerms()CourseWS.loadTermsByName() GET /learn/api/public/v1/terms Update Term CourseWS.saveTerm() PATCH /learn/api/public/v1/terms/{term id} Delete Term CourseWS.deleteTerm() DELETE /learn/api/public/v1/terms/{term id} Add Course to Term CourseWS.addCourseToTerm() PATCH /learn/api/public/v2/courses/{courseId} Get Courses in Term CourseWS.loadCoursesInTerm() GET /learn/api/public/v2/courses?termId={term id} Remove Course From Term CourseWS.removeCourseFromTerm() PATCH /learn/api/public/v2/courses/{courseId} Create Course Category CourseWS.saveCourseCategory() POST /learn/api/public/v1/catalog/categories/{categoryType} Read Course Category CourseWS.getCategories() GET /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Read All Course Categories CourseWS.getCategories() GET /learn/api/public/v1/catalog/categories/{categoryType} Update Course Category CourseWS.saveCourseCategory() PATCH /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Delete Course Category CourseWS.deleteCourseCategory() DELETE /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Create Course Category Membership CourseWS.saveCourseCategoryMembership() PUT /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} Read Course Category Membership CourseWS.getCourseCategoryMembership() GET /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId}GET /learn/api/public/v1/courses/{courseId}/categories Read All Course Category Memberships CourseWS.getCourseCategoryMembership() GET /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses Update Course Category Membership CourseWS.saveCourseCategoryMembership() PUT /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} Delete Course Category Membership CourseWS.deleteCourseCategoryMembership() DELETE /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} Create Organization Category CourseWS.saveOrgCategory() POST /learn/api/public/v1/catalog/categories/{categoryType} Read Organization Category CourseWS.getCategories() GET /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Read All Organization Categories CourseWS.getCategories() GET /learn/api/public/v1/catalog/categories/{categoryType} Update Organization Category CourseWS.saveOrgCategory() PATCH /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Delete Organization Category CourseWS.deleteOrgCategory() DELETE /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Create Organization Category Membership CourseWS.saveOrgCategoryMembership() PUT /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} Read Organization Category Membership CourseWS.getOrgCategoryMembership() GET /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId}GET /learn/api/public/v1/courses/{courseId}/categories Read All Organization Category Memberships CourseWS.getOrgCategoryMembership() GET /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses Update Organization Category Membership CourseWS.saveOrgCategoryMembership() PUT /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} Delete Organization Category Membership CourseWS.deleteOrgCategoryMembership() DELETE /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} Create Cartridge CourseWS.saveCartridge() N/A Read Cartridge CourseWS.getCartridge() N/A Update Cartridge CourseWS.saveCartridge() N/A Delete Cartridge CourseWS.deleteCartridge() N/A Create StaffInfo CourseWS.saveStaffInfo() POST /learn/api/public/v1/usersPUT /learn/api/public/v1/courses/{course id}/users/{user id} Read StaffInfo CourseWS.getStaffInfo() GET /learn/api/public/v1/users/{user id} Update StaffInfo CourseWS.saveStaffInfo() PATCH /learn/api/public/v1/users/{user id} Delete StaffInfo CourseWS.deleteStaffInfo() DELETE /learn/api/public/v1/users/{user id} Set Course Banner CourseWS.setCourseBannerImage() N/A Get Group Tools CourseWS.getAvailableGroupTools() 2020 Roadmap Read Classification CourseWS.getClassifications() N/A Course Memberships Use Case SOAP WS Call REST Endpoint Create Course Membership CourseMembershipWS.saveCourseMembership() PUT /learn/api/public/v1/courses/{courseId}/users/{user id}   Read Course Membership CourseMembershipWS.getCourseMembership() GET /learn/api/public/v1/courses/{courseId}/users/{user id} Read All Course Memberships CourseMembershipWS.getCourseMembership() GET /learn/api/public/v1/courses/{courseId}/users Update Course Memberships CourseMembershipWS.saveCourseMembership() PATCH /learn/api/public/v1/courses/{courseId}/users/{userId} Delete Course Memberships CourseMembershipWS.deleteCourseMembership() DELETE /learn/api/public/v1/courses/{courseId}/users/{userId} Create Organization Membership CourseMembershipWS.saveCourseMembership() PUT /learn/api/public/v1/courses/{courseId}/users/{user id} Read Organization Membership CourseMembershipWS.getCourseMembership() GET /learn/api/public/v1/courses/{courseId}/users/{user id} Read All Organization Memberships CourseMembershipWS.getCourseMembership() GET /learn/api/public/v1/courses/{courseId}/users Update Organization Memberships CourseMembershipWS.saveCourseMembership() PATCH /learn/api/public/v1/courses/{courseId}/users/{userId} Delete Organization Memberships CourseMembershipWS.deleteCourseMembership() DELETE /learn/api/public/v1/courses/{courseId}/users/{userId} Create Group Membership CourseMembershipWS.saveGroupMembership() PUT /learn/api/public/v1/courses/{courseId}/groups/{groupId}/users/{userId} Read Group Membership CourseMembershipWS.getGroupMembership() GET /learn/api/public/v1/courses/{courseId}/groups/{groupId}/users/{userId} Read All Group Memberships CourseMembershipWS.getGroupMembership() GET /learn/api/public/v1/courses/{courseId}/groups/{groupId}/users Delete Group Memberships CourseMembershipWS.deleteGroupMembership() DELETE /learn/api/public/v1/courses/{courseId}/groups/{groupId}/users/{userId} Get Course Roles CourseMembershipWS.getCourseRoles() GET /learn/api/public/v1/courseRoles Gradebook Use Case SOAP WS Call REST Endpoint Create an Attempt GradebookWS.saveAttempts() POST /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts Read an Attempt GradebookWS.getAttempts() GET /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts/{attempt id} Read All Attempts GradebookWS.getAttempts() GET /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts Update an Attempt GradebookWS.saveAttempts() PATCH /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts/{attempt id} Delete an Attempt GradebookWS.deleteAttempts() PATCH /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts/{attempt id} (set to 0) Create a Column GradebookWS.saveColumns() POST /learn/api/public/v2/course/{courseId}/gradebook/columns Read a Column GradebookWS.getGradebookColumns() GET /learn/api/public/v2/course/{courseId}/gradebook/columns/{column id} Read All Columns GradebookWS.getGradebookColumns() GET /learn/api/public/v2/course/{courseId}/gradebook/columns Update a Column GradebookWS.saveColumns() PATCH /learn/api/public/v2/course/{courseId}/gradebook/columns/{column id} Delete a Column GradebookWS.deleteColumns() DELETE /learn/api/public/v2/course/{courseId}/gradebook/columns/{column id} Create a Gradebook Type GradebookWS.saveGradebookTypes() POST /learn/api/public/v2/course/{courseId}/gradebook/columns Read a Gradebook Type GradebookWS.getGradebookTypes() GET /learn/api/public/v2/course/{courseId}/gradebook/columns/{column id} Read All Gradebook Types GradebookWS.getGradebookTypes() GET /learn/api/public/v2/course/{courseId}/gradebook/columns Update a Gradebook Type GradebookWS.saveGradebookTypes() PATCH /learn/api/public/v2/course/{courseId}/gradebook/columns/{column id} Delete a Gradebook Type GradebookWS.deleteGradebookTypes() DELETE /learn/api/public/v2/course/{courseId}/gradebook/columns/{column id} Create a Grade GradebookWS.saveGrades() POST /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts Read a Grade GradebookWS.getGrades() GET /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts/{attempt id} Read All Grades GradebookWS.getGrades() GET /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts Update a Grade GradebookWS.saveGrades() PATCH /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts/{attempt id} Delete a Grade GradebookWS.deleteGrades() PATCH /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts/{attempt id} (set to 0) Create a Grading Schema GradebookWS.saveGradingSchemas() POST /learn/api/public/v1/courses/{course id]/gradebook/schemas Read a Grading Schema GradebookWS.getGradingSchemas() GET /learn/api/public/v1/courses/{course id]/gradebook/schemas/{schema id} Read All Grading Schemas GradebookWS.getGradingSchemas() GET /learn/api/public/v1/courses/{course id]/gradebook/schemas Update a Grading Schema GradebookWS.saveGradingSchemas() PATCH /learn/api/public/v1/courses/{course id]/gradebook/schemas/{schema id} Delete a Grading Schema GradebookWS.deleteGradingSchemas() DELETE /learn/api/public/v1/courses/{course id]/gradebook/schemas/{schema id} Users Use Case SOAP WS Call REST Endpoint Create a User UserWS.saveUser() POST /learn/api/public/v1/users Read a User UserWS.getUser() GET /learn/api/public/v1/users/{userId} Read All Users UserWS.getUser() GET /learn/api/public/v1/users Update a User UserWS.saveUser() PATCH /learn/api/public/v1/users/{userId} Delete a User UserWS.deleteUser() DELETE /learn/api/public/v1/users/{userId} Update a User’s BatchUid UserWS.changeUserBatchUid() PATCH /learn/api/public/v1/users/{userId} Update a User’s DataSource ID UserWS.changeUserDataSourceId() PATCH /learn/api/public/v1/users/{userId} Delete User by Role UserWS.deleteUserByInstitutionRole() N/A Create a User’s Address Book Entry UserWS.saveAddressbookEntry() POST /learn/api/public/v1/users Read a User’s Address Book Entry UserWS.getAddressbookEntry() GET /learn/api/public/v1/users/{userId} Read All a User’s Address Book Entries UserWS.getAddressbookEntry() GET /learn/api/public/v1/users Update a User’s Address Book Entry UserWS.saveAddressBbookEntry() PATCH /learn/api/public/v1/users/{userId} Delete a User’s Address Book Entry UserWS.deleteAddressBookEntry() DELETE /learn/api/public/v1/users/{userId} Read All Institution Roles UserWS.getInstitutionRoles() GET /learn/api/public/v1/institutionRoles Read All System Roles UserWS.getSystemRoles() GET /learn/api/public/v1/systemRoles Read All Institution Roles Assigned to a User UserWS.getUserInstitutionRoles() GET /learn/api/public/v1/users/{userId} Create Observer Association UserWS.saveObserverAssociation() PUT /learn/api/public/v1/users/{userId}/observers/{observerId} Read Observer Association UserWS.getObservee() GET /learn/api/public/v1/users/{userId}/observeesGET /learn/api/public/v1/users/{userId}/observers Read All Observer Association UserWS.getObservee() GET /learn/api/public/v1/users/{userId}/observeesGET /learn/api/public/v1/users/{userId}/observers Update Observer Association UserWS.saveObserverAssociation() PUT /learn/api/public/v1/users/{userId}/observers/{observerId} Delete Observer Association UserWS.deleteOverserverAssociation() DELETE /learn/api/public/v1/users/{userId}/observers/{observerId} Util Use Case SOAP WS Call REST Endpoint Read All Datasources UtilWS.getDataSources() GET /learn/api/public/v1/dataSources Get Required Entitlements By Method UtilWS.getRequiredEntitlements() N/A Check a User’s Entitlements UtilWS.checkEntitlement() N/A Create a Setting UtilWS.saveSetting() N/A Load a Setting UtilWS.loadSetting() N/A Update a Setting UtilWS.saveSetting() N/A Delete a Setting UtilWS.deleteSetting() N/A",
    "tags": "Learn soap",
    "url": "/learn/soap/getting-started/soap-to-rest-mapping.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/soap.html"
  },{
    "title": "Spring in Building Blocks",
    "text": "Spring in Building Blocks Sample Metadata Title: Using Spring in Building Blocks Author: David Ashman Blackboard Version: Bb 9.x Institution-Affilation: Blackboard, Inc. Keywords: spring Notes: These code samples demonstrate how to use Spring in your Building Blocks. They include some basic “plumbing” code for Spring to simplify access to some of the key public APIs. Download Samples: Name Size Creator Creation Date** ZIP Archive SpringB2_Example1.zip 2.82 MB David Ashman 19 Jul 2010 03:37 PM ZIP Archive SpringB2_Example2.zip 2.82 MB David Ashman 19 Jul 2010 03:49 PM",
    "tags": "Learn b2",
    "url": "/learn/b2/examples/spring-in-b2s.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/standards.html"
  },{
    "title": "Starter Building Block Readme",
    "text": "Starter Building Block Readme This is the readme for the Starting Building Block. The Starter Building block is available in the Blackboard maven repository. DO NOT INSTALL THE STARTER BLOCK ON A PRODUCTION SYSTEM OR ANY SYSTEM ACCESSIBLE VIA THE PUBLIC INTERNET._ Installing the starting block on a production system presents a security risk.** Introduction The Starting Block Building Block can be used to dynamically deploy another Building Block for the purpose of testing changes. It is for use during the development cycle of a Building Block and should not be used on a production system. The Starting Block performs no authorization on requests and therefore represents a large security hole on anything but a development system. The Starting Block only works with local files and therefore any file indicated for installation must be directly visible to the server on which the Starting Block resides. Usage The Starting Block is invoked directly via URL. To access the help screen (which lists all available actions/options) install the Starting Block on your server and then go to the following URL: http://&lt;server&gt;/webapps/bb-starting-block-&lt;schema&gt;/execute/help The above URL assumes the Starting Block was installed on the default Virtual Installation. Replace with your servers domain and with your schema name. On newer systems, this should be **_BBLEARN_**, on older systems, this should be **_bb_bb60._** Invocation Since the Starting Block can be “called” using a URL, it can be invoked through a standard web browser (using a bookmark). However, it is easier to incorporate the invocation of the Starting Block into the build script of your Building Block. Invocation Via Gradle The Basic B2 Template project contains all the information you need to use the Starter Block from your Gradle build process. A Gradle task was added called ‘deployB2’ that takes care of everything for you. To invoke, simply type ‘gradle deployB2’ or ‘gradlew deployB2’ at the command line in the root directory of your project, or configure the task to be called from your IDE’s Gradle plugin. Invocation Via Ant A sample Ant build file has been included in this package in order to demonstrate how this can be done (see the “deploy” set of build targets in the sample build file). The build file is a complete Building Block build file and may be useful as is for your own Building Block. Ant Build File Caveats If you plan on using the sample build file for your own project don’t forget to change the project name attribute. In order to invoke the Starting Block from Ant, the “get” Ant task is being used. Unfortunately, there is no easy way to take the output of that task (the output of the Starting Block written to a file) and render it to the user. As such, the user must examine it manually (stored in distrib/deploy.out) or update the Ant script with a platform specific call to echo the contents of the file. Generally speaking though, the output of the Starting Block is not important since there is very little that can go wrong if the “get” request is successful (which Ant will tell you). However, be sure to check deploy.out if deployment does not seem to be working. If the WAR file name that should be deployed requires url encoding in order to properly work with the “get” task (i.e., the WAR file or the path to the WAR file contain special characters) you will need to update the build file to use the “makeurl” task. This task is part of the -set-deploy-url target but is commented out by default since the task is new to Ant 1.7 and will not work unless you have that version of Ant or newer. If its use is necessary for you, make sure you have Ant 1.7, uncomment out the task, and then update the setting of deploy.url to use warfile.url in place of warfile.",
    "tags": "Learn b2",
    "url": "/learn/b2/getting-started/starter-b2.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/studentid.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/template-variables.html"
  },{
    "title": "Terms and Conditions",
    "text": "BLACKBOARD® REST AND LTI DEVELOPER AGREEMENT This Blackboard REST and LTI Developer Agreement (“Agreement”) enables the development, testing, demonstration and limited deployment of software applications designed to interoperate with designated Blackboard applications. By clicking “I agree” or otherwise indicating your agreement as part of an online process, the terms contained in this Agreement form the entire agreement between the Developer and Blackboard (as defined below) with respect to: (a) the development of Developer Applications through the use of Blackboard’s REST APIs and/or through the use of LTI Specifications; and (b) the use of a DVBA to test the interoperability of the Developer Applications therewith. You represent that you have the authority to bind the Developer to the terms of this Agreement and that you and Developer will comply with the terms and conditions hereof. All rights and privileges granted under this Agreement are contingent upon Developer’s agreement to the terms and conditions hereof. 1. DEFINITIONS. 1.1. “APIs” means Blackboard’s REST-based application program interfaces which are made available by Blackboard to facilitate the development of Developer Applications, as such APIs may (without obligation) be updated by Blackboard from time to time. 1.2. “Blackboard” means: (a) for a Developer (as defined below) with an address in the United States or Canada, Blackboard Inc., a Delaware corporation, having its principal place of business at 1111 19th Street NW, 9th floor, Washington, D.C. 20036; or (b) for a Developer (as∏ defined below) with an address outside the United States or Canada, Blackboard International B.V., a Netherlands company, having its principal place of business at Paleisstraat 1-5, 1012 RB Amsterdam, The Netherlands, except if it is an address in (i) South Korea, where the entity is Blackboard Korea Co., LTD with an address at 1301 ho, 11, Saechang-ro, Mapo-gu, Seoul, Korea (Gongduck B/D, Dowah-dong), (ii) Brazil, where the entity is_ Blackboard Do Brasil Servicos De Tecnologia Em Educacao Ltda, a private company with its head offices located in the city of São Paulo – SP, at Rua Joaquim Floriano, nº 243, Itaim Bibi, CNPJ Nr.13.504.812/0001-16, or (iii) The People’s Republic of China, where the entity is Blackboard Information Technology (Beijing) Co., Ltd. having its principal place of business at_Room 1003, Floor 10, Taixing Building, No 11, Garden East Road, Haidian District, Beijing. 1.3. “Blackboard Application” means a software solution of Blackboard that can be made interoperable with Developer Applications through the use of the APIs and Documentation. A Blackboard Application also includes: (a) any associated product documentation or materials that Blackboard may, in its sole discretion, provide; and (b) any Upgrades. 1.4. “Developer” means the individual or company or other legal entity on whose behalf you enter into this Agreement and which intends to develop Developer Applications in accordance herewith. 1.5. “Developer Application” means a software application created by Developer that is intended to use the APIs and/or the LTI Specification. In no event shall a Developer Application include any intellectual property from a DVBA. 1.6. “Developer Version of a Blackboard Application” or “DVBA” means a version of a Blackboard Application which contains quotas, rate limits, bandwidth limits and/or other usage or technical limits which are designed to limit Developer’s use of the Blackboard Application for non-production testing purposes only. 1.7. “Documentation” means Blackboard’s REST Developer user guides, sample code and related materials which are made available to Developers, as such Documentation may (without obligation) be updated from time to time by Blackboard. 1.8. “LTI” or “LTI Specification” means the “Learning Tools Interoperability” specification developed by the IMS Global Learning Consortium which seeks to establish a standard way to enable integration between a learning application and a learning management system or other educational environment. 1.9. “Portal” means the area of the Blackboard corporate website from which Developers can obtain rights of use to the APIs, Documentation and DVBA for the purposes described hereunder. 1.10. “REST” is an architectural style for designing networked applications. 1.11. “Term” shall have the meaning prescribed in Section 7 below. 1.12. “Upgrade” means the object code versions of a DVBA that has been enhanced or otherwise modified by or on behalf of Blackboard, acting in its sole discretion, to include additional functionality or code changes. Blackboard shall determine, in its sole discretion and without obligation, whether to develop or make available any Upgrades for use by Developer. 2. REGISTRATION 2.1. In order to be provided access to the APIs, Documentation, and a DVBA, Developer is required to register with Blackboard by providing certain information as directed in the “Registration” section of the Portal. Registration information shall include, without limitation, Developer’s contact information, a password and related login information for accessing Developer’s account, information identifying and describing the Developer Application, and such other information as may be requested by Blackboard. Developer agrees to provide all requested registration information and covenants that such information shall be accurate and kept up to date. 2.2. Upon acceptance of Developer’s registration, Blackboard will provide Developer with certain keys and/or passwords which may be used by Developer in order to access and use the APIs, Documentation, and DVBAs, which access and use shall be in accordance with the terms and conditions of this Agreement. 2.3. Developer’s registration with Blackboard, and the associated provision of access by Blackboard to the APIS, Documentation and DVBAs, shall in no event be deemed to be, or promoted by Developer as, an endorsement or certification by Blackboard of the Developer or of the compatibility or operation of any Developer Application. 3. USE OF THE APIS, DOCUMENTATION AND DVBAS 3.1. Subject to the terms and conditions of this Agreement and for the Term hereof, Blackboard grants to Developer a non-exclusive, non-transferable, limited license to access and use the APIs and Documentation for the sole purpose of developing Developer Applications which are designed to interoperate with Blackboard Applications. 3.2. Subject to the terms and conditions of this Agreement, if and to the extent Blackboard makes available to Developer a DVBA which is downloadable to a device in Developer’s computing environment, Blackboard grants to Developer a non-exclusive, non-transferable, limited license to download and install a single, object-code copy of the DVBA, but solely for the following purposes: (a) for use only as a component of the Developer’s non-production development environment; (b) to test the interoperability of the Developer Application with a DVBA in such non-production development environment by making requests from the Developer Application, in accordance with the APIs and Documentation, which are designed to enable the exchange of data between the applications; (c) to test the interoperability of an Developer Application with a DVBA in such non-production development environment through the utilization of the LTI Specification; and (d) to conduct demonstrations of the Developer Application to prospective customers in a non-production, Developer-controlled environment for evaluation purposes only. 3.3. Subject to the terms and conditions of this Agreement, if and to the extent that Blackboard makes available to Developer a Blackboard-hosted Software-as-a-Service (“SaaS”) version of a DVBA, Blackboard grants to Developer a non-exclusive, non-transferable, limited license to access the DVBA on a remote access basis over the Internet solely for the following purposes: (a) to test the interoperability of the Developer Application with the DVBA in its non-production development environment by making requests from the Developer Application, in accordance with the APIs and Documentation, which are designed to enable the exchange of data between the applications; (b) to test the interoperability of an Developer Application with a DVBA in its non-production development environment through the utilization of the LTI Specification; and (c) to conduct demonstrations of the Developer Application to prospective customers in a non-production, Developer-controlled environment for evaluation purposes only. 3.4. The DVBA will include usage and other limitations in order to ensure that Developer makes use of such Blackboard Application only for development, testing and demonstration purposes described above. In this regard, unless stated otherwise on the Portal, Developer shall be limited to use of the DVBA for no more than 150 users, 100 courses and 1,000 enrollment records. In addition, Developer shall be provided with “testing level” usage limits (such as quotas, bandwidth limits and/or rate limits) in connection with its use of the DVBAs. Such limitations will be as designated or applied by Blackboard in its sole discretion. Additional usage, technical, licensing or other limitations may be applied by Blackboard in its sole discretion. Developer is solely responsible for testing the Developer Application, for determining whether it is interoperable with a DVBA and thus a Blackboard Application, and for abiding by all applicable limitations and restrictions. To the extent Developer utilizes the LTI Specification, it is solely responsible for obtaining all necessary rights to use such LTI Specification for the purposes contemplated hereunder. 3.5. Developer may promote and market a Developer Application to potential customers by using the Blackboard logo and applicable Blackboard trademarks, but only to state that the Developer Applications are “designed for Blackboard” or to make such other similar statements which are approved in advance in writing by Blackboard and which indicate that the Developer Applications are designed to be compatible with the applicable Blackboard Applications. Notwithstanding the above, Developer shall make no representation indicating that Blackboard endorses, supports or makes any commitment regarding the interoperability of the Developer Application with any Blackboard Application. Developer may not use the name “Blackboard” or any other trademark of Blackboard in the name of any of its Developer Applications. Developer shall comply with Blackboard’s trademark policies. Blackboard may require Developer to discontinue use of Blackboard trademarks upon written notice. Developer understands and agrees that it is solely responsible and liable for its promotion and marketing activities and that it may not operate, distribute, or deploy a Developer Application, including to interact with a Blackboard Application other than a DVBA, to a customer unless and until it enters into the separate agreement described in Section 6 below. 3.6. Developer shall only use the APIs and Documentation in accordance with the associated Blackboard guidance and instructions described therein or on the Portal. Developer shall only access the DVBAs for the limited purposes described herein and in accordance with any documentation or materials made available by Blackboard with respect to the use or operation thereof. 3.7. Except as expressly permitted in the Agreement, Developer may not: (a) disclose, distribute (including by uploading to web sites, electronic bulletin boards or on or through any other method or media), display, sublicense, sell, or transfer any rights in the APIs, the Documentation or any DVBA (collectively, the “Blackboard Property”), in whole or in part, to any third party; (b) use the Blackboard Property, in whole or in part, for service bureau or outsourcing use or otherwise for the use or benefit of any third party; (c) exceed applicable usage, technical, licensing or other limitations which are set forth in this Agreement, in any materials or documentation provided by Blackboard or as may be separately imposed by Blackboard; (d) copy, modify, alter, or create derivative works of, or otherwise use for any purpose other than the purpose expressly authorized hereunder, the Blackboard Property; (e) use the Blackboard Property to create any product or service similar to any Blackboard Property or Blackboard Application, or otherwise exploit or commercialize the Blackboard Property; (f) gain or seek to gain access to any DVBA or Blackboard Application other than through the APIs as contemplated herein; (g) reverse engineer, disassemble, decrypt or decompile the APIs or any DVBA or Blackboard Application, or otherwise make any attempt to access or discover the source code thereof, or interfere with or disrupt the APIs, DVBAs, or Blackboard Applications or any servers or networks through which they are provided; (h) permit any third party to access or use the Blackboard Property, or to resell, distribute or otherwise use or exercise any rights with respect thereto; (i) disable any “auto reporting option” or similar reporting capability in any DVBA; or (j) provide any services or support to any third party regarding, or in connection with, any Blackboard Property. 3.8. A DVBA may utilize or include third party software or content (“Third Party Software”). To the extent necessary to use the applicable DVBA, Blackboard grants Developer a license to use such Third Party Software solely on the same terms and conditions (including all limitations and restrictions) as Developer is authorized to use the DVBA hereunder. However, Blackboard reserves the right to change, suspend or discontinue Developer’s rights of use in Third Party Software to the extent required by an applicable third party licensor or supplier or the terms of Blackboard’s agreement therewith. 3.9. Blackboard may determine, in its sole discretion and without obligation, whether to make available any DVBA, and associated APIs and Documentation, for the purposes contemplated hereunder. 3.10. All rights not expressly granted to Developer are reserved by Blackboard. 4. BLACKBOARD OBLIGATIONS 4.1. Subject to the terms and conditions of this Agreement, Blackboard will provide Developer with: (a) access to the APIs and Documentation; and (b) access to the DVBA(s), in each case for Developer’s use in connection with the development of Developer Applications as contemplated hereunder. 4.2. From time to time, in its sole discretion and without obligation to do so, Blackboard may elect to provide certain limited technical support to Developers. Any such support shall be as described in the relevant “Developer Support” or similar areas of the Portal, and may be in the form of self-service support. Any such support may be modified, reduced, cancelled or updated at any time upon written notice provided by Blackboard in the Portal or otherwise. Any and all support will be subject to the terms and conditions set forth in the Portal, and may require payment of fees as described therein. Blackboard may also make support available separately through other programs or offerings from time, and such support would be subject to the separate terms and conditions associated therewith. 5. DEVELOPER’S OBLIGATIONS 5.1. Developer shall develop each Developer Application in compliance with the then- current version of the APIs and Documentation and, accordingly, shall ensure that each Developer Application enables and maintains interoperability with the applicable DVBA and Blackboard Application. 5.2. Developer shall be solely responsible for each Developer Application, including all support, development, hosting, and maintenance thereof and its interoperability with any Blackboard Application. Accordingly, Developer shall be solely responsible and liable (including to its customers and other parties) for all matters regarding the Developer Applications, including their development, operation, performance, availability, interoperability, support, and hosting. 5.3. Developer shall use security best practices in connection with the development of the Developer Application and will comply at all times with all applicable privacy and data security laws and regulations and all security requirements of Blackboard made available on the Portal or otherwise. Developer will implement security measures adequate to preserve the confidentiality and security of all data which is processed, stored, transmitted or handled by Developer or any Developer Application. 5.4. Developer grants Blackboard the right to copy, display and otherwise use the registration information and materials provided by Developer for the purposes contemplated in the Agreement. In addition, Blackboard shall have the right (but not the obligation) to use the registration information provided by Developer in order to contact Developer to inquire as to Developer’s interest in discussing a partner relationship with Blackboard (including, by way of example and at Blackboard’s sole discretion, a relationship under which Developer may be granted deployment rights as described in Section 6 below). Neither party would have any obligations in connection with any such partner relationship unless and until the parties enter into a separate agreement (or an amendment hereto) which documents the terms and conditions of the relationship. In addition, Developer grants Blackboard the right to use Developer’s name, the name of the Developer Application, and Developer’s logo and applicable trademarks in promotional materials and otherwise in order to promote, market and/or otherwise identify Developer as a registered developer of REST and/or LTI applications which are designed to interoperate with Blackboard Applications. 5.5. Developer agrees to provide Blackboard the name of each Developer Application which is developed utilizing the APIs, a DVBA or the Documentation (each of which shall be registered pursuant to Section 2 above) for listing on Blackboard’s corporate website and other marketing vehicles. 5.6. Developer shall not share or expose the Developer Application Key/Secret pair. Application Key/Secret pairs shall only be held in the Developer Application code. Similarly, the Developer Application must never expose the Developer Application OAuth Token. Exposing the Developer Application Key/Secret pair, or the OAuth Token will create a serious security risk. If Developer believes he/she has exposed an Application Key/Secret pair the Developer may request a new pair for the Developer Application using the Developer Portal My Applications management page. Blackboard shall in no way be responsible for lost or exposed data resulting from unapproved or inappropriate use of REST Application Key/Secret pairs or OAuth Tokens. 6. DISTRIBUTION AND DEPLOYMENT OF DEVELOPER APPLICATIONS In accordance with the terms and conditions above, this Agreement enables Developer to gain access to the APIs, Documentation and DVBA(s) to develop Developer Applications, conduct non-production testing of the interoperability of such Developer Applications with the associated Blackboard Application(s), and conduct limited, non-production demonstrations of such Developer Applications to prospective customers. In addition, subject to the terms and conditions of this Agreement, Blackboard grants Developer a non-exclusive, non-transferable, limited license to deploy (i.e., grant rights to use) Developer Applications for use by Developer customers in a production environment, subject to the following limitations: (a) the aggregate rate limit for all Developer customers for each Developer Application shall not exceed 150,000 requests (or queries) per 24 hours; and (b) the aggregate site quota (i.e., the number of sites that a Developer Application may be registered with) for all Developer customers shall not exceed seven (7) sites per Developer Application. Notwithstanding the above, Developer is not authorized under this Agreement to, and warrants that it shall not use the DVBA in any manner other than for: (a) its internal, non-production development and testing of Developer Applications; and; (b) the non-production demonstration of Developer Applications to prospective customers for the limited time period authorized under Section 3 above. For clarity, in no event may Developer use the DVBA for any production (i.e., “live”) use for itself or any customer or other party. Developer is granted access to the DVBA for the sole purposes of REST and LTI testing and development, along with conducting limited demonstrations to prospects, all in a non-production environment and in accordance with the terms and conditions hereof. In order to operate, deploy, or distribute any Developer Application beyond the above constraints, the Developer will be required to enter into a separate agreement with Blackboard which would, among other terms and conditions, require: (i) registration of each Developer Application; (ii) the purchase of appropriate usage limits (such as quotas, bandwidth limits and/or rate limits); and/or (iii) the purchase of an appropriate level of membership in the “Blackboard Developer Network” or similar program. Information regarding the process for entering into such agreement shall be made available by Blackboard upon written request from Developer, on the Portal or otherwise. Developer acknowledges that its expenditure of time and money in developing Developer Applications is at its own risk and Blackboard makes no guarantees with regard to the availability of Blackboard Applications. 7. TERM AND TERMINATION 7.1. Term of Master Agreement. This Agreement shall commence on the date it is entered into by Developer and shall remain in effect unless terminated pursuant to the terms below. 7.2. Termination for Cause. Either party may terminate this Agreement upon written notice in the event that the other party breaches a provision hereof and fails to cure such breach within thirty (30) days of receipt of written notice thereof, provided that Blackboard may terminate immediately if Blackboard believes in its sole discretion that such breach is a threat to the operation or security of Blackboard Applications. Blackboard may terminate this Agreement immediately if Developer markets or sells any product which is substantially similar, in whole or material part, to any Blackboard Application. 7.3. Termination for Convenience. Either party may terminate this Agreement for any or no reason (i.e., for convenience) by providing written notice to the other party at least thirty (30) days prior to the effective date of such termination. 7.4. Effect of Termination. Upon termination or expiration of this Agreement, any rights granted pursuant to this Agreement shall cease and each party shall return (or, if so elected by the owning party, destroy) the other party’s Confidential Information in its possession (including all copies thereof, whether electronic, hard-copy or otherwise). In addition, Developer shall immediately return all copies of the Blackboard APIs, Documentation and DVBAs. 7.5. Suspension. Developer agrees that, if Blackboard determines, in its sole discretion, that Developer has: (a) breached any term, condition or restriction of this Agreement; (b) developed any Developer Application or other software which poses any security or performance risk to any system, network, hardware, software, or technology of Blackboard or its suppliers or customers; (c) taken any action, or engaged in any conduct, which presents a risk of liability to or violation of law by Blackboard, then, in any such event, Blackboard can suspend Developer’s access and use of the API or Documentation, any other materials or technology made available by Blackboard, and any other rights or privileges provided under this Agreement. Additionally, in any such event, Blackboard may require Developer to disable the interoperability of the applicable Developer Applications with the applicable Blackboard Applications in accordance with instructions provided by Blackboard. 7.6. Survival. Notwithstanding the above: (a) Sections 1 (Definitions), 7 (Termination), 8 (Confidential Information), 9 (Intellectual Property Ownership), 11 (Indemnification), 12 (Limitation of Liability), and 13 (General Provisions) shall survive the expiration or termination of this Agreement. 8. CONFIDENTIAL INFORMATION 8.1. Definition. “Confidential Information” shall mean any and all non-public information of a party to this Agreement which is either marked as confidential or is of a type or nature that should be recognized as confidential by a commercially reasonable party acting in good faith. Confidential Information of Blackboard includes non-public information regarding its software solutions and related documentation, APIS and related documentation, product plans, technical data, specifications, know-how, methodologies and business methods. 8.2. Use of Confidential Information. Except as otherwise provided below, the party receiving Confidential Information (the “Recipient”): (i) shall hold all Confidential Information of the disclosing party (the “Discloser”) in confidence and will use such information only for the purposes set forth in this Agreement; and (ii) shall not disclose Confidential Information of the Discloser to any third party (other than employees, officers or directors of the party) except as expressly authorized herein or with the express written permission of the Disclosing Party. Notwithstanding the above, a party may disclose the other party’s Confidential Information to a third party who has a need to know, who has been pre-approved by the Disclosing Party, and who, prior to obtaining access to the Confidential Information, has executed a non-disclosure and limited use agreement approved by the Discloser. The Recipient shall protect the Confidential Information of Discloser at least in the manner and degree the Recipient uses to protect its own Confidential Information, but in no event less than a commercially reasonable standard of care. 8.3. Scope. The foregoing obligations shall not apply to: (i) information that is or becomes publicly available through no fault of Recipient; (ii) information that is known by Recipient prior to the time of disclosure hereunder; (iii) information that is lawfully obtained from a third party who has the right to make such disclosure without any duty of confidentiality; or (iv) any disclosure required by applicable law, provided that Recipient shall use reasonable efforts to give advance notice to, and cooperate with, the Discloser in connection with any efforts to prevent such disclosure. 8.4. Account Information. Developer shall maintain, and shall ensure that its authorized users maintain, the confidentiality of all account information (such as login information and passwords) that Blackboard provides to Developer, or Developer provides to Blackboard, to enable access to and use of a DVBA or any associated documentation and materials. Developer shall be responsible for preventing any unauthorized disclosure or use of such account information, any ramifications thereof, and for promptly notifying Blackboard of any breach of this obligation. Blackboard may deny access to any user if it reasonably believes that Developer’s account information has been lost, stolen, or compromised. 9. INTELLECTUAL PROPERTY OWNERSHIP. Blackboard owns all Blackboard Applications, APIs and Documentation, any other materials or technology made available to Developer, and all derivative works of any of the above. Developer owns the Developer Applications. Developer acknowledges and agrees that: (i) other developers and third parties may utilize the APIs and Documentation to develop and make available applications which are similar to or compete with the Developer Applications; and (ii) Blackboard may develop and make available applications that are similar to or otherwise compete with, the Developer Applications. 10. WARRANTIES; DISCLAIMER OF WARRANTIES 10.1. Warranties of Developer. Developer represents and warrants to Blackboard that: 10.1.1. Each Developer Application: (i) shall be developed in a good and workmanlike manner and in compliance with the requirements and purposes of this Agreement; (ii) shall not infringe any third party’s intellectual property rights; (iii) shall be free from any viruses or malicious code, or any code or mechanism which would permit unauthorized access to any Blackboard Application (i.e. any access other than that which, in compliance with the APIs and Documentation, allows the exchange of data between the Blackboard Application and the Developer Application); and (iv) shall contain no open source, freeware, copyleft or similar components which would require general or public disclosure of any component of any Blackboard Application or other Blackboard technology or otherwise impair Blackboard’s rights in any Blackboard Application or technology. 10.1.2. it shall comply with applicable laws and regulations; 10.1.3. it will make no representations, commitments warranties or guarantees regarding Blackboard, any Blackboard Application or any other intellectual property of Blackboard other than as permitted in the Agreement. 10.1.4. It shall not provide any data to Blackboard or to any Blackboard Application other than sample data which does not identify, reflect or represents any information regarding any actual individual or entity; 10.2. EXCEPT AS EXPRESSLY PROVIDED HEREIN, THE PARTIES DISCLAIM ALL WARRANTIES, WHETHER EXPRESSED OR IMPLIED, INCLUDING WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL BLACKBOARD BE LIABLE FOR THE FAILURE, DELAY, ERROR OR IMPAIRMENT OF INTEGRATION OR INTEROPERABILITY BETWEEN ANY DVBA or BLACKBOARD APPLICATION AND ANY DEVELOPER APPLICATION. 11. INDEMNIFICATION. Developer shall, indemnify, defend and hold Blackboard (and all of its officers, employees, agents and Clients; collectively, the “Indemnified Parties”) harmless and from any and all damages, losses, judgments, liabilities, costs and expenses (including reasonable attorneys fees; collectively, “Damages”) arising out of or relating to: 11.1.1. any third party claim or legal action that any Developer Application or any other materials or other intellectual property made available to Blackboard hereunder infringes any copyrights, confidentiality rights, trade secrets, trademarks, patents and other intellectual property rights; 11.1.2. any third party claim or legal action relating to or arising in connection with any Developer Application (including its interoperability with any Blackboard Application), any other intellectual property of Developer or any act or omission of Developer; 11.1.3. any third party claim or legal action relating to or arising from any a breach by Developer of any representation, warranty or covenant set forth in this Agreement. 12. LIMITATION OF LIABILITY. TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT WILL BLACKBOARD OR ITS LICENSORS BE LIABLE, EVEN IF WE WERE ADVISED IN ADVANCE OF THE POSSIBILITY, FOR: (A) ANY LOSS OF BUSINESS, CONTRACTS, PROFITS, ANTICIPATED SAVINGS, GOODWILL OR REVENUE; (B) ANY LOSS OR CORRUPTION OF DATA, OR (C) ANY INCIDENTAL, INDIRECT OR CONSEQUENTIAL LOSSES OR DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, SPECIAL, PUNITIVE, OR EXEMPLARY DAMAGES). IN NO EVENT SHALL BLACKBOARD AND OUR LICENSORS’ CUMULATIVE LIABILITY FOR ALL CLAIMS ARISING FROM OR RELATING TO THE AGREEMENT, REGARDLESS OF THE NATURE OF THE CLAIM, EXCEED THE GREATER OF: (A) THE AMOUNT OF ANY FEES PAID BY DEVELOPER HEREUNDER DURING THE TWELVE (12)-MONTH PERIOD IMMEDIATELY PRIOR TO THE FIRST CLAIM ASSERTED HEREUNDER; OR (B) ONE HUNDRED DOLLARS ($100). THIS LIMITATION OF LIABILITY IS INTENDED TO APPLY WITHOUT REGARD TO WHETHER OTHER PROVISIONS OF THE AGREEMENT HAVE BEEN BREACHED OR HAVE PROVEN INEFFECTIVE OR HAVE FAILED OF THEIR ESSENTIAL PURPOSE. 13. GENERAL PROVISIONS 13.1. Entire Agreement. The terms and conditions contained in this Agreement comprise the entire agreement and understanding between Blackboard and Developer and neither is bound by any representation or inducements not specifically set forth herein. This Agreement supersedes any prior representations, discussion, communications or presentations. 13.2. Severability, Modification and Waiver. If any portion of this Agreement is held to be void, invalid or otherwise unenforceable, in whole or part, the remaining portions of this Agreement shall remain in effect. This Agreement may not be modified or amended except in writing signed by an authorized representative of each party. A party’s failure to exercise any rights herein shall not constitute or be deemed a waiver or forfeiture of such rights. If a party wishes to waive its rights hereunder, it must provide written notification of its waiver of such rights to the other party. 13.3. Non-exclusivity. This Agreement is non-exclusive. 13.4. Independent Contractors and Non-Interference. The parties are each an independent contractor. This Agreement does not create an actual or apparent agency, joint venture, fiduciary or employee and employer relationship between the parties. Neither party is granted any right or authority to assume or create any obligation or responsibility, express or implied, on behalf of the other party or to bind the other party in any matter, including, without limitation, the right or authority to obligate the other party to accept or deliver any order, or to sell or refuse to sell to any customer. 13.5. Dispute Resolution. In the event of any controversy or claim arising out of or relating to this Agreement, or a breach thereof, the parties will consult and negotiate with each other and attempt to reach a satisfactory solution. If they do not reach settlement within a period of thirty (30) days, then, upon notice by any party to the other), any such controversy or claim will be referred to arbitration for full and final settlement by a panel of three arbitrators (or fewer if agreed by the Parties) appointed in accordance with the Rules of Arbitration of the International Chamber of Commerce (“ICC Rules”). All arbitration proceedings will be conducted in the English language and will be conducted pursuant to ICC Rules. Any award issued pursuant to ICC Rules may be enforced by any court of competent jurisdiction. The allocation of the cost of the arbitrators and administration of conducting the arbitration will be borne equally by the Parties. The governing law is the State of New York and the place of arbitration is Washington, D.C. The U.N. Convention on Contracts for the International Sale of Goods shall not apply to the Agreement. 13.6. Assignment. No right or obligation of Developer under the Agreement may be assigned, delegated or otherwise transferred, whether by agreement, operation of law or otherwise, without Blackboard’s express prior written consent, and any attempt to assign, delegate or otherwise transfer any of Developer’s rights or obligations hereunder, without such consent, shall be void. Subject to the preceding sentence, the Agreement shall bind each party and its permitted successors and assigns. 13.7. Notices. Any notice or communication permitted or required hereunder shall be in writing and shall be delivered in person or by courier, or mailed by certified or registered mail, postage prepaid, return receipt requested, and, in the case of notices to us, sent to Blackboard Inc., Attn: General Counsel, 1111 19th Street NW, 9th Floor, Washington DC, 20036 or to such other address as shall be given in accordance with this Section 13.5, and, in the case of Developer, to the address supplied to Blackboard when registering, and shall in each case be effective upon receipt. 13.8. Force Majeure. Neither party shall be liable for failure to fulfill its obligations under this Agreement if that failure is caused, directly or indirectly, by reasons beyond its reasonable control, including flood, fire, civil disorder, government actions, war, terrorism, embargoes, labor disputes/strikes or other natural calamity or act of God. 13.9. No Third-Party Beneficiaries. Nothing in this Agreement is intended to, or shall, create any third-party beneficiaries, whether intended or incidental, and neither Party shall make any representations to the contrary. 13.10. Publicity. Except as otherwise provided in this Agreement, each party shall obtain the prior written consent of the other prior to: (a) releasing any press release or public announcement regarding the other party or the relationship established hereby or (b) using the other party’s name, or the name of any product or solution of the other party in any marketing or other materials or campaigns. 13.11. Audit Rights. Upon reasonable notice, Blackboard shall have the right to audit, at its expense, Developer’s books and records, business and development practices, operations, systems and Developer Applications not more than once per calendar year to ensure past and ongoing compliance with this Agreement. Developer shall cooperate and support any such audit as reasonably requested by Blackboard. Exhibit A Member Benefits Support Benefits Access to the Community.Blackboard.com Developer Network Site Product Development Benefits Access to a DVBA enabling REST and LTI testing, development and demonstrations in accordance with the terms and conditions of this Agreement.",
    "tags": "Legal",
    "url": "/legal/terms-and-conditions.html"
  },{
    "title": "Turn On All The Switches",
    "text": "# LTI In Learn - Turn On All The Switches ### Overview We often hear about this message \"The Tool Provider has been disabled by the System Administrator\" The usual cause is that one of the 3 LTI switches is disabled. There are 3 places you need to enable LTI: (1) at the tool level, (2) at the course/organization level, and (3) at the LTI Global Properties level. Screenshots follow. **LAST, BUT NOT LEAST - Make certain you are enrolled in the course, as an instructor or student, before using the LTI placements you create in a course! Your launch will fail if you don't have a role in the course.** ### All the Switches (1) Administrator Panel -> Tools & Utilities section -> Tools ![1-LTIConfigAdminTools.png](/assets/img/turn-on-all-switches-1.png) (2) In a Course/Organization, Start at the Left Nav Menu ![2-LTIConfigCourseOrg.png](/assets/img/turn-on-all-switches-2.png) (3) Administrator Panel -> Integrations section -> LTI Tool Providers -> Manage Global Properties ![3-LTIConfigManageGlobal.png](/assets/img/turn-on-all-switches-3.png)",
    "tags": "Standards",
    "url": "/standards/lti/troubleshooting/turn-on-all-switches.html"
  },{
    "title": "UEF Tutorials",
    "text": "# UEF Tutorials You will find these tutorials very helpful as you start your Ultra Extension Framework (UEF) developement. #### How To Ultra Extension Framework - Scott Hurrey DevCon 2020 ### Ultra Extension Framework This [tutorial](/learn/uef/lti-to-uef-tutorial) starts with a Python-based LTI 1.3 Hello World application and shows you how to convert that project into a UEF integration. The tutorial is also available in a Youtube playlist, if you prefer to learn in this way. If you prefer to go directly to Youtube, [click here](https://www.youtube.com/watch?v=Mp9tFpultaQ&list=PLbewGw29xjRa2ZQ7gs3CgisvBVvyuKhsR&ab_channel=ScottHurrey){:target=\"_blank\"} ### Sample Code! You may find the related code used on the videos here: [GitHub BBDN-UEF-Python](https://github.com/blackboard/BBDN-UEF-Python){:target=\"_blank\"} ### Notice Before releasing a UEF integration, that uses the UEF Premium APIs, to production you will be required to meet a certain level of Blackboard Partnership. See [Become a Blackboard Partner](/partners/become-a-partner.html).",
    "tags": "Learn UEF",
    "url": "/learn/uef/tutorials.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/tutorials.html"
  },{
    "title": "REST Tutorials",
    "text": "# REST Tutorials You will find these tutorials very helpful as you start developement. ### Python and the Postman - DevCon 2020 #### [Download the slides](/assets/files/DevCon2020-MBK-PythonAndPostman.pdf){: target='_blank'} ### Building a Very Simple REST API Web Application from Scratch #### [Download the slides](/assets/files/DDevCon2020-MBK-SimpleRESTwebApp.pdf){: target='_blank'}",
    "tags": "Learn REST getting-started",
    "url": "/learn/rest/getting-started/tutorials.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/uef.html"
  },{
    "title": "Working with Ultra assignments",
    "text": "# Use APIs to Work with Ultra Assignments ### Overview Blackboard Learn Ultra experience offers a REST API for managing assessments. In Ultra, an assessment is effectively the same thing as an assignment except for how they are stored internally. In an assessment, there are questions of various types. Each 'question' is a slot for content that may not actually contain what you normally think of as a question. For more information about assignments and questions and how Learn users experience them, see [Ultra: Create an Assignment](https://community.blackboard.com/external-link.jspa?url= https%3A//help.blackboard.com/Learn/Instructor/Assignments/Create_ and_Edit_Assignments) in Blackboard Help. An assignment is made up of one or more questions. The following question types are available for use with Ultra via REST API. * `EitherOr` - questions that allow one of two possible responses, such as \"true or false\" * `Essay` - questions that provide a WYSIWYG editor and allow long text response * `MultipleAnswer` - allow students to choose more than one answer * `Presentation` - represents a 'question' that only has text and/or attached files referenced from within question.text, but that has no actual answer, points, or evaluation associated with it As of version 3300.9.0, you can use the public API to read any type of question. You can use the public API to create, update, and delete methods only with presentation-type questions. ### Before You Begin * To work with assignments, you need the entitlements listed for each endpoint in the API reference documents. * If you want to use a file with a new assignment, you must upload the file to Learn before you create the new assignment. ### Create an Assignment Before you create an assignment, remember that you must first upload any files that you intend to use to create the object. 1. If you have not already uploaded any files that you need to use to create the assignment, use the steps in the following section to do so. 2. Make a POST request to `/learn/api/public/v1/courses/{courseId}/contents/createAssignment`. See the reference below for more information about using the endpoint. Note that the response body of the request does not return the full assignment object. It returns an object of IDs, one for each of the various resources created by Learn. 3. Use the response body to further manage the assignment. Use these objects to further manage the assignment that you created. ### Upload a File to Blackboard Learn Before you can use a file with a REST API call, you must use an API upload it to Blackboard Learn. 1. Make a POST request to /learn/api/public/v1/uploads. 2. Use the ID number in the response to further access the uploaded file. ### Add Content to an Existing Assignment As of 3300.9.0 you can add only presentation-type \"questions\" to assignments using the public REST API. 1. Make a POST request to /learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions/{questionId} 2. You can validate the response body against your original response body. ### Assignment-related Query Parameters All endpoints accept a query parameter fields that specifies the fields to be included in the response object, if any. The fields to be included are given as a comma-separated list. Specified fields are ignored if absent from the response. If no fields are specified, all fields are returned in the response. For example: POST to /learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/que stions/{questionId}?fields=id,title,status,message returns the ID and title of questions if the request succeeds because only those fields are included in the success response object. The method returns status and message if the request fails because only those fields are included in the error response object.",
    "tags": "Learn Rest",
    "url": "/learn/rest/advanced/ultra-assignments.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/ultra.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/tag/update.html"
  },{
    "title": "Upload a file to Ally",
    "text": "# Upload a file to Ally Start the process by uploading the file you would like to get feedback for. This is a multipart POST request. The response will contain the statusUrl that you can poll to check whether the file has been processed. If the file was processed previously, a resourceUrl will be provided through which you can fetch the feedback information immediately. ## Supported content types * PDF files * Microsoft® Word files * Microsoft® PowerPoint® files * OpenOffice/LibreOffice files * Uploaded HTML files * Image files (JPG, JPEG, GIF, PNG, BPM, TIFF) --- ### Endpoint ~~~ http POST /api/v2/clients/:clientId/content ~~~ ### Path Parameters * **clientId** - Path parameter - Your Ally Client ID ### Body Parameters * **file** - Post parameter - The binary file data ### Query Parameters * None ## Expected response There are two potential outcomes: 1. The file is new and will be processed asynchronously. The endpoint will return with a 202 Accepted response and the following response body: ~~~ json { \"hash\": \"UkVBRE1FLm1k...\", \"status\": \"pending\", \"statusUrl\": \"/api/v2/clients/:clientId/content/UkVBRE1FLm1k.../status, \"resourceUrl\": null } ~~~ Parameter | Definition --- | --- hash | the content hash used to reference the file by Ally as a Service status | the stage of processing the file is in* statusUrl | the endpoint to call to check the status resourceUrl | the endpoint to retrieve the report or metadata *The following status values can be identified: * success * pending * inprogress * failed 2. The file has been processed before. The endpoint will return a `303 See Other` with a `Location` header to the feedback URL ### Testing with cURL ~~~ bash curl \\ -H \"Authorization: Bearer myJwtToken\" \\ -F\"file=@test.pdf\" https://prod.ally.ac/api/v2/clients/:clientId/content ~~~ ## Frequently Asked Questions This section contains answers to many of the common questions we field as developers are on-boarding to the Ally as a Service API. ### Upload - input * **Q: I have questions about the version support for each of these. For instance, which versions of Office are supported?** * Office 365, Office 2016, LibreOffice 5.2, LibreOffice 5.4 * **Q: What image file formats are supported?** * Most image types whose mimetype starts with image/ * **Q: Are there constraints on images: sizes, resolution?** * No * **Q: Are there any restrictions on HTML files? What about external references in the HTML files?** * External references will be resolved and included for the HTML accessibility check, but the files themselves will not be checked. * **Q: Is there support for HTML archive formats?** * No * **Q: Is there any support for archive format: zip, tar?** * No ### Upload - mechanics * **Q: We’re posting into an end-point protected with TLS 1.2 or higher, right?** * Yes. We use standard AWS security practices (ELBSecurityPolicy-TLS-1-2-2017-01) * **Q: Related to the archive question, are we posting the raw file, or is it organized in a multipart/form-data?** * Raw Files are uploaded through a multipart upload. One file at a time. * **Q: What’s the maximum file size?** * There is a 50MB file size limit. We're gathering feedback on how large this limit should be to support our customers. * **Q: Does the endpoint require a particular encoding?** * UTF-8 is recommended * **Q: Does the POST have to have an accurate Content-Length: header?** * Yes * **Q: Do the authentication tokens expire?** * No * **Q: If we had N writers submitting to this API, would each have to have a separate authentication token?** * No * **Q: Can we submit compressed files? No If so, what compression does Ally support?** * None * **Q: For the 303/See Other response, if we mistakenly permitted two writers to submit the same file in some brief period, would that automatically be caught? How long is that window?** * Yes ### Upload - output * **Q: I’m especially surprised to see the (x0,y0,x1,y) notation for errors. Can you tell me more about that?** * These are coordinates for areas in the document that contain some accessibility issue. They are coordinates that correspond to our PDF preview version. * **Q: The output meta data contains “isVersioned”. Is there a standard way to present versions of documents when we post them?** * No, see next answer. * **Q: The meta data contains a “name”, “description” and other parameters. But these are not reflections of arguments in the initial POST. Is this just an indication that there’s a richer set of arguments for the submission phase?** * These parameters are artifacts from our LMS API. They will be removed shortly as they carry no function in a standalone function.",
    "tags": "Ally",
    "url": "/ally/uploading-files.html"
  },{
    "title": "Useful Links",
    "text": "# Useful Links This document contains a number of links to resources to assist a Building Block Developer in the quest to build an integration with the Blackboard Building Blocks framework. ## Building Block Developer Tools * [Blackboard Maven Repository](https://maven.blackboard.com/content/repositories/releases/){: target='_blank'} * [schema.xml validator](https://maven.blackboard.com/content/repositories/releases/blackboard/platform/bb-schema-xsd/){: target='_blank'} * [bb-manifest.xml validator](https://maven.blackboard.com/content/repositories/releases/blackboard/platform/bb-manifest-plugin/){: target='_blank'} * [Blackboard Github Repository](https://github.com/blackboard){: target='_blank'} * [Java 11](prepare-for-java11) * [Java 11 FAQs](java11-faq)",
    "tags": "Learn b2",
    "url": "/learn/b2/resources/useful-links.html"
  },{
    "title": "View Events",
    "text": "# View Events Blackboard Learn's Caliper Analytics stream sends ViewEvent messages to cover four use cases: * **User clicks on an assignment link** * **User clicks on an external link** * **User clicks on a discussion board link** * **User clicks on a content file link** Here is some of the key data that is associated with all ViewEvents: **group.courseNumber** - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) **object.@id** - …/content/id - the primary key for the content ID **action** - Viewed ### Example Payload ~~~ json { \"@context\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"type\": \"ViewEvent\", \"id\": \"788e0326-c12c-4c23-be39-27b446992b79\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_1_1\", \"bb:user.externalId\": \"administrator\" } }, \"action\": \"Viewed\", \"object\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/unknown/unknown\", \"type\": \"Chapter\", \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"index\": 0 }, \"target\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/unknown/unknown\", \"type\": \"Chapter\", \"creators\": [], \"learningObjectives\": [], \"keywords\": [], \"index\": 0 }, \"eventTime\": \"2020-12-24T21:04:41.359Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/applications/learn\", \"type\": \"SoftwareApplication\", \"extensions\": {} }, \"group\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/courses/875ab28d354e444a81784e58e44a60b2\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_1358_1\" }, \"members\": [], \"courseNumber\": \"04650987_bbtest_ignore\" }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/courses/875ab28d354e444a81784e58e44a60b2/members/ffc08009f0884c059192bac549e117b2\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_1358_1\", \"bb:course.externalId\": \"04650987_bbtest_ignore\", \"bb:user.id\": \"_1_1\", \"bb:user.externalId\": \"administrator\" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_1_1\", \"bb:user.externalId\": \"administrator\" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/courses/875ab28d354e444a81784e58e44a60b2\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_1358_1\" }, \"members\": [], \"courseNumber\": \"04650987_bbtest_ignore\" }, \"roles\": [ \"Instructor\" ], \"status\": \"Active\" }, \"federatedSession\": { \"startedAtTime\": \"2020-12-24T21:04:41.359Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/sessions/0D8663C4ABF729F1B7B9CA8B93A5AE0D\", \"type\": \"LtiSession\", \"name\": \"0D8663C4ABF729F1B7B9CA8B93A5AE0D\", \"dateCreated\": \"2020-12-24T21:04:41.359Z\", \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_1_1\", \"bb:user.externalId\": \"administrator\" } } }, \"extensions\": {} } ~~~",
    "tags": "Standards",
    "url": "/standards/caliper/events/view-events.html"
  },{
    "title": "Blackboard Learn SOAP",
    "text": "# Blackboard Learn SOAP **NOTE: SOAP Web Services have been deprecated. Much of their functionality will not work with Ultra, including with Ultra Courses.** Blackboard Web Services offer out-of-process integration points for Third- Party Developers interested in extending the Learn platform without creating a Building Block or using Java. The Web Services are based on SOAP and utilize WS_Security tokens for secure transmission of data between two entities. They can be accessed remotely and are programming language-agnostic, allowing for maximum flexibility of the developer's skill set, while still providing a substantial set of APIs for reading and writing data. ### Getting Started In the [Getting Started](getting-started) section you will find instructions for setting up your development environment, generating a reusable .NET or Java library for use in your application from sample code available inside the Blackboard Learn User Interface, and building the QA app, which allows you to test all of the Blackboard Web Services with a pre-built, functioning desktop application. #### Examples These [examples](examples) are provided as reference implementations of API the usage of Blackboard Web Service end points to interact with Blackboard Learn from various languages, such as C#, Java and PHP. #### Tutorials These [tutorials](/tutorials/) are provided as short ramp up for concepts and APIs behind the development of Web Service integrations. #### Documentation * [Building Block API Documentation](/learn/b2/api-documentation)",
    "tags": "Learn Soap",
    "url": "/learn/soap/getting-started/web-services.html"
  },{
    "title": "What is DVBA",
    "text": "# What is DVBA ### Developer Versions of Blackboard Applications Blackboard makes developer versions of our applications available to integrators for development work. Currently Blackboard makes available the following developer versions of Blackboard applications (DVBAs). #### Developer Amazon Machine Image (AMI) is available in the Amazon Marketplace. It is pre-built and configured to allow you to access a Learn SaaS, Ultra-enabled instance of Blackboard. You can use it to build Learning Tools Interoperability integrations (LTIs) and Blackboard REST integrations. For more information, see Using the Developer AMI. #### Developer Virtual Machine (DVM) is a downloadable VirtualBox image built and managed with Vagrant. With it, you can run a local copy of Blackboard Learn for building LTIs, REST, and Building Blocks. For more information, see Developer Virtual Machine - DVM. #### Blackboard Collaborate Development Instance is a SaaS-based development system that allows developers to build integrations for Blackboard Collaborate with the Ultra Experience using the Collaborate REST APIs. For access, send a request to developers@blackboard.com.",
    "tags": "DVBA",
    "url": "/dvba/what-is-dvba.html"
  },{
    "title": "Wiki Events",
    "text": "# Wiki Events Blackboard Learn's Caliper Analytics stream emits a WikiEvent whenever a student posts to a wiki in an original experience course. Here is some of the key data that is associated with these events: ### WikiEvent **object.wikiId** - the primary key for the wiki **action** - Created, Modified, Commented **extensions** - contains a tag called **bb:user.externalId** with the batch_uid for the user ### Sample Payload Here is a sample of what an event payload might look like: ~~~ json { \"sensor\": \"530efc49-6b9f-40a6-918b-966ee83a744c\", \"sendTime\": \"2021-01-05T16:58:53.778Z\", \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p1\", \"data\": [ { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/WikiEvent\", \"id\": \"1162c8d4-c3f8-446f-a08a-c673e2a2eaf2\", \"actor\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/users/9c60a9cdb3144d1aa77ff56c34ef248b\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_227_1\", \"bb:user.externalId\": \"scott.hurrey@myschool.edu\" } }, \"action\": \"Created\", \"object\": { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/WikiPage\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/wiki/7cdeb8248ba84ec3a6f859973fb7764c\", \"name\": \"Second Wiki Post\", \"description\": \"\", \"wikiId\": \"_36_1\", \"wikiName\": \"Test Wiki\", \"pointsPossible\": 100, \"extensions\": {} }, \"generated\": { \"@context\": [ \"http://caliper.blackboard.com/ctx/caliper/v1/Context\", \"http://purl.imsglobal.org/ctx/caliper/v1p1\" ], \"type\": \"http://caliper.blackboard.com/caliper/v1/WikiPost\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/wiki/7cdeb8248ba84ec3a6f859973fb7764c/post/AXbTfLPSgpyqar8j43GB\", \"name\": \"\", \"description\": \"\", \"totalWordCount\": 17, \"extensions\": {} }, \"eventTime\": \"2021-01-05T16:58:42.126Z\", \"edApp\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/applications/learn\", \"type\": \"SoftwareApplication\" }, \"membership\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/courses/e9c09e39c7844ae3b2ed677ac4fd90d7/members/9c60a9cdb3144d1aa77ff56c34ef248b\", \"type\": \"Membership\", \"extensions\": { \"bb:course.id\": \"_124_1\", \"bb:course.externalId\": \"og-101\", \"bb:user.id\": \"_227_1\", \"bb:user.externalId\": \"scott.hurrey@myschool.edu\" }, \"member\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/users/9c60a9cdb3144d1aa77ff56c34ef248b\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_227_1\", \"bb:user.externalId\": \"scott.hurrey@myschool.edu\" } }, \"organization\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/courses/e9c09e39c7844ae3b2ed677ac4fd90d7\", \"type\": \"CourseOffering\", \"extensions\": { \"bb:course.id\": \"_124_1\" }, \"members\": [], \"courseNumber\": \"og-101\" }, \"roles\": [ \"Learner\" ], \"status\": \"Active\" }, \"federatedSession\": { \"startedAtTime\": \"2021-01-05T16:58:42.126Z\", \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/sessions/5118E091FCBDF29709BBD9D6F6758679\", \"type\": \"LtiSession\", \"name\": \"5118E091FCBDF29709BBD9D6F6758679\", \"dateCreated\": \"2021-01-05T16:58:42.126Z\", \"user\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/users/9c60a9cdb3144d1aa77ff56c34ef248b\", \"type\": \"Person\", \"extensions\": { \"bb:user.id\": \"_227_1\", \"bb:user.externalId\": \"scott.hurrey@myschool.edu\" } } }, \"extensions\": {}, \"session\": { \"id\": \"https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/sessions/5118E091FCBDF29709BBD9D6F6758679\", \"type\": \"Session\" } } ] } ~~~",
    "tags": "Standards",
    "url": "/standards/caliper/events/wiki-events.html"
  },{
    "title": "Help Provider Scenarios",
    "text": "# Help Provider Scenarios ## Table of Contents - [Default Help](#default-help) - [One Auxilary Provider](#one-auxiliary-provider) - [Multiple Auxiliary Providers](#multiple-auxiliary-providers) - [One Primary Provider](#one-primary-provider) - [Multiple Primary Providers](#multiple-primary-providers) - [Multiple Auxiliary and Primary Providers](#multiple-auxiliary-and-primary-providers) ## Default Help Clicking the help icon opens Blackboard Help in a new tab. ## One Auxiliary Provider Clicking the help icon will open a menu containing: - Blackboard Help - Auxiliary Provider ## Multiple Auxiliary Providers Clicking the help icon will open a menu containing: - Blackboard Help - Auxiliary Provider 1 - Auxiliary Provider 2 ## One Primary Provider Clicking the help icon opens the Primary Provider's page in a new tab. ## Multiple Primary Providers Clicking the help icon will open a menu containing: - Primary Provider 1 - Primary Provider 2 ## Multiple Auxiliary and Primary Providers Clicking the help icon will open a menu containing: - Primary Provider 1 - Primary Provider 2 - Auxiliary Provider 1 - Auxiliary Provider 2",
    "tags": "",
    "url": "/learn/uef/UEFDocs/src/pages/HelpProviderScenarios.html"
  },{
    "title": "Messaging Recommendations",
    "text": "# Messaging Recommendations ## Table of Contents - [Overview](#overview) - [Iframe to Iframe communication](#iframe-to-iframe-communication) - [LocalStorage](#localstorage) - [HTTP](#http) - [Recommendation](#recommendation) - [Static Content to Iframe communication](#static-content-to-iframe-communication) ## Overview In some cases, an Integration may want to render content into Ultra and have that content send messages back to the originating integration. There are two primary use cases for this 1. iframe to iframe 2. static content to Iframe. In the case of iframe to iframe the goal is to send content from a portal that is an iframe back to the originating iframe (integration loaded in ultra). In the case of static content the goal is to send events from statically rendered content back to the originating iframe. ## Iframe to Iframe communication In the case of Iframe to Iframe communication we have a bit more control of sending messages between contexts. Currently there are two known ways to do this. This can be accomplished by using either LocalStorage or HTTP. ### LocalStorage The first is to use [LocalStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) as a message bus between the two iframes. `LIMITATION WARNING: In order for this to work both iframes have to have the same origin. If this is not the case then this will not work.` The implementation for this is rather easy and can be broken down into the following ```javascript // localStorageMessager.js (used in all following scripts.) const subscribers = new Map(); const updateSubscribers = (subs, data) => { subs.forEach(sub => { sub(data); }); } window.addEventListener('storage', (event) => { const subs = subscribers.get(event.key); // Get subscribers. if (!subs) { return; } updateSubscribers(subs, JSON.parse(event.newValue)); // Notify subscribers. }); const subscribe = (topic, callback) => { const current = subscribers.get(topic); if (current) { current.push(callback); } else { subscribers.set(topic, [callback]); } }; const publish = (topic, value) => { localStorage.setItem(topic, JSON.stringify(value)); }; ``` ```javascript // iframe rendered content subscribe('topic.response', event => { console.log('Got message from owning integration ', event); }); publish('topic.send', {data: 'hello'}); ``` ```javascript // owning integration subscribe('topic.send', event => { console.log('Got message from rendered content ', event); publish('topic.response', {data: 'Greetings'}); }); ``` ### HTTP Another more complicated approach would be to use fetch or XMLHttpRequest to send a message from the iframe to a web service. This web service would in turn forward the message on to the originating iframe. While this approach is a bit more difficult, if done correctly this can allow cross origin communication. ```javascript // httpManager.js (used in all scripts but server script.) const subscribers = new Map(); const updateSubscribers = (subs, data) => { subs.forEach(sub => { sub(data); }); } const evtSource = new EventSource(`/api/messaging`); // Create an EventSource to get data back gradually over time. evtSource.addEventListener('message', (event) => { const res = JSON.parse(event.data); res.forEach(message => { const subs = subscribers.get(message.topic); if (subs) { updateSubscribers(subs, message.value); } }); }); evtSource.addEventListener('open', () => { console.log('Message channel is open'); }); const subscribe = (topic, callback) => { const current = subscribers.get(topic); if (current) { current.push(callback); } else { subscribers.set(topic, [callback]); } }; const publish = (topic, value) => { const message = new Request('http://mysite.com/api/messaging/data', { method: 'POST', body: JSON.stringify({ topic, value}), headers: new Headers([ ['Content-Type', 'application/json;charset=UTF-8'] ]) }); fetch(message); // Send the message to the web server. }; ``` ```javascript // web server handler (in express) const messages = new Map(); const listeners = []; const registerMessagingHandlers = (app) => { // Call this with your express app function formatMessage(message) { return `data: ${JSON.stringify(message)}\\n\\n`; // Correct the format for event stream. } function updateListeners() { const retVal = []; messages.forEach((v, k) => { retVal.push({ topic: k, value: v, }); }); listeners.forEach((v) => { v.write(formatMessage(retVal)); }); } app.post('/api/messaging/data', (req, res) => { const current = messages.get(req.body.topic); if (current === req.body.value) { return; } messages.set(req.body.topic, req.body.value); setTimeout(() => { updateListeners(); // Send new data to clients }); res.status(201).send(); }); app.get('/api/messaging', (req, res) => { // Handle incoming event source request. listeners.push(res); const retVal = []; messages.forEach((v, k) => { retVal.push({ topic: k, value: v, }); }); res.writeHead(200, { 'Cache-Control': 'no-cache', 'Connection': 'keep-alive', 'Content-Type': 'text/event-stream', }); res.write(formatMessage(retVal)); // Send current state. }); }; ``` ```javascript // iframe rendered content subscribe('topic.response', event => { console.log('Got message from owning integration ', event); }); publish('topic.send', {data: 'hello'}); ``` ```javascript // owning integration subscribe('topic.send', event => { console.log('Got message from rendered content ', event); publish('topic.response', {data: 'Greetings'}); }); ``` ### Recommendation For most cases the LocalStorage approach would be our recommendation. The LocalStorage approach is the easiest to implement and has been proven more times. ## Static content to iframe communication In some cases an integration might want to render interactive content without the use of iframes. In this case the integration can use callbacks. Callbacks will notify the integrations iframe when a change has occured. In the below example we use callbacks to create a simple counter. ```javascript const btnStyle = { 'margin': '4px' }; let count = 0; let renderId; function renderContent() { let contents = { tag: 'span', children: [ { tag: 'button', props: { onClick: { callbackId: '1', // Id to be sent when button is pressed. mode: 'sync' }, style: btnStyle }, children: 'Decrement' }, { tag: 'span', props: {}, children: `Current Value ${count}` }, { tag: 'button', props: { onClick: { callbackId: '2', // Id to be sent when button is pressed. mode: 'sync' }, style: btnStyle }, children: 'Increment' } ] }; sendMessage({ type: \"portal:render\", portalId: renderId, contents: contents }); } const onUltraMessageReceived = (msg) => { if (msg.data.type === 'authorization:authorize') { ultraMessageChannel.postMessage({ \"type\": \"event:subscribe\", \"subscriptions\": ['click', 'hover', 'route', 'portal:new', 'portal:removed'] }); ultraMessageChannel.postMessage({ \"type\": \"portal:panel\", \"correlationId\": \"some:id\", \"panelType\": \"small\", \"panelTitle\": \"Static Messaging\" }); // Create panel when authorization is done. } if (msg.data.type === \"event:event\") { switch (msg.data.eventType) { case \"portal:new\": renderId = msg.data.portalId; renderContent(); // Portal has been created render initial content. break; } } if (msg.data.type === \"portal:callback\") { // Got a callback update our state if (msg.data.callbackId === \"1\" && count > 0) { count--; // Decrement button was pressed. } else if (msg.data.callbackId === \"2\") { count++; // Increment button was pressed. } renderContent(); } }; init(onUltraMessageReceived); ```",
    "tags": "",
    "url": "/learn/uef/UEFDocs/src/pages/MessagingRecommendations.html"
  }]};